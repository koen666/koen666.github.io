<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木语</title>
  
  <subtitle>技术是逻辑，木是自然，语是表达</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-10-17T14:30:56.057Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>koen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cypher与neo4j</title>
    <link href="http://example.com/2025/10/17/cypher/"/>
    <id>http://example.com/2025/10/17/cypher/</id>
    <published>2025-10-17T04:00:00.000Z</published>
    <updated>2025-10-17T14:30:56.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一cypher是什么">一、Cypher是什么</h3><p>Cypher是操作<strong>图数据库（Neo4j）</strong> 的语言。<br />图数据库里的数据不是表格（像MySQL的表），而是像“地图”一样的结构：<br />-有很多“点”（比如“人”“病”“药”），这些“点”叫<strong>节点（Node）</strong>。<br />-点和点之间有“线”连接（比如“人患病”“药治人”），这些“线”叫<strong>关系（Relationship）</strong>。</p><p>Cypher的作用就是：<strong>描述“点和线”的样子，让数据库找到你要的数据</strong>。</p><h3id="二最基础节点node怎么表示">二、最基础：节点（Node）怎么表示？</h3><p>节点是图里的“实体”（比如“张三”“感冒”），写法是：<br /><code>(变量名:标签 &#123;属性&#125;)</code></p><h4 id="拆解每个部分">拆解每个部分：</h4><ul><li><code>()</code>：必须用圆括号把节点包起来，相当于“这是一个节点”。<br /></li><li><code>变量名</code>：给节点起个临时小名（比如用<code>p</code>代表“人”，<code>d</code>代表“病”），方便后面引用。<br /></li><li><code>:标签</code>：节点的“类别”（比如<code>:Person</code>表示“人”，<code>:Disease</code>表示“疾病”），一个节点可以有多个标签（比如<code>:Person:Patient</code>表示“人且是患者”）。<br /></li><li><code>&#123;属性&#125;</code>：描述节点的特征，是键值对（比如<code>name: "张三"</code>，<code>age: 30</code>），用大括号包起来。</li></ul><h4 id="例子">例子：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 一个“人”节点：变量p，标签Person，属性name和age</span><br><span class="line">(p:Person &#123;name: &quot;张三&quot;, age: 30&#125;)</span><br><span class="line"></span><br><span class="line">// 一个“疾病”节点：变量d，标签Disease，属性name</span><br><span class="line">(d:Disease &#123;name: &quot;感冒&quot;&#125;)</span><br></pre></td></tr></table></figure><p>你可以理解为：<br /><code>(p:Person &#123;name: "张三"&#125;)</code> →“有个叫p的东西，它是‘人’，名字叫张三”。</p><h3id="三关键关系relationship怎么表示">三、关键：关系（Relationship）怎么表示？</h3><p>关系是节点之间的“连接”（比如“张三患感冒”），写法是：<br /><code>-[变量名:类型 &#123;属性&#125;]-&gt;</code></p><h4 id="拆解每个部分-1">拆解每个部分：</h4><ul><li><code>-[ ]-</code>：中括号代表“这是一个关系”，横线连接两个节点。<br /></li><li><code>-&gt;</code>：箭头表示方向（比如<code>A-&gt;B</code>表示“A到B的关系”，无方向可以写成<code>--</code>）。<br /></li><li><code>变量名</code>：给关系起个临时小名（比如<code>r</code>），方便引用。<br /></li><li><code>:类型</code>：关系的“类别”（比如<code>:患</code>表示“患病”，<code>:治疗</code>表示“可以治疗”），每个关系只能有一个类型。<br /></li><li><code>&#123;属性&#125;</code>：描述关系的特征（比如<code>:患</code>的关系可以有<code>时间: "2023-10-01"</code>）。</li></ul><h4 id="例子-1">例子：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// “张三患感冒”的关系：p（张三）通过r（患）指向d（感冒）</span><br><span class="line">(p:Person &#123;name: &quot;张三&quot;&#125;)-[r:患 &#123;时间: &quot;2023-10-01&quot;&#125;]-&gt;(d:Disease &#123;name: &quot;感冒&quot;&#125;)</span><br></pre></td></tr></table></figure><p>可以理解为：<br /><code>(p)-[r:患]-&gt;(d)</code> →“p和d之间有个叫r的关系，类型是‘患’，意思是p患了d”。</p><h3 id="四核心操作查数据match-return">四、核心操作：查数据（MATCH +RETURN）</h3><p>最常用的操作是“找数据”，用<code>MATCH</code>描述你要找的“点和线的模式”，用<code>RETURN</code>返回结果。</p><h4 id="只查节点">1. 只查节点</h4><p>比如：“找所有叫‘张三’的人”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 步骤1：用MATCH描述模式（找标签是Person，name是张三的节点，变量叫p）</span><br><span class="line">MATCH (p:Person &#123;name: &quot;张三&quot;&#125;)</span><br><span class="line">// 步骤2：用RETURN返回结果（返回p的所有信息）</span><br><span class="line">RETURN p</span><br></pre></td></tr></table></figure></p><p>再比如：“找所有年龄大于30的人，只返回他们的名字”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MATCH (p:Person)  // 找所有标签是Person的节点</span><br><span class="line">WHERE p.age &gt; 30  // 加条件：年龄大于30（WHERE是过滤条件）</span><br><span class="line">RETURN p.name     // 只返回名字</span><br></pre></td></tr></table></figure></p><h4 id="查关系节点关系">2. 查关系（节点+关系）</h4><p>比如：“找‘感冒’这种病有哪些伴随的症状”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 模式：疾病d（名字是感冒）通过关系r（类型是伴随症状）指向症状s</span><br><span class="line">MATCH (d:Disease &#123;name: &quot;感冒&quot;&#125;)-[r:伴随症状]-&gt;(s:Symptom)</span><br><span class="line">// 返回疾病名、关系的程度（比如“常见”）、症状名</span><br><span class="line">RETURN d.name, r.degree, s.name</span><br></pre></td></tr></table></figure></p><p>如果数据库里有“感冒伴随发烧、咳嗽”，结果会是：<br />| d.name | r.degree | s.name | |——–|———-|——–| | 感冒 | 常见 | 发烧 | |感冒 | 较常见 | 咳嗽 |</p><h4 id="查路径多个关系连起来">3. 查路径（多个关系连起来）</h4><p>比如：“找张三患的病有哪些症状”（路径：人→患→病→伴随→症状）<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 模式：p（张三）-患→d（病）-伴随→s（症状）</span><br><span class="line">MATCH (p:Person &#123;name: &quot;张三&quot;&#125;)-[r1:患]-&gt;(d:Disease)-[r2:伴随]-&gt;(s:Symptom)</span><br><span class="line">RETURN p.name, d.name, s.name  // 返回张三、病名、症状名</span><br></pre></td></tr></table></figure></p><h3 id="五其他常用操作增删改">五、其他常用操作：增删改</h3><h4 id="创建create">1. 创建（CREATE）</h4><p>比如：“新增一个叫‘李四’的人，年龄25”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE (p:Person &#123;name: &quot;李四&quot;, age: 25&#125;)</span><br></pre></td></tr></table></figure></p><p>比如：“给‘李四’和‘感冒’加一个‘患’的关系，时间是今天”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 步骤1：先找到李四和感冒这两个节点</span><br><span class="line">MATCH (p:Person &#123;name: &quot;李四&quot;&#125;), (d:Disease &#123;name: &quot;感冒&quot;&#125;)</span><br><span class="line">// 步骤2：创建他们之间的关系</span><br><span class="line">CREATE (p)-[r:患 &#123;时间: &quot;2023-10-02&quot;&#125;]-&gt;(d)</span><br></pre></td></tr></table></figure></p><h4 id="修改set">2. 修改（SET）</h4><p>比如：“把张三的年龄改成31，再加上性别‘男’”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 先找到张三</span><br><span class="line">MATCH (p:Person &#123;name: &quot;张三&quot;&#125;)</span><br><span class="line">// 用SET修改/新增属性</span><br><span class="line">SET p.age = 31, p.gender = &quot;男&quot;</span><br></pre></td></tr></table></figure></p><h4 id="删除delete">3. 删除（DELETE）</h4><p>删除节点前，必须先删除它的所有关系（不然“线”断了会报错）。<br />比如：“删除‘发烧’这个症状节点”<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// DETACH DELETE会自动删除该节点的所有关系，再删节点</span><br><span class="line">MATCH (s:Symptom &#123;name: &quot;发烧&quot;&#125;)</span><br><span class="line">DETACH DELETE s</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">本文用于介绍cypher语法</summary>
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="cypher" scheme="http://example.com/tags/cypher/"/>
    
    <category term="neo4j" scheme="http://example.com/tags/neo4j/"/>
    
    <category term="database" scheme="http://example.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>ssh-agent</title>
    <link href="http://example.com/2025/10/10/ssh-agent/"/>
    <id>http://example.com/2025/10/10/ssh-agent/</id>
    <published>2025-10-09T16:00:00.000Z</published>
    <updated>2025-10-10T12:19:36.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssh-agent-的工作原理">ssh-agent 的工作原理</h2><p>简化流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[用户] → ssh 命令 → [ssh-agent] → [私钥] → [服务器]</span><br></pre></td></tr></table></figure><ol type="1"><li>用户运行 <code>ssh user@host</code>。</li><li>SSH 客户端向 ssh-agent 请求签名（用私钥解密挑战）。</li><li>ssh-agent 返回签名，完成认证。</li><li>私钥从来不会被写入磁盘或发送到服务器。</li></ol><h2 id="ssh-agent-的主要命令">ssh-agent 的主要命令</h2><h3 id="启动服务">启动服务</h3><ul><li>Linux/macOS：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>Windows（PowerShell）：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Service</span> ssh<span class="literal">-agent</span></span><br></pre></td></tr></table></figure><h3 id="添加私钥">添加私钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa        <span class="comment"># Linux/macOS</span></span><br><span class="line">ssh-add C:\Users\28058\.ssh\id_rsa   <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><ul><li>第一次添加会要求输入私钥密码（passphrase）</li><li>添加后 session 内就无需再次输入密码</li></ul><h3 id="查看已加载密钥">查看已加载密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure><ul><li>显示 agent 中已缓存的公钥指纹</li></ul><h3 id="删除密钥">删除密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D   <span class="comment"># 删除 agent 中的所有密钥</span></span><br><span class="line">ssh-add -d ~/.ssh/id_rsa  <span class="comment"># 删除指定密钥</span></span><br></pre></td></tr></table></figure><h2 id="windows-上-ssh-agent-服务">Windows 上 ssh-agent 服务</h2><h3 id="服务特点">4.1 服务特点</h3><ul><li>Windows 上 ssh-agent 是一个 <strong>系统服务（OpenSSH AuthenticationAgent）</strong></li><li>可以设置为 <strong>自动启动</strong>：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-Service</span> <span class="literal">-Name</span> ssh<span class="literal">-agent</span> <span class="literal">-StartupType</span> Automatic</span><br></pre></td></tr></table></figure><ul><li>启动后在后台运行，不用每次手动开启</li></ul><h3 id="常见命令">4.2 常见命令</h3><ul><li>启动服务：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Service</span> ssh<span class="literal">-agent</span></span><br></pre></td></tr></table></figure><ul><li>查看服务状态：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Service</span> ssh<span class="literal">-agent</span></span><br></pre></td></tr></table></figure><ul><li>添加私钥：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-add</span> C:\Users\<span class="number">28058</span>\.ssh\id_rsa</span><br></pre></td></tr></table></figure><ul><li>查看已加载密钥：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-add</span> <span class="literal">-l</span></span><br></pre></td></tr></table></figure><h2 id="优势">优势</h2><ol type="1"><li><p><strong>免密码登录</strong></p><ul><li>解锁一次私钥后，整个 session 或服务周期内都无需再输入passphrase。</li></ul></li><li><p><strong>安全</strong></p><ul><li>私钥只存在内存中，不会被写到磁盘或传输到服务器。</li></ul></li><li><p><strong>支持多密钥</strong></p><ul><li>可以同时缓存多把私钥，适合管理多个服务器或 GitHub、GitLab等不同账号。</li></ul></li><li><p><strong>与 SSH 配置结合</strong></p><ul><li>配合 <code>~/.ssh/config</code> 可以针对不同 host自动选择对应私钥。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">本文介绍ssh-agent的使用，以及使用之后的服务器ssh免密登录</summary>
    
    
    
    <category term="ssh" scheme="http://example.com/categories/ssh/"/>
    
    
    <category term="ssh" scheme="http://example.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>screen---virtual termux</title>
    <link href="http://example.com/2025/10/06/screen/"/>
    <id>http://example.com/2025/10/06/screen/</id>
    <published>2025-10-05T16:00:00.000Z</published>
    <updated>2025-10-06T00:50:14.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="screen-是什么"><strong>1️.screen 是什么？</strong></h2><ul><li><p><code>screen</code> 是一个<strong>终端复用器</strong>（terminalmultiplexer）。</p></li><li><p>它可以在一个终端窗口中运行多个“虚拟终端”，允许你在后台保持会话。</p></li><li><p>常见用途：</p><ul><li>在远程服务器上运行长时间任务，即使断开 SSH 也能继续执行。</li><li>在一个终端里同时打开多个 shell。</li><li>在同一会话中共享终端（多人操作同一个 session）。</li></ul></li></ul><h2 id="安装"><strong>2️.安装</strong></h2><p>大多数 Linux 发行版默认有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen --version</span><br></pre></td></tr></table></figure><p>如果没有安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu / Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS / RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install screen</span><br></pre></td></tr></table></figure><h2 id="基本命令"><strong>3️.基本命令</strong></h2><h3 id="启动一个新的-screen-会话"><strong>(1) 启动一个新的 screen会话</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S mysession</span><br></pre></td></tr></table></figure><ul><li><code>-S mysession</code>：给会话取名字，方便管理。</li><li>执行后，你会进入一个新的终端环境，和普通 shell 一样。</li></ul><h3 id="在-screen-中操作"><strong>(2) 在 screen 中操作</strong></h3><ul><li><strong>新建窗口</strong>: <code>Ctrl+a</code> 然后<code>c</code></li><li><strong>切换窗口</strong>: <code>Ctrl+a</code> 然后<code>n</code>（下一个）、<code>p</code>（上一个）</li><li><strong>查看窗口列表</strong>: <code>Ctrl+a</code> 然后<code>"</code></li></ul><h3 id="暂时离开detach会话"><strong>(3)暂时离开（detach）会话</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+a d</span><br></pre></td></tr></table></figure><ul><li>会让 screen 会话在后台继续运行，终端回到原来的 shell。</li></ul><h3 id="恢复attach会话"><strong>(4) 恢复（attach）会话</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r mysession</span><br></pre></td></tr></table></figure><ul><li>恢复之前 detach 的会话。</li><li>如果有多个会话：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -<span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 列出所有会话</span></span><br><span class="line">screen -r 会话ID</span><br></pre></td></tr></table></figure><h3 id="杀掉会话"><strong>(5) 杀掉会话</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><ul><li>在 screen 内直接 <code>exit</code> 会结束该窗口和会话。 或者：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -X -S mysession quit</span><br></pre></td></tr></table></figure><h2 id="高级技巧"><strong>4️.高级技巧</strong></h2><ol type="1"><li><strong>后台运行任务</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S mytask -dm bash -c <span class="string">"python myscript.py"</span></span><br></pre></td></tr></table></figure><ul><li><code>-dm</code> 表示启动会话并立即后台运行。</li><li>可以 <code>screen -r mytask</code> 查看进度。</li></ul><ol start="2" type="1"><li><strong>日志记录</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+a H</span><br></pre></td></tr></table></figure><ul><li>会将当前窗口的输出记录到 <code>screenlog.0</code> 文件。</li></ul><ol start="3" type="1"><li><strong>共享会话</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -x mysession</span><br></pre></td></tr></table></figure><ul><li>可以和其他用户同时操作同一个 session（需要权限）。</li></ul><h2 id="总结"><strong>5️.总结</strong></h2><p><code>screen</code> 的核心价值是：</p><ul><li><strong>断开重连</strong>：网络断了也不会影响任务。</li><li><strong>多窗口管理</strong>：在一个终端里搞定多个任务。</li><li><strong>后台执行</strong>：任务可持续运行，不占本地终端。</li></ul>]]></content>
    
    
    <summary type="html">本文介绍screen命令的用法</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="screen" scheme="http://example.com/tags/screen/"/>
    
    <category term="termux" scheme="http://example.com/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>多gpu训练方式</title>
    <link href="http://example.com/2025/10/05/%E5%A4%9Agpu/"/>
    <id>http://example.com/2025/10/05/%E5%A4%9Agpu/</id>
    <published>2025-10-04T16:00:00.000Z</published>
    <updated>2025-10-05T12:25:07.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一为什么需要多-gpu">一、为什么需要多 GPU？</h2><p>当我们训练深度学习模型（特别是大模型）时，单张 GPU 往往不够：</p><ul><li>数据太大，单卡放不下；</li><li>模型太复杂，训练太慢；</li><li>想更快训练完成。</li></ul><p>于是就有了「<strong>多 GPU 训练</strong>」这个想法：<strong>让多张显卡一起干活，分担计算任务。</strong></p><hr><h2 id="二多-gpu-的三种主要方式">二、多 GPU 的三种主要方式</h2><p>多 GPU 的实现方式有很多，但核心分为三类</p><table><colgroup><col style="width: 46%"><col style="width: 6%"><col style="width: 22%"><col style="width: 23%"></colgroup><thead><tr><th>方式</th><th>中文名称</th><th>思路</th><th>优缺点</th></tr></thead><tbody><tr><td>1️⃣ 模型并行（Model Parallel）</td><td>模型拆开</td><td>把模型的不同层分给不同 GPU</td><td>适合模型太大放不下一张卡；通信频繁，实现复杂</td></tr><tr><td>2️⃣ 数据并行（Data Parallel）</td><td>数据拆开</td><td>模型每张卡都复制一份，每张卡训练一部分数据</td><td>通用、最常见</td></tr><tr><td>3️⃣ 分布式数据并行（Distributed Data Parallel, DDP）</td><td>高效数据并行</td><td>每张卡独立进程，自动同步梯度</td><td>工业级方案，最快、最稳定</td></tr></tbody></table><hr><h2 id="三核心思想数据并行">三、核心思想：数据并行</h2><p>多 GPU 训练中，<strong>数据并行</strong>是最常用的方式。</p><p>其思想非常简单：</p><blockquote><p><strong>模型每张卡都有一份副本；每张卡训练不同部分的数据；最后汇总结果。</strong></p></blockquote><p>假设你有 2 张 GPU，每次 batch 有 4 张图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">批次数据： [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">GPU0 ← [1, 2]</span><br><span class="line">GPU1 ← [3, 4]</span><br></pre></td></tr></table></figure><p>训练流程 1️⃣ 每张 GPU 都有一份相同的模型副本。 2️⃣ 各 GPU 前向计算 →得到自己的 loss。 3️⃣ 各 GPU 反向传播 → 得到自己的梯度。 4️⃣<strong>梯度同步（allreduce）</strong> → 求平均。 5️⃣ 各 GPU同步更新参数。</p><p>这样每张 GPU 的参数始终保持一致。</p><hr><h2 id="四关键概念详解">四、关键概念详解</h2><p>下面是训练中会出现的一些关键术语</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td><strong>train</strong></td><td>训练集，用于更新模型参数。</td></tr><tr><td><strong>val (validation)</strong></td><td>验证集，用于评估模型是否过拟合，不参与训练。</td></tr><tr><td><strong>test</strong></td><td>测试集，用于最终测试模型效果。</td></tr><tr><td><strong>query</strong></td><td>查询集，常见于检索任务，用来搜索匹配结果。</td></tr><tr><td><strong>gallery / bounding_box</strong></td><td>检索任务中的数据库部分（比如人脸库、行人库）。</td></tr><tr><td><strong>batch（批次）</strong></td><td>一次喂给模型的数据量。</td></tr><tr><td><strong>split_batch</strong></td><td>把一个 batch 的数据拆成几份给不同 GPU。</td></tr><tr><td><strong>allreduce</strong></td><td>把多 GPU 的梯度相加、平均，让模型参数保持一致。</td></tr><tr><td><strong>scatter</strong></td><td>把数据分发到多个 GPU。</td></tr><tr><td><strong>gather / concat</strong></td><td>把多个 GPU 的结果合并回来。</td></tr></tbody></table><hr><h2 id="五三种实现方式详解">五、三种实现方式详解</h2><h3 id="模型并行model-parallel">1️⃣ 模型并行（Model Parallel）</h3><p><strong>思想：</strong></p><blockquote><p>模型太大，一张卡放不下，就把不同层放到不同 GPU 上。</p></blockquote><p>示意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GPU0: 负责模型前半部分</span><br><span class="line">GPU1: 负责模型后半部分</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>模型能变得更大；</li><li>但通信频繁，效率不高；</li><li>实现较复杂。</li></ul><p>适用：GPT、BERT 这类超大模型。</p><hr><h3 id="数据并行data-paralleldp">2️⃣ 数据并行（Data Parallel，DP）</h3><p><strong>思想：</strong></p><blockquote><p>每张卡都有一份完整模型副本，但处理不同部分的数据。</p></blockquote><p>PyTorch 用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = torch.nn.DataParallel(model)</span><br></pre></td></tr></table></figure><p><strong>流程：</strong></p><ol type="1"><li>数据被平均分配给每张 GPU（scatter）。</li><li>各 GPU 前向 &amp; 反向传播。</li><li>主 GPU（GPU0）收集所有梯度，求平均。</li><li>GPU0 更新参数，再广播回所有 GPU。</li></ol><p><strong>缺点：</strong></p><ul><li>GPU0 负担过重（通信瓶颈）；</li><li>不能多机训练。</li></ul><p>适用：快速实验、小模型。</p><hr><h3 id="分布式数据并行distributed-data-parallelddp">3️⃣分布式数据并行（Distributed Data Parallel，DDP）</h3><p><strong>思想：</strong></p><blockquote><p>数据并行的改进版，每张 GPU 独立进程，自动通信同步。</p></blockquote><p>PyTorch 用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn.parallel <span class="keyword">import</span> DistributedDataParallel <span class="keyword">as</span> DDP</span><br><span class="line">model = DDP(model)</span><br></pre></td></tr></table></figure><p><strong>流程图示（假设2张GPU）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Step 1: 复制模型</span><br><span class="line">GPU0: 模型A</span><br><span class="line">GPU1: 模型A</span><br><span class="line"></span><br><span class="line">Step 2: 拆分数据</span><br><span class="line">GPU0: batch[0:2]</span><br><span class="line">GPU1: batch[2:4]</span><br><span class="line"></span><br><span class="line">Step 3: 前向+反向</span><br><span class="line">各GPU独立算梯度</span><br><span class="line"></span><br><span class="line">Step 4: allreduce同步</span><br><span class="line">梯度平均后广播到每张卡</span><br><span class="line"></span><br><span class="line">Step 5: 更新参数（同步）</span><br></pre></td></tr></table></figure><p><strong>一句话总结：</strong></p><blockquote><p>DDP 是 PyTorch 官方推荐的多 GPU 训练标准方案。</p></blockquote><hr><h2 id="六底层机制理解scatter-allreduce-gather">六、底层机制理解：scatter /allreduce / gather</h2><table><colgroup><col style="width: 38%"><col style="width: 8%"><col style="width: 54%"></colgroup><thead><tr><th>操作</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td><strong>scatter</strong></td><td>拆数据</td><td>把 100 张图片分成两份发到 GPU0、GPU1</td></tr><tr><td><strong>allreduce</strong></td><td>同步梯度</td><td>GPU0 的梯度 + GPU1 的梯度 → 平均后广播</td></tr><tr><td><strong>gather / concat</strong></td><td>合并结果</td><td>把每个 GPU 的预测拼起来做整体评估</td></tr></tbody></table><p>这些操作是 <strong>数据并行的核心通信机制</strong>。 在 DDP中，它们是由 PyTorch 自动完成的。</p><hr><h2 id="七在-ddp-中训练需要注意什么">七、在 DDP 中训练需要注意什么</h2><table><thead><tr><th>事项</th><th>原因</th></tr></thead><tbody><tr><td>每个 GPU 独立进程</td><td>保证同步和效率</td></tr><tr><td>使用 <code>DistributedSampler</code></td><td>自动分配数据给不同 GPU</td></tr><tr><td>设置环境变量（rank, world_size）</td><td>标识 GPU 编号和总数</td></tr><tr><td>初始化通信（init_process_group）</td><td>建立 NCCL 通信通道</td></tr><tr><td>每个进程保存日志、模型</td><td>避免覆盖</td></tr></tbody></table><hr><h2 id="八三个阶段的总结对比表">八、三个阶段的总结对比表</h2><table><colgroup><col style="width: 20%"><col style="width: 18%"><col style="width: 17%"><col style="width: 43%"></colgroup><thead><tr><th>阶段</th><th>干的事</th><th>特点</th><th>示例</th></tr></thead><tbody><tr><td>模型并行</td><td>模型拆分</td><td>各 GPU 存不同层</td><td>GPT、BERT</td></tr><tr><td>数据并行（DP）</td><td>数据拆分 + 主卡同步</td><td>简单但低效</td><td><code>nn.DataParallel</code></td></tr><tr><td>分布式数据并行（DDP）</td><td>数据拆分 + 自动同步</td><td>高效工业级</td><td><code>DistributedDataParallel</code></td></tr></tbody></table><hr><h2 id="九类比理解多-gpu-像工厂流水线">九、类比理解：多 GPU像工厂流水线</h2><table><thead><tr><th>工人</th><th>工作</th></tr></thead><tbody><tr><td>GPU0</td><td>处理样本1-50</td></tr><tr><td>GPU1</td><td>处理样本51-100</td></tr></tbody></table><ul><li>每个工人有同样的手册（模型）；</li><li>干完活后汇报经验（梯度）；</li><li>经理平均总结经验（allreduce）；</li><li>更新手册；</li><li>下一轮所有人继续。</li></ul><p>这，就是数据并行和 DDP 的本质。</p>]]></content>
    
    
    <summary type="html">本文介绍了多种gpu深度学习训练的方式</summary>
    
    
    
    <category term="deeplearning" scheme="http://example.com/categories/deeplearning/"/>
    
    
    <category term="gpu" scheme="http://example.com/tags/gpu/"/>
    
    <category term="data" scheme="http://example.com/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>Imperative，Symbolic and Hybrid Programming</title>
    <link href="http://example.com/2025/10/05/%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/"/>
    <id>http://example.com/2025/10/05/%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</id>
    <published>2025-10-04T16:00:00.000Z</published>
    <updated>2025-10-05T01:14:00.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令式编程imperative-programming">1️⃣ 命令式编程（ImperativeProgramming）</h2><h3 id="核心思想">核心思想</h3><ul><li><strong>按顺序执行每条语句</strong>，每执行一步就会改变程序的状态。</li><li>Python 就是典型的解释型语言，执行代码时会<strong>逐行运行</strong>。</li></ul><h3 id="示例">示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fancy_func</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    e = add(a, b)</span><br><span class="line">    f = add(c, d)</span><br><span class="line">    g = add(e, f)</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fancy_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>执行过程：</p><ol type="1"><li><code>e = add(a, b)</code> → 计算 1+2 = 3，并存到变量<code>e</code></li><li><code>f = add(c, d)</code> → 计算 3+4 = 7，并存到变量<code>f</code></li><li><code>g = add(e, f)</code> → 计算 3+7 = 10</li><li>返回并打印结果 <code>10</code></li></ol><p>特点：</p><ul><li><strong>直观易懂</strong>，方便调试</li><li>每次函数调用都需要解释器处理，效率不高（尤其在 GPU上运行大批量计算时）</li></ul><hr /><h2 id="符号式编程symbolic-programming">2️⃣ 符号式编程（SymbolicProgramming）</h2><h3 id="核心思想-1">核心思想</h3><ul><li><p><strong>先定义整个计算图/计算流程，再一次性执行</strong></p></li><li><p>可以让编译器提前做优化，例如：</p><ul><li>合并重复计算</li><li>直接生成最优机器指令</li><li>提前释放不再需要的内存</li></ul></li></ul><h3 id="示例模拟">示例（模拟）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">prog = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def add(a, b):</span></span><br><span class="line"><span class="string">    return a + b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def fancy_func(a, b, c, d):</span></span><br><span class="line"><span class="string">    e = add(a, b)</span></span><br><span class="line"><span class="string">    f = add(c, d)</span></span><br><span class="line"><span class="string">    g = add(e, f)</span></span><br><span class="line"><span class="string">    return g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(fancy_func(1, 2, 3, 4))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">y = <span class="built_in">compile</span>(prog, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)  <span class="comment"># 编译成可执行代码</span></span><br><span class="line"><span class="built_in">exec</span>(y)                        <span class="comment"># 一次性运行</span></span><br></pre></td></tr></table></figure><p>特点：</p><ul><li><strong>运行更快</strong>，可以做优化</li><li>可以生成与 Python 无关的可执行代码，更容易移植</li><li>调试不如命令式方便</li></ul><hr /><h2 id="混合式编程hybrid-programming">3️⃣ 混合式编程（HybridProgramming）</h2><h3 id="背景">背景</h3><ul><li><p>很多深度学习框架历史上在命令式和符号式之间选择：</p><ul><li>TensorFlow 1.x：符号式</li><li>PyTorch：命令式</li></ul></li><li><p>混合式编程的出现是为了 <strong>兼顾易用性和性能</strong></p><ul><li>开发时用命令式调试方便</li><li>部署时用符号式优化和移植方便</li></ul></li></ul><h3 id="pytorch-示例torch.jit">PyTorch 示例：<code>torch.jit</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义网络</span></span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Linear(<span class="number">512</span>, <span class="number">256</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Linear(<span class="number">256</span>, <span class="number">128</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Linear(<span class="number">128</span>, <span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">512</span>)</span><br><span class="line">net(x)  <span class="comment"># 命令式执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为符号式/优化版本</span></span><br><span class="line">net = torch.jit.script(net)</span><br><span class="line">net(x)  <span class="comment"># 编译后的网络，效率更高</span></span><br></pre></td></tr></table></figure><ul><li><p><code>torch.jit.script</code> 会把命令式网络转换成<strong>静态计算图</strong>，实现：</p><ol type="1"><li>编译优化</li><li>多 GPU 高效运行</li><li>可导出为非 Python 环境使用</li></ol></li></ul><hr /><h2 id="总结对比">4️⃣ 总结对比</h2><table><colgroup><col style="width: 7%" /><col style="width: 17%" /><col style="width: 14%" /><col style="width: 61%" /></colgroup><thead><tr><th>编程方式</th><th>优点</th><th>缺点</th><th>示例框架</th></tr></thead><tbody><tr><td>命令式</td><td>易懂、易调试</td><td>运行慢，难优化</td><td>PyTorch</td></tr><tr><td>符号式</td><td>高效，可优化，易移植</td><td>调试不方便</td><td>TensorFlow 1.x, Theano</td></tr><tr><td>混合式</td><td>易调试 + 高效部署</td><td>需要额外转换步骤</td><td>PyTorch + torch.jit, TensorFlow 2.x</td></tr></tbody></table><hr /><p><strong>理解</strong>：</p><ul><li>命令式：边写边运行</li><li>符号式：先写完整程序再运行</li><li>混合式：平时用命令式调试，部署用符号式加速</li></ul>]]></content>
    
    
    <summary type="html">本文介绍三种编程方式</summary>
    
    
    
    <category term="deeplearning" scheme="http://example.com/categories/deeplearning/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>MLP 多层感知机制</title>
    <link href="http://example.com/2025/09/29/MLC/"/>
    <id>http://example.com/2025/09/29/MLC/</id>
    <published>2025-09-28T16:00:00.000Z</published>
    <updated>2025-10-06T02:53:43.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-mlp">1️⃣ <strong>什么是 MLP</strong></h2><p><strong>MLP（多层感知机）</strong> 本质上就是：</p><ul><li>输入是一个 <strong>向量</strong>（1D）</li><li>输出也是一个 <strong>向量</strong>（1D）</li><li>每一层就是 <strong>矩阵乘法 + 非线性激活</strong></li></ul><p>数学上，一层 MLP 可以写成： <span class="math display"><em>h</em> = <em>W</em><em>x</em> + <em>b</em></span></p><ul><li>(x)：输入向量（比如长度是 784）</li><li>(W)：权重矩阵</li><li>(h)：输出向量（比如长度是 256）</li></ul><p>关键点：<strong>MLP不关心输入有没有二维结构，它只把输入当作一堆数字（向量）</strong>。</p><hr><h2 id="图像输入-mlp-的问题">2️⃣ 图像输入 MLP 的问题</h2><p>比如我们有一张 <strong>28×28 的图片</strong>，像素矩阵是： <span class="math display"><em>X</em>[<em>i</em>, <em>j</em>],  <em>i</em>, <em>j</em> = 1, ..., 28</span></p><p>在 MLP 里，通常要先把它 <strong>拉平</strong>（flatten）： <span class="math display"><em>x</em> = vec(<em>X</em>)</span> 于是它变成一个<strong>784 维的向量</strong>。 MLP 就直接做： <span class="math display"><em>h</em> = <em>W</em><em>x</em> + <em>b</em></span></p><p>这样一来：原本的空间结构（像素的上下左右关系）就丢了。它只知道“这是第 123 个输入值”，而不知道这个像素在图片的哪儿。</p><hr><h2 id="如果想保留二维结构">3️⃣ 如果想保留二维结构</h2><p>假设我们不要拉直，而是直接保持：</p><ul><li>输入是二维矩阵 (X[i,j])</li><li>输出（隐藏层）也是二维矩阵 (H[a,b])</li></ul><p>那每个输出位置 (H[a,b]) 都要从整个输入图像里“吸收信息”。 于是需要一个<strong>四维权重张量</strong>： <span class="math display"><em>W</em>[<em>a</em>, <em>b</em>, <em>i</em>, <em>j</em>]</span></p><p>公式就变成： <span class="math display"><em>H</em>[<em>a</em>, <em>b</em>] = ∑<sub><em>i</em>, <em>j</em></sub><em>W</em>[<em>a</em>, <em>b</em>, <em>i</em>, <em>j</em>] ⋅ <em>X</em>[<em>i</em>, <em>j</em>] + <em>b</em>[<em>a</em>, <em>b</em>]</span></p><h3 id="对比">对比：</h3><ul><li><strong>普通 MLP：</strong> 用的是矩阵（2D权重），输入输出都是向量。</li><li><strong>二维输入+二维输出：</strong> 用的是四阶张量（4D权重），输入输出都是矩阵。</li></ul><hr><h2 id="举个例子">4️⃣ 举个例子</h2><p>假设输入图像 (X) 是 <strong>2×2</strong>： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.62ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10440 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2185.6,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2362.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtext" transform="translate(1362.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(1612.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(6336.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g></g></g><g data-mml-node="mo" transform="translate(7976.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></svg></mjx-container></span></p><h3 id="普通-mlp-做法">（1）普通 MLP 做法：</h3><ul><li><p>拉平：(<span class="math inline"><em>x</em> = [<em>x</em><sub>11</sub>, <em>x</em><sub>12</sub>, <em>x</em><sub>21</sub>, <em>x</em><sub>22</sub>]</span>)，是长度4 的向量。</p></li><li><p>设隐藏层也是 4 个神经元：</p><ul><li>权重矩阵 (W) 就是 4×4（16 个参数）。</li><li>输出是向量 (h)。</li></ul></li></ul><h3 id="二维保留做法">（2）二维保留做法：</h3><ul><li>输入还是 2×2，输出也想要 2×2。</li><li>每个输出位置 (H[a,b]) 都要看输入所有 4 个像素。</li><li>权重变成 (W[a,b,i,j])，一共 (2×2×2×2 = 16) 个参数。</li><li>输出是矩阵 (H)。</li></ul><hr><h2 id="总结">5️⃣ 总结</h2><ul><li><strong>MLP 的本质：</strong> 向量输入 → 矩阵乘法 → 向量输出。</li><li><strong>为什么会出现“四维权重”：</strong>因为我们把输入/输出都看作二维矩阵，而不是向量。数学上需要一个四维权重张量来描述“矩阵到矩阵”的映射。</li><li><strong>核心问题：</strong> MLP 不利用图像的空间结构 →参数多、效率低。 这正是 CNN出现的原因（卷积核只看局部，参数大幅减少）。</li></ul>]]></content>
    
    
    <summary type="html">本文介绍MLC及其局限性</summary>
    
    
    
    <category term="deeplearning" scheme="http://example.com/categories/deeplearning/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="MLC" scheme="http://example.com/tags/MLC/"/>
    
  </entry>
  
  <entry>
    <title>Flask框架 基本使用教程</title>
    <link href="http://example.com/2025/09/24/flask/"/>
    <id>http://example.com/2025/09/24/flask/</id>
    <published>2025-09-24T13:54:47.228Z</published>
    <updated>2025-09-24T13:59:22.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础介绍">基础介绍</h2><p>Flask 是一个 <strong>轻量级 Python Web 框架</strong>，特点：</p><ul><li>核心简单，灵活可扩展</li><li>内置开发服务器和调试器</li><li>支持 Jinja2 模板、路由管理、请求处理</li></ul><p>安装 Flask：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>创建最简单的 Flask 应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Flask 应用实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, Flask!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>Flask(__name__)</code>：创建应用实例，<code>__name__</code>用于确定应用资源路径</li><li><code>@app.route("/")</code>：将函数绑定到路由 <code>/</code></li><li><code>app.run(debug=True)</code>：启动调试模式，会自动重载代码</li></ul><hr /><h2 id="模板与-jinja2">模板与 Jinja2</h2><p>Flask 使用 <strong>Jinja2</strong> 模板引擎。模板能动态渲染HTML，支持变量、过滤器、条件语句、循环、继承和宏。</p><hr /><h3 id="模板继承">模板继承</h3><p>父模板（base.html）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;默认标题&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;子页面标题&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是子页面内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>&#123;% block %&#125;</code>：定义可被覆盖的区域</li><li><code>&#123;% extends %&#125;</code>：继承父模板</li><li>子模板覆盖父模板的块，不覆盖的部分使用父模板内容</li></ul><p>注意事项：</p><ul><li>子模板必须在顶部使用 <code>extends</code></li><li>块名在父子模板中要一致</li></ul><hr /><h3 id="模板变量与过滤器">模板变量与过滤器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name|capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 首字母大写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; price|round(2) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>   <span class="comment">&lt;!-- 四舍五入保留2位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; text|length &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>      <span class="comment">&lt;!-- 计算长度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; value|default(&quot;未知&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 如果为空显示默认值 --&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><p><code>&#123;&#123; &#125;&#125;</code>：输出变量</p></li><li><p><code>|</code>：调用过滤器</p></li><li><p>常用过滤器：</p><ul><li><code>capitalize</code>：首字母大写</li><li><code>lower</code> / <code>upper</code>：大小写转换</li><li><code>default('值')</code>：为空时使用默认值</li><li><code>length</code>：获取长度</li><li><code>round(n)</code>：四舍五入</li></ul></li></ul><hr /><h3 id="条件语句与循环">条件语句与循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎 &#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for item in items %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; loop.index &#125;&#125; - &#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>&#123;% if %&#125;` ... `&#123;% else %&#125;` ... `&#123;% endif %&#125;</code>：条件判断</li><li><code>&#123;% for %&#125;` ... `&#123;% endfor %&#125;</code>：循环列表</li><li><code>loop.index</code>：循环计数，从1开始</li><li><code>loop.index0</code>：从0开始</li><li><code>loop.first</code> / <code>loop.last</code>：判断是否首尾</li></ul><hr /><h3 id="宏与模板包含">宏与模板包含</h3><p>宏是可复用模板片段：</p><p><strong>定义宏</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- templates/macros.html --&gt;</span></span><br><span class="line">&#123;% macro render_item(item) %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.description &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p><strong>调用宏</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &quot;macros.html&quot; import render_item %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for item in items %&#125;</span><br><span class="line">  &#123;&#123; render_item(item) &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>&#123;% from "macros.html" import render_item %&#125;</code>：导入宏</li><li><code>&#123;&#123; render_item(item) &#125;&#125;</code>：调用宏</li><li>可在循环中多次使用，提高模板复用性</li></ul><hr /><h2 id="flask-wtf-表单扩展">Flask-WTF 表单扩展</h2><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-wtf</span><br></pre></td></tr></table></figure><h3 id="定义表单">定义表单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    username = StringField(<span class="string">&#x27;用户名&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;提交&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>FlaskForm</code>：表单基类</li><li><code>StringField</code> / <code>SubmitField</code>：字段类型</li><li><code>validators</code>：验证器，如 <code>DataRequired</code></li></ul><h3 id="使用表单">使用表单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> LoginForm</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;your-secret-key&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>, form=form)</span><br></pre></td></tr></table></figure><p>模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">    &#123;&#123; form.username.label &#125;&#125; &#123;&#123; form.username() &#125;&#125;</span><br><span class="line">    &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>hidden_tag()</code>：生成 CSRF 隐藏字段</li><li><code>validate_on_submit()</code>：检查 POST 并验证表单</li></ul><hr /><h2 id="数据库操作">数据库操作</h2><h3 id="使用-sqlalchemy">使用 SQLAlchemy</h3><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///example.db&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><h3 id="定义模型">定义模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;User <span class="subst">&#123;self.username&#125;</span>&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="创建表">创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br></pre></td></tr></table></figure><hr /><h3 id="crud-操作">CRUD 操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line">new_user = User(username=<span class="string">&#x27;john&#x27;</span>, email=<span class="string">&#x27;john@example.com&#x27;</span>)</span><br><span class="line">db.session.add(new_user)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">users = User.query.<span class="built_in">all</span>()</span><br><span class="line">user = User.query.get(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">user.username = <span class="string">&#x27;new_name&#x27;</span></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">db.session.delete(user)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><hr /><h3 id="查询与分页">查询与分页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line"></span><br><span class="line">users = User.query.filter_by(username=<span class="string">&#x27;john&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">users = User.query.<span class="built_in">filter</span>(or_(User.username==<span class="string">&#x27;john&#x27;</span>, User.email==<span class="string">&#x27;john@example.com&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">users = User.query.order_by(User.username).paginate(page=<span class="number">1</span>, per_page=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><hr /><h3 id="flask-migrate">Flask-Migrate</h3><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flask db init</span><br><span class="line">flask db migrate -m <span class="string">&quot;Initial migration&quot;</span></span><br><span class="line">flask db upgrade</span><br></pre></td></tr></table></figure><hr /><h3 id="原始-sql">原始 SQL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = db.session.execute(<span class="string">&#x27;SELECT * FROM user&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><hr /><h3 id="mysql-连接">MySQL 连接</h3><p>SQLAlchemy：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://username:password@localhost/dbname&#x27;</span></span><br></pre></td></tr></table></figure><p>PyMySQL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">connection = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    user=<span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;dbname&#x27;</span>,</span><br><span class="line">    cursorclass=pymysql.cursors.DictCursor</span><br><span class="line">)</span><br></pre></td></tr></table></figure><table style="width:6%;"><colgroup><col style="width: 5%" /></colgroup><tbody><tr><td>## 为什么要用蓝图？</td></tr><tr><td>假设你写一个 Flask项目，功能很多（比如用户系统、博客系统、后台管理）。 如果所有路由都写在<code>app.py</code> 里，文件会越来越大，难以维护。</td></tr><tr><td><strong>蓝图的作用就是：</strong></td></tr><tr><td>* <strong>模块化开发</strong>：把不同功能放到不同的模块里。 *<strong>可维护性</strong>：每个模块独立，方便修改。 *<strong>复用性</strong>：某个蓝图可以直接拎到另一个项目里用。 *<strong>延迟绑定</strong>：先定义功能，后注册到应用中。</td></tr></tbody></table><h2 id="使用步骤4-步走">🔹 使用步骤（4 步走）</h2><h3 id="创建蓝图">1. 创建蓝图</h3><p>在一个模块里（比如 <code>auth/routes.py</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># auth/routes.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, redirect, url_for</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义蓝图</span></span><br><span class="line">auth_bp = Blueprint(<span class="string">&quot;auth&quot;</span>, __name__, url_prefix=<span class="string">&quot;/auth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth_bp.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;auth/login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth_bp.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;auth.login&quot;</span>))</span><br></pre></td></tr></table></figure><p>📌 这里：</p><ul><li><p><code>Blueprint("auth", __name__, url_prefix="/auth")</code></p><ul><li><code>"auth"</code> 是蓝图的名字</li><li><code>__name__</code> 是导入位置</li><li><code>url_prefix="/auth"</code> 表示所有路由前面都会加<code>/auth</code> 前缀</li></ul></li></ul><hr /><h3 id="注册蓝图">2. 注册蓝图</h3><p>在主应用 <code>app.py</code> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> auth.routes <span class="keyword">import</span> auth_bp   <span class="comment"># 导入蓝图</span></span><br><span class="line"><span class="keyword">from</span> blog.routes <span class="keyword">import</span> blog_bp   <span class="comment"># 假设还有一个博客蓝图</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册蓝图</span></span><br><span class="line">app.register_blueprint(auth_bp)</span><br><span class="line">app.register_blueprint(blog_bp, url_prefix=<span class="string">&quot;/blog&quot;</span>)  <span class="comment"># 单独设置前缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>📌 这样：</p><ul><li><code>/auth/login</code> → 走 <code>auth_bp</code> 的 login()</li><li><code>/blog/</code> → 走 <code>blog_bp</code> 的 index()</li></ul><hr /><h3 id="使用蓝图的模板和静态文件">3. 使用蓝图的模板和静态文件</h3><p>结构推荐：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yourapp/</span><br><span class="line">│── app.py</span><br><span class="line">│</span><br><span class="line">├── auth/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── routes.py</span><br><span class="line">│   └── templates/</span><br><span class="line">│       └── auth/</span><br><span class="line">│           ├── login.html</span><br><span class="line">│           └── register.html</span><br><span class="line">│</span><br><span class="line">├── blog/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── routes.py</span><br><span class="line">│   └── templates/</span><br><span class="line">│       └── blog/</span><br><span class="line">│           ├── index.html</span><br><span class="line">│           └── post.html</span><br></pre></td></tr></table></figure><p>比如 <code>auth/routes.py</code> 的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;auth/login.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>会自动去 <code>auth/templates/auth/login.html</code> 找文件。</p><hr /><h3 id="蓝图的高级用法">4. 蓝图的高级用法</h3><h4 id="请求钩子">✅ 请求钩子</h4><p>在某个蓝图里写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@auth_bp.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;auth 模块的请求来了&quot;</span>)</span><br></pre></td></tr></table></figure><p>只对 <code>auth_bp</code> 生效，不影响其他模块。</p><hr /><h4 id="错误处理">✅ 错误处理</h4><p>在 <code>blog/routes.py</code> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blog_bp.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">not_found</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Blog 页面没找到&quot;</span>, <span class="number">404</span></span><br></pre></td></tr></table></figure><p>只影响 <code>blog</code> 蓝图。</p><hr /><h2 id="总结对比">🔹 总结对比</h2><table><colgroup><col style="width: 19%" /><col style="width: 36%" /><col style="width: 44%" /></colgroup><thead><tr><th>特性</th><th>普通 Flask 应用</th><th>蓝图 (Blueprint)</th></tr></thead><tbody><tr><td>路由</td><td>全部写在 <code>app.py</code></td><td>可以分散在多个模块</td></tr><tr><td>模板</td><td>全部放在 <code>templates/</code></td><td>每个蓝图有独立的 <code>templates/</code></td></tr><tr><td>静态文件</td><td>全部放在 <code>static/</code></td><td>蓝图可有独立的 <code>static/</code></td></tr><tr><td>钩子 &amp; 错误处理</td><td>全局共享</td><td>蓝图可以局部生效</td></tr></tbody></table><hr /><p>👉 你可以把 <strong>Flask 应用看作“总控”</strong>， 而<strong>蓝图就是“插件”</strong>，按需插入。</p><hr /><p>要不要我帮你画一个 <strong>“蓝图 vs 普通 Flask项目结构对比图”</strong>？这样会更直观。</p>]]></content>
    
    
    <summary type="html">本文介绍py常用的web框架flask</summary>
    
    
    
    <category term="backen" scheme="http://example.com/categories/backen/"/>
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>KL散度</title>
    <link href="http://example.com/2025/09/22/KL/"/>
    <id>http://example.com/2025/09/22/KL/</id>
    <published>2025-09-21T16:00:00.000Z</published>
    <updated>2025-09-22T06:34:49.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息量information-content">1. 信息量（Information Content）</h2><p>在信息论中，<strong>信息量</strong>用来度量某个事件带来的“惊讶程度”。<br>概率越小的事件，发生时带来的信息量越大。</p><p>定义：如果某个事件 <span class="math inline"><em>x</em></span>的概率是 <span class="math inline"><em>P</em>(<em>x</em>)</span>，它的信息量为：</p><p><span class="math display"><em>I</em>(<em>x</em>) = −log <em>P</em>(<em>x</em>)</span></p><p>解释： * 概率大 → 事件常见 → 信息量小<br>* 概率小 → 事件稀有 → 信息量大</p><hr><h2 id="信息熵entropy">2. 信息熵（Entropy）</h2><p>如果我们有一个分布 <span class="math inline"><em>P</em></span>，它描述了所有可能事件的概率分布，那么<strong>信息熵</strong>表示的是<strong>在这个分布下，事件发生时平均能带来的信息量</strong>。</p><p>公式为：</p><p><span class="math display"><em>H</em>(<em>P</em>) = −∑<sub><em>x</em></sub><em>P</em>(<em>x</em>)log <em>P</em>(<em>x</em>)</span></p><p>连续分布则写为：</p><p><span class="math display"><em>H</em>(<em>P</em>) = −∫<em>P</em>(<em>x</em>)log <em>P</em>(<em>x</em>) <em>d</em><em>x</em></span></p><p>直观理解：熵越大，说明分布越“均匀”，不确定性越高；熵越小，说明分布越集中，不确定性越低。</p><hr><h2 id="交叉熵cross-entropy">3. 交叉熵（Cross Entropy）</h2><p>假设真实分布是 <span class="math inline"><em>P</em></span>，但我们用另一个分布 <span class="math inline"><em>Q</em></span>去建模，那么平均信息量会是多少？<br>这就引出了 <strong>交叉熵</strong>：</p><p><span class="math display"><em>H</em>(<em>P</em>, <em>Q</em>) = −∑<sub><em>x</em></sub><em>P</em>(<em>x</em>)log <em>Q</em>(<em>x</em>)</span></p><p>解释： * 如果我们用 <span class="math inline"><em>Q</em></span>来代替 <span class="math inline"><em>P</em></span>，那么事件的概率会按照<span class="math inline"><em>Q</em></span> 来估计。<br>* 交叉熵越小，说明 <span class="math inline"><em>Q</em></span> 越接近<span class="math inline"><em>P</em></span>。</p><hr><h2 id="kl-散度kullbackleibler-divergence">4. KL 散度（Kullback–LeiblerDivergence）</h2><p>KL 散度就是 <strong>交叉熵和信息熵的差</strong>：</p><p><span class="math display"><em>D</em><sub><em>K</em><em>L</em></sub>(<em>P</em>∥<em>Q</em>) = <em>H</em>(<em>P</em>, <em>Q</em>) − <em>H</em>(<em>P</em>)</span></p><p>展开后就是常见的定义：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.619ex;" xmlns="http://www.w3.org/2000/svg" width="31.852ex" height="5.923ex" role="img" focusable="false" viewBox="0 -1460 14078.7 2617.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(889,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2021.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2410.2,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(3161.2,0)"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="mi" transform="translate(3661.2,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(4452.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5118.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(6174.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="mi" transform="translate(519.8,-1050) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mi" transform="translate(7785.4,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(8536.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8925.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9497.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(10053,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(11331,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(11497.7,0)"><g data-mml-node="mrow" transform="translate(240,710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1712,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(791,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1180,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="2341" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>意义： * 它表示：<strong>如果真实分布是 <span class="math inline"><em>P</em></span>，但我们用 <span class="math inline"><em>Q</em></span>来近似时，额外多花了多少信息量</strong>。 * 当 <span class="math inline"><em>P</em> = <em>Q</em></span> 时，<span class="math inline"><em>D</em><sub><em>K</em><em>L</em></sub> = 0</span>；否则<span class="math inline"><em>D</em><sub><em>K</em><em>L</em></sub> &gt; 0</span>。</p><hr><h2 id="性质总结">5. 性质总结</h2><ol type="1"><li><p><strong>非负性</strong>：<br><span class="math display"><em>D</em><sub><em>K</em><em>L</em></sub>(<em>P</em>∥<em>Q</em>) ≥ 0</span><br>（由 Jensen 不等式保证）</p></li><li><p><strong>不对称性</strong>：<br><span class="math display"><em>D</em><sub><em>K</em><em>L</em></sub>(<em>P</em>∥<em>Q</em>) ≠ <em>D</em><sub><em>K</em><em>L</em></sub>(<em>Q</em>∥<em>P</em>)</span></p></li><li><p><strong>等于零的条件</strong>：<br>当且仅当 <span class="math inline"><em>P</em> = <em>Q</em></span>。</p></li></ol><hr><h2 id="举个例子">6. 举个例子</h2><p>真实分布：</p><p><span class="math display"><em>P</em> = (0.8, 0.2)</span></p><p>预测分布：</p><p><span class="math display"><em>Q</em> = (0.5, 0.5)</span></p><p>计算：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="45.754ex" height="4.638ex" role="img" focusable="false" viewBox="0 -1342 20223.4 2050"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(889,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2021.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2410.2,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(3161.2,0)"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="mi" transform="translate(3661.2,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(4452.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5118.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6174.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(7619.4,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(8897.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(9064,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><rect width="1478" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(11004.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(12004.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(13449.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(14727.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(14893.8,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><rect width="1478" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(16889.6,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(17945.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1278,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1778,0)"></path></g></g></g></svg></mjx-container></span></p><p>说明：预测分布 <span class="math inline"><em>Q</em></span> 和真实分布<span class="math inline"><em>P</em></span>有一定差异，但还算可以接受。</p><hr><h2 id="在机器学习中的应用">7. 在机器学习中的应用</h2><ol type="1"><li><p><strong>分类任务</strong><br>常见的交叉熵损失函数，其实就是 <span class="math inline"><em>H</em>(<em>P</em>, <em>Q</em>)</span>，等价于<strong>KL 散度 + 熵 <span class="math inline"><em>H</em>(<em>P</em>)</span></strong>（因为 <span class="math inline"><em>H</em>(<em>P</em>)</span>是常数，不影响优化）。</p></li><li><p><strong>变分自编码器 (VAE)</strong><br>用 KL 散度约束隐变量分布不要偏离先验分布。</p></li><li><p><strong>强化学习</strong><br>用 KL 散度衡量新旧策略的差异，避免训练时更新过大。</p></li></ol><hr>]]></content>
    
    
    <summary type="html">本文从信息量、信息熵、交叉熵讲起，逐步引出 KL 散度的概念与应用。</summary>
    
    
    
    <category term="deeplearning" scheme="http://example.com/categories/deeplearning/"/>
    
    
    <category term="KL" scheme="http://example.com/tags/KL/"/>
    
    <category term="RE-ID" scheme="http://example.com/tags/RE-ID/"/>
    
  </entry>
  
  <entry>
    <title>argparse + yaml 在训练脚本中的使用</title>
    <link href="http://example.com/2025/09/21/yaml+argparse/"/>
    <id>http://example.com/2025/09/21/yaml+argparse/</id>
    <published>2025-09-20T16:00:00.000Z</published>
    <updated>2025-09-21T06:36:08.162Z</updated>
    
    <content type="html"><![CDATA[<p>在深度学习训练中，我们常用很多超参数。Python提供两个工具帮助管理：</p><ol type="1"><li><strong>argparse</strong>：从命令行传参</li><li><strong>yaml</strong>：写配置文件</li><li><strong>easydict</strong>：让字典支持点号访问</li></ol><p>结合它们，就能灵活地管理训练参数，代码更清晰、可复现。</p><hr /><h2 id="命令行是怎么调用-python-脚本的">1. 命令行是怎么调用 Python脚本的？</h2><p>假设你有一个脚本 <code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">在命令行里：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">python train.py</span><br></pre></td></tr></table></figure><ul><li><code>python</code> → 调用 Python 解释器</li><li><code>train.py</code> → 要运行的脚本</li></ul><p>如果你想给脚本传参：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --batch_size 64 --lr 0.01</span><br></pre></td></tr></table></figure><p>这里 <code>--batch_size 64</code>、<code>--lr 0.01</code> 就是<strong>命令行参数</strong>，Python 默认不会解析它们，需要用<strong>argparse</strong>。</p><hr /><h2 id="argparse-详解">2. argparse 详解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;训练脚本示例&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>创建解析器</li><li><code>description</code> 会显示在 <code>--help</code> 中</li></ul><h3 id="添加参数">2.1 添加参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;--batch_size&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">32</span>, <span class="built_in">help</span>=<span class="string">&quot;训练批大小&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--lr&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.001</span>, <span class="built_in">help</span>=<span class="string">&quot;学习率&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--use_gpu&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;是否使用 GPU&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br></pre></td></tr></table></figure><h4 id="参数讲解">参数讲解：</h4><table><colgroup><col style="width: 42%" /><col style="width: 57%" /></colgroup><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--batch_size</code></td><td>参数名（命令行用 <code>--batch_size 64</code>）</td></tr><tr><td><code>type=int</code></td><td>自动转换类型，如果传入非 int 会报错</td></tr><tr><td><code>default=32</code></td><td>如果命令行没传这个参数，就用默认值 32</td></tr><tr><td><code>help="..."</code></td><td>在 <code>python train.py -h</code> 中显示帮助</td></tr><tr><td><code>action="store_true"</code></td><td>布尔开关，不传就是 False，传了就是 True</td></tr></tbody></table><h4 id="运行示例">运行示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --batch_size 64 --use_gpu</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(args.batch_size)  <span class="comment"># 64</span></span><br><span class="line"><span class="built_in">print</span>(args.use_gpu)     <span class="comment"># True</span></span><br></pre></td></tr></table></figure><ul><li>不写 <code>--use_gpu</code> → <code>False</code></li><li>写了 <code>--use_gpu</code> → <code>True</code></li></ul><hr /><h3 id="其他常用-action">2.2 其他常用 action</h3><ul><li><code>store_true</code> / <code>store_false</code> → 布尔开关</li><li><code>append</code> → 可以多次传参，把值收集成列表</li><li><code>count</code> → 统计参数出现次数（例如 <code>-v</code>打印更详细日志）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;--verbose&quot;</span>, action=<span class="string">&quot;count&quot;</span>, default=<span class="number">0</span>, <span class="built_in">help</span>=<span class="string">&quot;增加日志详细级别&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python train.py -vvv</span><br><span class="line"><span class="built_in">print</span>(args.verbose)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><hr /><h3 id="位置参数必填">2.3 位置参数（必填）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;dataset_path&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;数据集路径&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>命令行必须写：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python train.py ./data</span><br><span class="line"><span class="built_in">print</span>(args.dataset_path)  <span class="comment"># ./data</span></span><br></pre></td></tr></table></figure><hr /><h3 id="限定选项-choices">2.4 限定选项 choices</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;--optimizer&quot;</span>, choices=[<span class="string">&quot;sgd&quot;</span>, <span class="string">&quot;adam&quot;</span>], default=<span class="string">&quot;adam&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;优化器类型&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>只能传 <code>"sgd"</code> 或 <code>"adam"</code></li><li>传其他 → argparse 会报错</li></ul><hr /><h3 id="多值参数-nargs">2.5 多值参数 nargs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">&quot;--layers&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, nargs=<span class="string">&quot;+&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;每层神经元数量&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python train.py --layers 64 128 256</span><br><span class="line"><span class="built_in">print</span>(args.layers)  <span class="comment"># [64, 128, 256]</span></span><br></pre></td></tr></table></figure><ul><li><code>nargs='+'</code> → 一个或多个</li><li><code>nargs='*'</code> → 零个或多个</li></ul><hr /><h3 id="查看帮助">2.6 查看帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -h</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">usage: train.py [-h] [--batch_size BATCH_SIZE] [--lr LR] [--use_gpu] ...</span><br><span class="line"></span><br><span class="line">训练脚本示例</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --batch_size BATCH_SIZE</span><br><span class="line">                        训练批大小 (default: 32)</span><br><span class="line">  --lr LR               学习率 (default: 0.001)</span><br><span class="line">  --use_gpu             是否使用 GPU</span><br></pre></td></tr></table></figure><hr /><h2 id="yaml-讲解">3. YAML 讲解</h2><p><strong>YAML</strong>是一种人类可读的配置文件格式，常用于存储训练参数。</p><h3 id="示例-config.yaml">3.1 示例 <code>config.yaml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">64</span></span><br><span class="line">  <span class="attr">learning_rate:</span> <span class="number">0.001</span></span><br><span class="line">  <span class="attr">num_epochs:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">&quot;resnet18&quot;</span></span><br><span class="line">  <span class="attr">num_classes:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="python-读取">3.2 Python 读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;config.yaml&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = yaml.safe_load(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(config[<span class="string">&quot;train&quot;</span>][<span class="string">&quot;batch_size&quot;</span>])  <span class="comment"># 64</span></span><br></pre></td></tr></table></figure><blockquote><p>推荐使用 <code>safe_load</code>，防止执行不安全代码</p></blockquote><hr /><h2 id="easydict-讲解">4. easydict 讲解</h2><p><code>easydict</code> 可以把字典转换成<strong>支持点号访问的对象</strong>，这样访问嵌套参数就更清晰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> easydict <span class="keyword">import</span> EasyDict <span class="keyword">as</span> edict</span><br><span class="line"></span><br><span class="line">cfg_dict = &#123;</span><br><span class="line">    <span class="string">&quot;train&quot;</span>: &#123;<span class="string">&quot;batch_size&quot;</span>: <span class="number">64</span>, <span class="string">&quot;learning_rate&quot;</span>: <span class="number">0.001</span>, <span class="string">&quot;num_epochs&quot;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;resnet18&quot;</span>, <span class="string">&quot;num_classes&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg = edict(cfg_dict)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cfg.train.batch_size)      <span class="comment"># 64</span></span><br><span class="line"><span class="built_in">print</span>(cfg.model.name)            <span class="comment"># resnet18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以像普通字典一样访问</span></span><br><span class="line"><span class="built_in">print</span>(cfg[<span class="string">&quot;train&quot;</span>][<span class="string">&quot;learning_rate&quot;</span>])  <span class="comment"># 0.001</span></span><br></pre></td></tr></table></figure><hr /><h2 id="argparse-yaml-easydict-结合使用">5. argparse + YAML + easydict结合使用</h2><p>思路：</p><ol type="1"><li>argparse 解析命令行参数</li><li>读取 YAML 配置</li><li>转换为 <code>EasyDict</code></li><li>用命令行参数覆盖 YAML 配置</li></ol><p>完整示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> easydict <span class="keyword">import</span> EasyDict <span class="keyword">as</span> edict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_config</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;训练脚本&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--config&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;config.yaml&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;配置文件路径&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--batch_size&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;覆盖 YAML 的批大小&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--learning_rate&quot;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;覆盖 YAML 的学习率&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--num_epochs&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;覆盖 YAML 的训练轮数&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--use_gpu&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;是否使用 GPU&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 YAML 并转换为 EasyDict</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(args.config, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cfg = edict(yaml.safe_load(f))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 命令行覆盖</span></span><br><span class="line">    <span class="keyword">if</span> args.batch_size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cfg.train.batch_size = args.batch_size</span><br><span class="line">    <span class="keyword">if</span> args.learning_rate <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cfg.train.learning_rate = args.learning_rate</span><br><span class="line">    <span class="keyword">if</span> args.num_epochs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cfg.train.num_epochs = args.num_epochs</span><br><span class="line">    cfg.train.use_gpu = args.use_gpu</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cfg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    cfg = get_config()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最终训练配置：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(cfg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用配置</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;训练 <span class="subst">&#123;cfg.model.name&#125;</span>，批大小 <span class="subst">&#123;cfg.train.batch_size&#125;</span>，学习率 <span class="subst">&#123;cfg.train.learning_rate&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><hr /><h3 id="使用方法">5.1 使用方法</h3><ol type="1"><li>默认 YAML 配置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>指定 YAML 文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --config configs/exp1.yaml</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>命令行覆盖部分参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --batch_size 128 --learning_rate 0.0005 --use_gpu</span><br></pre></td></tr></table></figure><p>访问参数时可以直接用 <strong>点号</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfg.train.batch_size</span><br><span class="line">cfg.model.name</span><br></pre></td></tr></table></figure><p>训练循环里使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(cfg.train.num_epochs):</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> dataloader(batch_size=cfg.train.batch_size):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><hr /><h2 id="总结">6. 总结</h2><ul><li><strong>argparse</strong>：灵活修改、临时覆盖参数</li><li><strong>YAML</strong>：记录实验参数、便于复现</li><li><strong>easydict</strong>：让配置访问更直观、简洁</li><li><strong>结合使用</strong>：YAML 保存默认参数，argparse命令行覆盖，easydict 优化访问 ```</li></ul>]]></content>
    
    
    <summary type="html">本文介绍使用 argparse + yaml + easydict 三者结合在训练脚本中的使用</summary>
    
    
    
    <category term="deeplearning" scheme="http://example.com/categories/deeplearning/"/>
    
    
    <category term="yaml" scheme="http://example.com/tags/yaml/"/>
    
    <category term="argparse" scheme="http://example.com/tags/argparse/"/>
    
    <category term="easydict" scheme="http://example.com/tags/easydict/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="http://example.com/2025/09/16/vue-router/"/>
    <id>http://example.com/2025/09/16/vue-router/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-16T07:22:22.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建项目并初始化-package.json">1）新建项目并初始化package.json</h1><p>在你想放项目的目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> vue-router-demo</span><br><span class="line"><span class="built_in">cd</span> vue-router-demo</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>npm init -y</code> 会生成一个基本的<code>package.json</code>，我们后面会往里面加脚本。</li></ul><hr /><h1 id="从你要求的那条开始安装-vue">2）从你要求的那条开始：安装 Vue</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@latest</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>这会把最新稳定版 Vue（通常是 Vue 3）装到 <code>node_modules</code>并加到 <code>package.json</code> 的 dependencies。</li></ul><hr /><h1 id="安装开发工具vite与-vue-插件">3）安装开发工具（Vite）与 Vue插件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D vite @vitejs/plugin-vue</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>Vite 是现代前端开发工具：启动快、热模块替换(HMR)体验好。<code>@vitejs/plugin-vue</code> 让 Vite 能处理 <code>.vue</code>单文件组件（SFC）。</li></ul><hr /><h1 id="安装-vue-routervue-3-用-vue-router4">4）安装 vue-router（Vue 3用 vue-router@4）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>vue-router@4</code> 与 Vue 3配套，负责单页应用的路由管理（链接、路由钩子、动态路由等）。</li></ul><hr /><h1 id="在-package.json-添加常用脚本">5）在 <code>package.json</code>添加常用脚本</h1><p>编辑 <code>package.json</code> 的 <code>scripts</code>字段，加入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>npm run dev</code>：本地开发服务器（带 HMR）</li><li><code>npm run build</code>：生产构建（打包）</li><li><code>npm run preview</code>：本地预览打包输出（用于检查构建产物）</li></ul><hr /><h1id="项目目录结构我们要创建这些文件">6）项目目录结构（我们要创建这些文件）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vue-router-demo/</span><br><span class="line">├─ index.html</span><br><span class="line">├─ package.json</span><br><span class="line">├─ vite.config.js</span><br><span class="line">└─ src/</span><br><span class="line">   ├─ main.js</span><br><span class="line">   ├─ App.vue</span><br><span class="line">   ├─ router/</span><br><span class="line">   │  └─ index.js</span><br><span class="line">   └─ views/</span><br><span class="line">      ├─ Home.vue</span><br><span class="line">      ├─ About.vue</span><br><span class="line">      └─ User.vue</span><br></pre></td></tr></table></figure><p>下面逐个文件给出可复制的完整代码，并解释关键行。</p><hr /><h1 id="创建-vite.config.js">7）创建 <code>vite.config.js</code></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>必须把 <code>@vitejs/plugin-vue</code> 注册为插件，让 Vite 能识别<code>.vue</code>。</li></ul><hr /><h1 id="创建-index.html">8）创建 <code>index.html</code></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Router Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vite 使用 module 脚本入口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>Vite 要求在 HTML 中用 <code>type="module"</code>引入入口文件（<code>/src/main.js</code>）。</li></ul><hr /><h1 id="创建-srcmain.js项目启动文件">9）创建<code>src/main.js</code>（项目启动文件）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">// 会自动找 src/router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)  <span class="comment">// 把路由插件挂载到 Vue 应用</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>createApp(App)</code>：创建 Vue 应用实例。</li><li><code>app.use(router)</code>：把 vue-router注册为插件（这样组件内可以使用<code>&lt;router-link&gt;</code>、<code>&lt;router-view&gt;</code>、<code>useRouter()</code>等）。</li><li><code>app.mount('#app')</code>：把应用挂到 index.html 的<code>&lt;div id="app"&gt;</code>。</li></ul><hr /><h1 id="创建路由文件-srcrouterindex.js">10）创建路由文件<code>src/router/index.js</code></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;../views/User.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  <span class="comment">// 懒加载写法（可选）：component: () =&gt; import(&#x27;../views/About.vue&#x27;)</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">  <span class="comment">// 动态路由： :id 是参数； props: true 会把 route.params 作为组件 props</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(), <span class="comment">// 使用 HTML5 history 模式</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>createWebHistory()</code>：产生“漂亮的”URL（无<code>#</code>）。但部署到静态服务器时要确保服务器把所有请求回退到<code>index.html</code>（否则刷新会 404）。如果你不能配置服务器，改用<code>createWebHashHistory()</code>，URL 会带 <code>#</code>（例如<code>/#/about</code>），无需服务器配置。</li></ul><hr /><h1 id="创建根组件-srcapp.vue">11）创建根组件<code>src/App.vue</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- src/App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt; |</span><br><span class="line">      &lt;router-link :to=&quot;&#123; name: &#x27;User&#x27;, params: &#123; id: 123 &#125; &#125;&quot;&gt;User 123&lt;/router-link&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!-- 路由视图：当前路由对应的组件会渲染到这里 --&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">nav &#123; padding: 1rem; &#125;</span><br><span class="line">.router-link-active &#123; font-weight: bold; color: #42b983; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>&lt;router-link&gt;</code>：替代 <code>&lt;a&gt;</code>的路由链接组件，内部处理 push/replace 而不刷新页面。</li><li><code>&lt;router-view&gt;</code>：路由占位符，渲染当前路由对应组件。</li><li><code>.router-link-active</code>：路由激活时默认类名，可以用来高亮当前链接。</li></ul><hr /><h1id="示例视图组件home.vue-about.vue-user.vue">12）示例视图组件：<code>Home.vue</code>,<code>About.vue</code>, <code>User.vue</code></h1><p><code>src/views/Home.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Home&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Welcome to the Vue + Router demo.&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;goUser42&quot;&gt;Go to User 42 (programmatic)&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line">const router = useRouter()</span><br><span class="line">function goUser42() &#123;</span><br><span class="line">  // programmatic navigation</span><br><span class="line">  router.push(&#123; name: &#x27;User&#x27;, params: &#123; id: 42 &#125; &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/views/About.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;About&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Simple about page.&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>src/views/User.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;User page&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;User id: &#123;&#123; props.id &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;$router.back()&quot;&gt;Back&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  id: &#123; type: [String, Number], required: true &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>Home.vue</code>示范“编程式导航”（<code>router.push(&#123;...&#125;)</code>）。</li><li><code>User.vue</code> 使用 <code>props</code>接收路由参数（因为我们在路由配置里写了<code>props: true</code>）。这样组件更容易测试、复用，不用在组件内部直接读<code>$route.params</code>。</li></ul><hr /><h1 id="运行开发服务器">13）运行开发服务器</h1><p>在项目根运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>会看到类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vite vX.X.X  ready in 200ms</span><br><span class="line">➜  Local: http://localhost:5173/</span><br></pre></td></tr></table></figure><p>打开浏览器访问<code>http://localhost:5173</code>（端口以实际启动日志为准）。点击导航链接、试试“Goto User 42”按钮，URL 与页面应同步变化且不会完整刷新。</p><hr /><h1 id="打包与预览生产构建">14）打包与预览（生产构建）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run preview</span><br></pre></td></tr></table></figure><ul><li><code>npm run build</code> 生成静态文件（dist/）。</li><li><code>npm run preview</code>在本地起一个小服务器预览构建后的页面。</li></ul><p>部署注意：</p><ul><li><p>如果使用 <code>createWebHistory()</code>（无<code>#</code>），服务器必须配置：当用户请求 <code>/about</code> 时返回<code>index.html</code>（single page app fallback）。例如 Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不想配置服务器可使用<code>createWebHashHistory()</code>。</p></li></ul><hr /><h1 id="常见进阶点">15）常见进阶点（</h1><ol type="1"><li><p><strong>懒加载路由（减小首包）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure><p>这样 <code>About</code> 会被拆成单独chunk，只有访问时才加载。</p></li><li><p><strong>路由守卫（路由拦截）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !<span class="title function_">isLoggedIn</span>()) <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>to.meta</code> 可以在路由配置时设置<code>meta: &#123; requiresAuth: true &#125;</code>。</p></li><li><p><strong>嵌套路由（子路由）</strong></p><ul><li>可用于 Dashboard 布局 + 子页面。</li><li>在父组件里放 <code>&lt;router-view /&gt;</code>作为子路由的渲染位置。</li></ul></li><li><p><strong>命名视图</strong>（多个<code>&lt;router-view name="..."&gt;</code>）</p><ul><li>用于布局复杂页面（侧栏 + 主体同时切换不同组件）。</li></ul></li><li><p><strong>useRoute / useRouter</strong></p><ul><li><code>const route = useRoute()</code>：读取路由信息（params、query、meta）。</li><li><code>const router = useRouter()</code>：编程式导航（push/replace）。</li></ul></li></ol><hr />]]></content>
    
    
    <summary type="html">本文介绍vue框架路由的使用</summary>
    
    
    
    <category term="fronted" scheme="http://example.com/categories/fronted/"/>
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="router" scheme="http://example.com/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>collections</title>
    <link href="http://example.com/2025/09/15/py_collections/"/>
    <id>http://example.com/2025/09/15/py_collections/</id>
    <published>2025-09-14T16:00:00.000Z</published>
    <updated>2025-09-15T12:25:48.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入方式">1️⃣ 导入方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br></pre></td></tr></table></figure><hr><h2 id="常用数据结构">2️⃣ 常用数据结构</h2><h3 id="counter-计数器">1. <code>Counter</code> —— 计数器</h3><ul><li>功能：统计元素出现的次数。</li><li>类似于 <code>dict</code>，但是专门用于计数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">cnt = Counter(lst)</span><br><span class="line"><span class="built_in">print</span>(cnt)  <span class="comment"># Counter({'a': 3, 'b': 2, 'c': 1})</span></span><br><span class="line"><span class="built_in">print</span>(cnt.most_common(<span class="number">2</span>))  <span class="comment"># [('a', 3), ('b', 2)]</span></span><br></pre></td></tr></table></figure><hr><h3 id="defaultdict-带默认值的字典">2. <code>defaultdict</code> ——带默认值的字典</h3><ul><li>功能：<strong>访问不存在的 key不会报错</strong>，会返回默认值。</li><li>构造时传入一个函数（如<code>int</code>、<code>list</code>、<code>set</code>）作为默认值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">d = defaultdict(<span class="built_in">int</span>)  <span class="comment"># 默认值是 0</span></span><br><span class="line">d[<span class="string">'a'</span>] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">'a'</span>])  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">'b'</span>])  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">d2 = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">d2[<span class="string">'x'</span>].append(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(d2[<span class="string">'x'</span>])  <span class="comment"># [10]</span></span><br></pre></td></tr></table></figure><blockquote><p>在你之前的 <code>mask_outlier</code> 代码里：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index2label = collections.defaultdict(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><p>就是用 <code>int</code> 作为默认值 0，统计每个标签出现的次数。</p><hr><h3 id="ordereddict-有序字典">3. <code>OrderedDict</code> ——有序字典</h3><ul><li>功能：<strong>保持 key 的插入顺序</strong>。</li><li>Python 3.7+ 的普通 dict已经默认保持顺序，所以用途不如以前重要，但有些方法如<code>move_to_end</code> 仍很有用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">od = OrderedDict()</span><br><span class="line">od[<span class="string">'a'</span>] = <span class="number">1</span></span><br><span class="line">od[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">od[<span class="string">'c'</span>] = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(od.keys()))  <span class="comment"># ['a', 'b', 'c']</span></span><br><span class="line">od.move_to_end(<span class="string">'b'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(od.keys()))  <span class="comment"># ['a', 'c', 'b']</span></span><br></pre></td></tr></table></figure><hr><h3 id="deque-双端队列">4. <code>deque</code> —— 双端队列</h3><ul><li>功能：可以 <strong>高效地从两端插入和删除元素</strong>。</li><li>操作复杂度 O(1)，比 list 从左端插入快。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">q = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">q.append(<span class="number">4</span>)      <span class="comment"># 右端添加</span></span><br><span class="line">q.appendleft(<span class="number">0</span>)  <span class="comment"># 左端添加</span></span><br><span class="line"><span class="built_in">print</span>(q)         <span class="comment"># deque([0, 1, 2, 3, 4])</span></span><br><span class="line">q.pop()          <span class="comment"># 右端删除</span></span><br><span class="line">q.popleft()      <span class="comment"># 左端删除</span></span><br></pre></td></tr></table></figure><hr><h3 id="namedtuple-命名元组">5. <code>namedtuple</code> —— 命名元组</h3><ul><li>功能：<strong>给元组的每个元素命名</strong>，既可以像元组一样索引，也可以用属性名访问。</li><li>用于存储轻量对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(p.x)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(p[<span class="number">1</span>]) <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><hr><h2 id="小结">3️⃣ 小结</h2><table><thead><tr><th>数据结构</th><th>特点</th><th>典型用途</th></tr></thead><tbody><tr><td>Counter</td><td>计数</td><td>元素频率统计</td></tr><tr><td>defaultdict</td><td>key 不存在返回默认值</td><td>聚合统计、累加</td></tr><tr><td>OrderedDict</td><td>保持插入顺序</td><td>需要顺序字典</td></tr><tr><td>deque</td><td>双端队列，高效两端操作</td><td>队列、滑动窗口</td></tr><tr><td>namedtuple</td><td>命名元组，访问像对象又像元组</td><td>简单对象存储</td></tr></tbody></table><hr>]]></content>
    
    
    <summary type="html">本文介绍collections库带来方便好用的数据结构</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="collections" scheme="http://example.com/tags/collections/"/>
    
  </entry>
  
  <entry>
    <title>从dataset-&gt;dataloader</title>
    <link href="http://example.com/2025/09/15/%E4%BB%8Edataset%E5%88%B0dataloader/"/>
    <id>http://example.com/2025/09/15/%E4%BB%8Edataset%E5%88%B0dataloader/</id>
    <published>2025-09-14T16:00:00.000Z</published>
    <updated>2025-09-15T14:08:55.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dataset-dataloader"><strong>dataset-&gt;dataloader</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, Sampler</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br></pre></td></tr></table></figure><p><strong>解析</strong>：</p><ul><li><code>torch</code>：PyTorch 主库，用于张量操作。</li><li><code>Dataset</code>：数据集基类。</li><li><code>DataLoader</code>：批次生成器。</li><li><code>Sampler</code>：索引生成器。</li><li><code>nn</code>：神经网络模块。</li><li><code>optim</code>：优化器。</li></ul><hr><h3 id="定义-dataset"><strong>1️⃣ 定义 Dataset</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data, labels</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = data       <span class="comment"># 存储特征列表</span></span><br><span class="line">        <span class="variable language_">self</span>.labels = labels   <span class="comment"># 存储标签列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.data)  <span class="comment"># 返回样本总数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.data[index]  <span class="comment"># 取第 index 个特征</span></span><br><span class="line">        y = <span class="variable language_">self</span>.labels[index]  <span class="comment"># 取第 index 个标签</span></span><br><span class="line">        <span class="comment"># 转为 tensor 并指定数据类型</span></span><br><span class="line">        <span class="keyword">return</span> torch.tensor(x, dtype=torch.float32), torch.tensor(y, dtype=torch.long)</span><br></pre></td></tr></table></figure><p><strong>详细解析</strong>：</p><ol type="1"><li><p><code>__init__</code>：初始化 Dataset对象，存储数据和标签。</p></li><li><p><code>__len__</code>：Dataset 的长度（样本数），DataLoader内部会用它来计算 batch 数量。</p></li><li><p><code>__getitem__</code>：</p><ul><li><p>接收一个整数 <code>index</code>。</p></li><li><p>从列表中取数据和标签。</p></li><li><p>转为 PyTorch 张量：</p><ul><li><code>x</code> → float32，用于计算。</li><li><code>y</code> → long，用于分类任务的 CrossEntropyLoss。</li></ul></li><li><p>返回 <code>(x, y)</code> 元组。</p></li></ul></li><li><p><strong>关键点</strong>：Dataset 本身不处理batch，也不决定顺序，它只知道如何根据索引取单个样本。</p></li></ol><hr><h3 id="定义-sampler"><strong>2️⃣ 定义 Sampler</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReverseSampler</span>(<span class="title class_ inherited__">Sampler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_source</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data_source = data_source  <span class="comment"># Dataset 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回索引迭代器：倒序取样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.data_source)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.data_source)  <span class="comment"># 样本总数</span></span><br></pre></td></tr></table></figure><p><strong>详细解析</strong>：</p><ol type="1"><li><p><code>__iter__</code>：</p><ul><li><p>返回一个迭代器，用于生成索引序列。</p></li><li><p><code>range(len(self.data_source)-1, -1, -1)</code>：</p><ul><li>从最大索引到 0</li><li>例如数据有 5 个样本，索引顺序是 <code>[4,3,2,1,0]</code></li></ul></li></ul></li><li><p><code>__len__</code>：</p><ul><li>返回 Dataset 长度</li><li>DataLoader 内部可能用它计算 batch 总数或进度条。</li></ul></li><li><p><strong>关键点</strong>：</p><ul><li>Sampler 只负责“索引顺序”，不涉及数据本身。</li><li>可以用它实现顺序、随机或自定义采样策略。</li></ul></li></ol><hr><h3 id="初始化-dataset-和-sampler"><strong>3️⃣ 初始化 Dataset 和Sampler</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>], [<span class="number">9</span>,<span class="number">10</span>]]</span><br><span class="line">labels = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">dataset = MyDataset(data, labels)</span><br><span class="line">sampler = ReverseSampler(dataset)</span><br></pre></td></tr></table></figure><ul><li><p>Dataset 保存原始数据。</p></li><li><p>Sampler 定义索引顺序（倒序）。</p></li><li><p>此时数据和索引是分开的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dataset: [ [1,2], [3,4], [5,6], [7,8], [9,10] ]</span><br><span class="line">Sampler: [4,3,2,1,0]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="定义-dataloader"><strong>4️⃣ 定义 DataLoader</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">2</span></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=batch_size, sampler=sampler)</span><br></pre></td></tr></table></figure><p><strong>详细解析</strong>：</p><ul><li><p>DataLoader 接收 Dataset 对象。</p></li><li><p><code>batch_size=2</code> → 每个 batch 2 个样本。</p></li><li><p><code>sampler=sampler</code> →使用我们自定义的倒序索引。</p></li><li><p><strong>内部流程</strong>：</p><ol type="1"><li><p>DataLoader 调用 <code>sampler.__iter__()</code> → 得到索引迭代器<code>[4,3,2,1,0]</code></p></li><li><p>按 <code>batch_size=2</code> 将索引分批：</p><ul><li>Batch 0 → <code>[4,3]</code></li><li>Batch 1 → <code>[2,1]</code></li><li>Batch 2 → <code>[0]</code></li></ul></li><li><p>对每个 batch 调用 <code>dataset.__getitem__</code>，获取<code>(x, y)</code> 张量。</p></li><li><p>返回 batch 张量：</p><ul><li><code>x_batch.shape = [batch_size, feature_dim]</code></li><li><code>y_batch.shape = [batch_size]</code></li></ul></li></ol></li><li><p>DataLoader 可以多线程加载数据（通过<code>num_workers</code>），提升效率。</p></li></ul><hr><h3 id="定义模型和优化器"><strong>5️⃣ 定义模型和优化器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = nn.Linear(<span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 输入2维，输出2类</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()  <span class="comment"># 分类损失</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>nn.Linear(2,2)</code>：</p><ul><li>输入 2 维特征 <code>[x1,x2]</code></li><li>输出 2 类的 logits</li></ul></li><li><p><code>CrossEntropyLoss</code>：</p><ul><li>用于分类任务</li><li>内部会自动做 softmax</li></ul></li><li><p><code>SGD</code>：</p><ul><li>随机梯度下降优化器</li><li>更新模型参数</li></ul></li></ul><hr><h3 id="模拟训练循环"><strong>6️⃣ 模拟训练循环</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">        <span class="comment"># 前向传播</span></span><br><span class="line">        outputs = model(x_batch)   <span class="comment"># [batch_size, num_classes]</span></span><br><span class="line">        loss = criterion(outputs, y_batch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Batch x:"</span>, x_batch)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Batch y:"</span>, y_batch)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Loss:"</span>, loss.item())</span><br></pre></td></tr></table></figure><p><strong>详细解析</strong>：</p><ol type="1"><li><p><code>for x_batch, y_batch in dataloader</code>：</p><ul><li>DataLoader 迭代 batch</li><li>每个 batch 是 <code>(x_batch, y_batch)</code> 张量</li></ul></li><li><p><code>outputs = model(x_batch)</code>：</p><ul><li>前向传播，输出 <code>[batch_size, num_classes]</code> 张量</li></ul></li><li><p><code>loss = criterion(outputs, y_batch)</code>：</p><ul><li>计算 loss</li></ul></li><li><p><code>optimizer.zero_grad()</code>：</p><ul><li>清空梯度，否则梯度会累加</li></ul></li><li><p><code>loss.backward()</code>：</p><ul><li>自动计算梯度</li></ul></li><li><p><code>optimizer.step()</code>：</p><ul><li>更新模型参数</li></ul></li><li><p>打印 batch 信息，观察训练数据流和 loss</p></li></ol><p><strong>示例输出</strong>（倒序 batch）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Batch x: tensor([[ 9., 10.],</span><br><span class="line">                 [ 7.,  8.]])</span><br><span class="line">Batch y: tensor([0,1])</span><br><span class="line">Loss: 0.7378</span><br><span class="line">Batch x: tensor([[5.,6.],</span><br><span class="line">                 [3.,4.]])</span><br><span class="line">Batch y: tensor([0,1])</span><br><span class="line">Loss: 0.6923</span><br><span class="line">Batch x: tensor([[1.,2.]])</span><br><span class="line">Batch y: tensor([0])</span><br><span class="line">Loss: 0.6789</span><br></pre></td></tr></table></figure><hr><h3 id="数据流可视化"><strong>7️⃣ 数据流可视化</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">原始数据</span><br><span class="line">data = [[1,2],[3,4],[5,6],[7,8],[9,10]]</span><br><span class="line">labels = [0,1,0,1,0]</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">Dataset (MyDataset)</span><br><span class="line">  - __getitem__ 返回单个样本</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">Sampler (ReverseSampler)</span><br><span class="line">  - 返回索引序列 [4,3,2,1,0]</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">DataLoader (batch_size=2)</span><br><span class="line">  - Batch 0: idx=[4,3] → x=[[9,10],[7,8]], y=[0,1]</span><br><span class="line">  - Batch 1: idx=[2,1] → x=[[5,6],[3,4]], y=[0,1]</span><br><span class="line">  - Batch 2: idx=[0]   → x=[[1,2]], y=[0]</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">模型训练</span><br><span class="line">  - 前向传播: y_pred = model(x_batch)</span><br><span class="line">  - 计算 loss</span><br><span class="line">  - 反向传播: loss.backward()</span><br><span class="line">  - 参数更新: optimizer.step()</span><br></pre></td></tr></table></figure><p>💡 <strong>关键点</strong>：</p><ol type="1"><li>Dataset → 管理原始数据和取样方法</li><li>Sampler → 决定索引顺序</li><li>DataLoader → 按 batch 聚合数据</li><li>模型训练 → 接收 batch，计算梯度，更新参数</li></ol>]]></content>
    
    
    <summary type="html">本文介绍pytorch内从dataset到dataloader的实现,并给出一个简单线性层实例</summary>
    
    
    
    <category term="pytorch" scheme="http://example.com/categories/pytorch/"/>
    
    
    <category term="deeplearning" scheme="http://example.com/tags/deeplearning/"/>
    
    <category term="pytorch" scheme="http://example.com/tags/pytorch/"/>
    
    <category term="dataset" scheme="http://example.com/tags/dataset/"/>
    
    <category term="dataloader" scheme="http://example.com/tags/dataloader/"/>
    
  </entry>
  
  <entry>
    <title>关于模型可视化---Gradio</title>
    <link href="http://example.com/2025/09/08/gradio/"/>
    <id>http://example.com/2025/09/08/gradio/</id>
    <published>2025-09-07T16:00:00.000Z</published>
    <updated>2025-09-09T10:58:44.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hello-world-入门示例">1. Hello World 入门示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个最简单的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"Hello, <span class="subst">{name}</span>!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Interface 快速构建应用</span></span><br><span class="line">demo = gr.Interface(</span><br><span class="line">    fn=greet,  <span class="comment"># 绑定函数</span></span><br><span class="line">    inputs=gr.Textbox(label=<span class="string">"请输入名字"</span>),  <span class="comment"># 输入组件：单行文本框</span></span><br><span class="line">    outputs=gr.Textbox(label=<span class="string">"问候语"</span>),    <span class="comment"># 输出组件：单行文本框</span></span><br><span class="line">    title=<span class="string">"Gradio Hello World"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">demo.launch(share=<span class="literal">True</span>)  <span class="comment"># 启动服务，并生成公网临时链接</span></span><br></pre></td></tr></table></figure><h3 id="组件解释">组件解释：</h3><ul><li><strong>Textbox</strong>：输入或输出文本。支持 <code>lines</code>参数控制多行。<br></li><li><strong>Interface</strong>：最基础的封装方式，适合单函数输入输出。</li></ul><hr><h2 id="加载-pytorch-.pth-模型并结合-gradio">2. 加载 PyTorch<code>.pth</code> 模型并结合 Gradio</h2><p>这里我们以 <strong>ResNet18 二分类模型（猫 vs 狗）</strong>为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet18</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载模型结构</span></span><br><span class="line">model = resnet18(pretrained=<span class="literal">False</span>)</span><br><span class="line">model.fc = torch.nn.Linear(model.fc.in_features, <span class="number">2</span>)  <span class="comment"># 修改输出层为二分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 加载训练好的权重（model.pth）</span></span><br><span class="line">model.load_state_dict(torch.load(<span class="string">"model.pth"</span>, map_location=<span class="string">"cpu"</span>))</span><br><span class="line">model.<span class="built_in">eval</span>()  <span class="comment"># 切换到推理模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 定义图像预处理（与训练时一致）</span></span><br><span class="line">transform = T.Compose([</span><br><span class="line">    T.Resize((<span class="number">224</span>, <span class="number">224</span>)),  <span class="comment"># 缩放图片</span></span><br><span class="line">    T.ToTensor(),          <span class="comment"># 转 Tensor</span></span><br><span class="line">    T.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])  <span class="comment"># 标准化</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 推理函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">img: Image.Image</span>):</span><br><span class="line">    x = transform(img).unsqueeze(<span class="number">0</span>)  <span class="comment"># 扩展 batch 维度 [1,3,224,224]</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        logits = model(x)  <span class="comment"># 前向传播</span></span><br><span class="line">        probs = torch.softmax(logits, dim=<span class="number">1</span>).squeeze().tolist()  <span class="comment"># 转换为概率</span></span><br><span class="line">    <span class="keyword">return</span> {<span class="string">"cat"</span>: probs[<span class="number">0</span>], <span class="string">"dog"</span>: probs[<span class="number">1</span>]}  <span class="comment"># 输出字典</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. Gradio 封装</span></span><br><span class="line">demo = gr.Interface(</span><br><span class="line">    fn=predict,</span><br><span class="line">    inputs=gr.Image(<span class="built_in">type</span>=<span class="string">"pil"</span>, label=<span class="string">"上传图片"</span>),  <span class="comment"># 输入组件：图片</span></span><br><span class="line">    outputs=gr.Label(num_top_classes=<span class="number">2</span>, label=<span class="string">"预测结果"</span>),  <span class="comment"># 输出组件：标签（带概率条）</span></span><br><span class="line">    title=<span class="string">"猫狗分类器"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">demo.launch()</span><br></pre></td></tr></table></figure><h3 id="组件解释-1">组件解释：</h3><ul><li><strong>Image</strong>：支持上传或摄像头输入，<code>type="pil"</code>表示输出为 PIL Image。<br></li><li><strong>Label</strong>：显示分类概率，自动渲染柱状图。</li></ul><hr><h2 id="使用-blocks-构建多步骤界面">3. 使用 Blocks 构建多步骤界面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> demo:</span><br><span class="line">    <span class="keyword">with</span> gr.Row():  <span class="comment"># 横向布局</span></span><br><span class="line">        img = gr.Image(<span class="built_in">type</span>=<span class="string">"pil"</span>, label=<span class="string">"上传图片"</span>)</span><br><span class="line">        btn = gr.Button(<span class="string">"开始分类"</span>)  <span class="comment"># 按钮</span></span><br><span class="line">    out = gr.Label(num_top_classes=<span class="number">2</span>, label=<span class="string">"预测结果"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击按钮时执行预测</span></span><br><span class="line">    btn.click(fn=predict, inputs=img, outputs=out)</span><br><span class="line"></span><br><span class="line">demo.launch()</span><br></pre></td></tr></table></figure><h3 id="组件解释-2">组件解释：</h3><ul><li><strong>Blocks</strong>：更灵活的 UI 构建方式。<br></li><li><strong>Row / Column</strong>：布局容器。<br></li><li><strong>Button</strong>：可绑定点击事件。</li></ul><hr><h2 id="扩展功能显示-top-k-原图">4. 扩展功能：显示 Top-K + 原图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict_with_img</span>(<span class="params">img: Image.Image</span>):</span><br><span class="line">    x = transform(img).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        logits = model(x)</span><br><span class="line">        probs = torch.softmax(logits, dim=<span class="number">1</span>).squeeze()</span><br><span class="line">    classes = [<span class="string">"cat"</span>, <span class="string">"dog"</span>]</span><br><span class="line">    result = {cls: <span class="built_in">float</span>(probs[i]) <span class="keyword">for</span> i, cls <span class="keyword">in</span> <span class="built_in">enumerate</span>(classes)}</span><br><span class="line">    <span class="keyword">return</span> result, img  <span class="comment"># 返回两个结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> gr.Blocks() <span class="keyword">as</span> demo:</span><br><span class="line">    <span class="keyword">with</span> gr.Row():</span><br><span class="line">        img = gr.Image(<span class="built_in">type</span>=<span class="string">"pil"</span>, label=<span class="string">"上传图片"</span>)</span><br><span class="line">        btn = gr.Button(<span class="string">"开始分类"</span>)</span><br><span class="line">    <span class="keyword">with</span> gr.Row():</span><br><span class="line">        out_probs = gr.Label(num_top_classes=<span class="number">2</span>, label=<span class="string">"预测概率"</span>)</span><br><span class="line">        out_img = gr.Image(label=<span class="string">"原始图片"</span>)</span><br><span class="line"></span><br><span class="line">    btn.click(fn=predict_with_img, inputs=img, outputs=[out_probs, out_img])</span><br><span class="line"></span><br><span class="line">demo.launch()</span><br></pre></td></tr></table></figure><h3 id="解释">解释：</h3><ul><li>Gradio 函数可以返回多个输出 → 绑定到多个组件。<br></li><li><code>Label</code> 用来显示概率条，<code>Image</code>再显示原图，增强可解释性。</li></ul><hr><h2 id="常用组件一览">5. 常用组件一览</h2><ul><li><strong>Textbox</strong>：输入文本<br></li><li><strong>Image</strong>：上传或拍照输入图像<br></li><li><strong>Label</strong>：展示分类结果与概率<br></li><li><strong>Button</strong>：触发事件<br></li><li><strong>Chatbot</strong>：用于构建对话界面（常见于 LLM Demo）<br></li><li><strong>File</strong>：上传或下载文件<br></li><li><strong>Slider / Dropdown / Checkbox</strong>：用于选择参数</li></ul><hr><h2 id="队列与并发控制">6. 队列与并发控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo.queue(concurrency_count=<span class="number">2</span>).launch()</span><br></pre></td></tr></table></figure><ul><li><strong>queue()</strong>：开启请求队列，避免推理时间过长导致前端超时。<br></li><li><strong>concurrency_count</strong>：同时处理的请求数。</li></ul><hr><h2 id="自定义样式-鉴权-安全性">7. 自定义样式 / 鉴权 / 安全性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> gr.Blocks(css=<span class="string">"body {background-color: #f0f8ff;}"</span>) <span class="keyword">as</span> demo:</span><br><span class="line">    img = gr.Image(<span class="built_in">type</span>=<span class="string">"pil"</span>)</span><br><span class="line">    out = gr.Label()</span><br><span class="line">    img.change(predict, inputs=img, outputs=out)</span><br><span class="line"></span><br><span class="line">demo.launch(auth=(<span class="string">"admin"</span>, <span class="string">"1234"</span>), allowed_paths=[<span class="string">"/safe_dir"</span>])</span><br></pre></td></tr></table></figure><ul><li><strong>css=</strong>：注入自定义 CSS。<br></li><li><strong>auth=</strong>：开启简单的用户名/密码鉴权。<br></li><li><strong>allowed_paths=</strong>：限制访问目录，避免文件泄露。</li></ul><hr><h2 id="最终完整应用整合版">8. 最终完整应用（整合版）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet18</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型加载</span></span><br><span class="line">model = resnet18(pretrained=<span class="literal">False</span>)</span><br><span class="line">model.fc = torch.nn.Linear(model.fc.in_features, <span class="number">2</span>)</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">"model.pth"</span>, map_location=<span class="string">"cpu"</span>))</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理</span></span><br><span class="line">transform = T.Compose([</span><br><span class="line">    T.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">    T.ToTensor(),</span><br><span class="line">    T.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推理函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">img: Image.Image</span>):</span><br><span class="line">    x = transform(img).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        logits = model(x)</span><br><span class="line">        probs = torch.softmax(logits, dim=<span class="number">1</span>).squeeze()</span><br><span class="line">    classes = [<span class="string">"cat"</span>, <span class="string">"dog"</span>]</span><br><span class="line">    <span class="keyword">return</span> {cls: <span class="built_in">float</span>(probs[i]) <span class="keyword">for</span> i, cls <span class="keyword">in</span> <span class="built_in">enumerate</span>(classes)}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建应用</span></span><br><span class="line"><span class="keyword">with</span> gr.Blocks(css=<span class="string">"body {font-family: Arial; background:#fafafa;}"</span>) <span class="keyword">as</span> demo:</span><br><span class="line">    <span class="keyword">with</span> gr.Row():</span><br><span class="line">        img = gr.Image(<span class="built_in">type</span>=<span class="string">"pil"</span>, label=<span class="string">"上传图片"</span>)</span><br><span class="line">        btn = gr.Button(<span class="string">"开始分类"</span>)</span><br><span class="line">    <span class="keyword">with</span> gr.Row():</span><br><span class="line">        out = gr.Label(num_top_classes=<span class="number">2</span>, label=<span class="string">"预测结果"</span>)</span><br><span class="line">    btn.click(predict, inputs=img, outputs=out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启队列 + 鉴权</span></span><br><span class="line">demo.queue(concurrency_count=<span class="number">2</span>).launch(auth=(<span class="string">"user"</span>, <span class="string">"pass"</span>))</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">本文旨在介绍如何对Pytorch和Tensorflow模型实现可视化操作</summary>
    
    
    
    <category term="fronted" scheme="http://example.com/categories/fronted/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="gradio" scheme="http://example.com/tags/gradio/"/>
    
  </entry>
  
  <entry>
    <title>网络核心概念精讲</title>
    <link href="http://example.com/2025/09/03/network/"/>
    <id>http://example.com/2025/09/03/network/</id>
    <published>2025-09-02T16:00:00.000Z</published>
    <updated>2025-09-03T12:58:07.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络核心概念精讲从-ip-地址到-mac-地址">网络核心概念精讲：从 IP地址到 MAC 地址</h1><blockquote><p>本文旨在系统性地讲解计算机网络的核心概念，包括 IP地址、子网、路由器、DNS等，力求用通俗易懂的语言和比喻解释复杂的技术原理。</p></blockquote><h2 id="网络层级模型互联网的交通规则">1.网络层级模型：互联网的交通规则</h2><p>理解网络，首先要理解它的分层模型。最著名的 OSI 七层模型和 TCP/IP五层模型将复杂的网络通信过程分解为多个层次，每一层只专注于自己的任务。</p><p>一个经典的比喻是<strong>发送快递</strong>： -<strong>应用层</strong>：你要寄的东西本身（比如一封信），决定了通信的<strong>内容</strong>（HTTP,FTP）。 -<strong>传输层</strong>：将东西打包，贴上“顺丰”或“EMS”的标签，并确保包裹完整送达（TCP,UDP）。 -<strong>网络层</strong>：填写<strong>收件人地址</strong>和<strong>发件人地址</strong>（IP地址），负责在不同网络间选择路径（IP, 路由器）。 -<strong>数据链路层</strong>：快递员在包裹上盖“下一站”的印章，负责在<strong>同一条路</strong>上把包裹送到下一个中转站（MAC地址，交换机）。 -<strong>物理层</strong>：包裹本身和运送的卡车、公路，负责最终的<strong>比特流</strong>传输（网线、光纤、无线电波）。</p><h2 id="ip-地址互联网上的门牌号">2. IP 地址：互联网上的“门牌号”</h2><h3 id="什么是-ip-地址">2.1 什么是 IP 地址？</h3><p>IP地址是为互联网上的每一个设备分配的一个<strong>逻辑地址</strong>，用于在网络中定位和寻址。它就像你家的门牌号，知道了这个地址，数据包才能找到你。</p><h3 id="公有-ip-vs.-私有-ip">2.2 公有 IP vs. 私有 IP</h3><ul><li><strong>公有 IP (PublicIP)</strong>：全球唯一，由运营商分配，是你在互联网上的“家庭住址”。可以直接被互联网上的其他设备访问。<ul><li><strong>如何查看</strong>：在浏览器中访问 <code>ip.cn</code> 或<code>whatismyip.com</code>，或在 PowerShell 中运行<code>(Invoke-RestMethod -Uri "https://api.ipify.org").Trim()</code>。</li></ul></li><li><strong>私有 IP (PrivateIP)</strong>：在局域网（LAN）内使用，非全球唯一。你家中的电脑、手机获得的都是私有IP。它们通过<strong>路由器</strong>共享一个公有 IP 上网。<ul><li><strong>常见范围</strong>：<code>10.0.0.0/8</code>,<code>172.16.0.0/12</code>, <code>192.168.0.0/16</code>。</li><li><strong>如何查看</strong>：<ul><li><strong>Windows</strong>: <code>Win + R</code> -&gt; 输入<code>cmd</code> -&gt; 输入 <code>ipconfig</code>，查看“IPv4地址”。</li><li><strong>macOS/Linux</strong>: 打开“终端”，输入 <code>ifconfig</code>或 <code>ip addr</code>。</li></ul></li></ul></li></ul><h3 id="ipv4-vs.-ipv6">2.3 IPv4 vs. IPv6</h3><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr><th style="text-align: left;">特性</th><th style="text-align: left;">IPv4</th><th style="text-align: left;">IPv6</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>地址长度</strong></td><td style="text-align: left;">32 位</td><td style="text-align: left;">128 位</td></tr><tr><td style="text-align: left;"><strong>地址总量</strong></td><td style="text-align: left;">约 42.9 亿</td><td style="text-align: left;">近乎无限（<code>2^128</code> 个）</td></tr><tr><td style="text-align: left;"><strong>表示方法</strong></td><td style="text-align: left;">十进制（如 <code>192.168.1.1</code>）</td><td style="text-align: left;">十六进制（如<code>2001:db8::1</code>）</td></tr><tr><td style="text-align: left;"><strong>本质</strong></td><td style="text-align: left;">都是二进制数，只是对人类的不同表示方式</td><td style="text-align: left;"></td></tr></tbody></table><h2 id="子网掩码与网络划分划定社区的范围">3.子网掩码与网络划分：划定“社区”的范围</h2><p>光有门牌号不够，还需要知道这个门牌号属于哪个小区（网络）。<strong>子网掩码</strong>就是用来界定“小区”范围的工具。</p><ul><li><strong>功能</strong>：将 IP地址划分为<strong>网络号</strong>（小区名）和<strong>主机号</strong>（门牌号）。</li><li><strong>计算</strong>：将 IP地址与子网掩码进行<strong>逻辑与运算</strong>，即可得到网络号。</li><li><strong>例子</strong>：IP <code>192.168.1.100</code>，掩码<code>255.255.255.0</code>。<ul><li>二进制“与”运算后得到网络号：<code>192.168.1.0</code>。</li><li>这意味着 <code>192.168.1.1</code> 到 <code>192.168.1.254</code>的设备都在同一个“小区”内，可以直接通信。</li></ul></li><li><strong>CIDR 表示法</strong>：<code>192.168.1.0/24</code>，其中<code>/24</code> 表示子网掩码前 24 位是 <code>1</code>（即<code>255.255.255.0</code>）。</li></ul><p><strong>特殊的子网掩码</strong>：像 <code>255.255.128.0</code>这样的掩码，它提供了更灵活的划分方式，可以将一个大的地址段（如<code>172.16.0.0/16</code>）划分为两个更小的子网，以满足不同规模的网络需求。</p><h2 id="网关与路由器网络的出入口和交通枢纽">4.网关与路由器：网络的“出入口”和“交通枢纽”</h2><h3 id="网关-gateway">4.1 网关 (Gateway)</h3><ul><li><strong>定义</strong>：连接两个不同网络的<strong>出入口</strong>。是一个逻辑概念。</li><li><strong>地址</strong>：网关必须有一个 IP地址，这个地址就是<strong>路由器局域网口的 IP 地址</strong>（如<code>192.168.1.1</code>, <code>10.138.255.254</code>）。</li><li><strong>功能</strong>：当你的设备要访问互联网（另一个网络）时，它会把所有数据包都发给网关，由网关负责转发。</li></ul><h3 id="路由器-router">4.2 路由器 (Router)</h3><ul><li><strong>定义</strong>：是实现网关功能的<strong>物理设备</strong>。是网络的“交通枢纽”，根据“地图”（路由表）决定数据包的下一站去哪。</li><li><strong>核心功能</strong>：<ol type="1"><li><strong>路由</strong>：在不同网络间转发数据包。</li><li><strong>NAT (网络地址转换)</strong>：将局域网内多个设备的私有 IP转换为一个公有 IP 上网，是共享上网的基础。</li><li><strong>DHCP 服务</strong>：自动为局域网内的设备分配 IP地址、子网掩码、网关和 DNS 地址。</li><li><strong>交换机 &amp; 无线 AP</strong>：提供有线端口和 Wi-Fi信号接入。</li></ol></li></ul><h3 id="硬路由-vs.-软路由">4.3 硬路由 vs. 软路由</h3><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr><th style="text-align: left;">特性</th><th style="text-align: left;">硬路由</th><th style="text-align: left;">软路由</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>本质</strong></td><td style="text-align: left;">专用硬件设备（如家用路由器）</td><td style="text-align: left;">在通用硬件（电脑/工控机）上运行的路由软件</td></tr><tr><td style="text-align: left;"><strong>优点</strong></td><td style="text-align: left;">稳定、省电、即插即用</td><td style="text-align: left;">性能强大、功能无限（通过插件实现科学上网、去广告等）</td></tr><tr><td style="text-align: left;"><strong>缺点</strong></td><td style="text-align: left;">功能固定、性能有限</td><td style="text-align: left;">需自行配置、功耗较高、有学习成本</td></tr><tr><td style="text-align: left;"><strong>例子</strong></td><td style="text-align: left;">华硕、TP-Link、网件路由器</td><td style="text-align: left;"><strong>OpenWrt</strong>,<strong>爱快(iKuai)</strong>, <strong>ROS</strong> 系统</td></tr></tbody></table><h2 id="dhcp-vs.-静态-ip自动分配与手动指定">5. DHCP vs. 静态IP：自动分配与手动指定</h2><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr><th style="text-align: left;">特性</th><th style="text-align: left;">DHCP (动态分配)</th><th style="text-align: left;">静态 IP (手动配置)</th></tr></thead><tbody><tr><td style="text-align: left;"><strong>配置方式</strong></td><td style="text-align: left;"><strong>自动</strong></td><td style="text-align: left;"><strong>手动</strong></td></tr><tr><td style="text-align: left;"><strong>地址变化</strong></td><td style="text-align: left;">可能变化（租期到期）</td><td style="text-align: left;"><strong>固定不变</strong></td></tr><tr><td style="text-align: left;"><strong>适用场景</strong></td><td style="text-align: left;">绝大多数设备（手机、电脑）</td><td style="text-align: left;">需要固定地址的设备（服务器、打印机、NAS）</td></tr><tr><td style="text-align: left;"><strong>比喻</strong></td><td style="text-align: left;"><strong>租房子</strong>（地址可能变）</td><td style="text-align: left;"><strong>自己买的房子</strong>（地址永久）</td></tr></tbody></table><h2 id="dns互联网的电话簿">6. DNS：互联网的“电话簿”</h2><ul><li><strong>全称</strong>：域名系统 (Domain Name System)。</li><li><strong>作用</strong>：将人类容易记住的<strong>域名</strong>（如<code>www.google.com</code>）翻译成计算机用于通信的 <strong>IP地址</strong>（如 <code>142.251.42.206</code>）。</li><li><strong>提供者</strong>：通常由你的网络运营商（ISP）自动分配，也可以手动设置为公共DNS（如 <code>8.8.8.8</code> Google DNS 或 <code>1.1.1.1</code>Cloudflare DNS）。</li><li><strong>查看方式</strong>：在 <code>ipconfig /all</code>命令结果中查看“DNS 服务器”项。</li></ul><h2 id="mac-地址网卡的身份证">7. MAC 地址：网卡的“身份证”</h2><ul><li><strong>定义</strong>：媒体访问控制地址，是固化在网卡硬件中的<strong>全球唯一</strong>的<strong>物理地址</strong>。</li><li><strong>格式</strong>：48 位，16 进制表示（如<code>00:1A:2B:3C:4D:5E</code>）。</li><li><strong>结构</strong>：前 24 位是厂商标识（OUI），后 24位是厂商分配的序列号。</li><li><strong>作用层级</strong>：工作在<strong>数据链路层</strong>，负责在<strong>同一个局域网内</strong>进行设备间的直接寻址（“下一跳”通信）。</li><li><strong>核心协议</strong>：<strong>ARP</strong>。设备通过广播“这个IP 的 MAC地址是什么？”来获取目标设备的物理地址，从而在局域网内直接通信。</li><li><strong>与 IP 地址的关系</strong>：<ul><li><strong>IP地址</strong>：像<strong>收件地址</strong>，负责<strong>端到端</strong>的全局寻址（“我要去上海”）。</li><li><strong>MAC地址</strong>：像<strong>当前路段的下一站</strong>，负责<strong>一跳接一跳</strong>的局部寻址（“下一站去天津”）。数据包每经过一个路由器，其源和目的MAC 地址都会被重写，而 IP 地址保持不变。</li></ul></li></ul><h2 id="总结">8. 总结</h2><p>网络通信是一个精妙的协作过程： 1. 你想访问<code>www.google.com</code>，<strong>DNS</strong> 首先将其解析为 IP地址。 2. 你的电脑判断目标 IP不在当前局域网，于是将数据包发往<strong>网关</strong>（你的路由器）。 3.路由器通过 <strong>NAT</strong> 将你的私有 IP 转为公有IP，并根据路由表将数据包发往互联网的下一跳。 4. 在每一跳中，设备都通过<strong>MAC 地址</strong>和 <strong>ARP</strong> 协议在局部链路上寻址。5. 数据包最终到达目标服务器，响应再沿着相反的路径回到你的电脑。</p><p>理解这些核心概念，就能拨开互联网的迷雾，看清数据流动的轨迹。</p>]]></content>
    
    
    <summary type="html">本文旨在系统性地讲解计算机网络的核心概念，包括 IP 地址、子网、路由器、DNS 等，力求用通俗易懂的语言和比喻解释复杂的技术原理。</summary>
    
    
    
    <category term="network" scheme="http://example.com/categories/network/"/>
    
    
    <category term="router" scheme="http://example.com/tags/router/"/>
    
    <category term="ip" scheme="http://example.com/tags/ip/"/>
    
    <category term="MAC" scheme="http://example.com/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>SQL语法规则</title>
    <link href="http://example.com/2025/09/01/sql/"/>
    <id>http://example.com/2025/09/01/sql/</id>
    <published>2025-08-31T16:00:00.000Z</published>
    <updated>2025-09-01T05:32:54.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="核心概念">核心概念</h3><ol type="1"><li><strong>数据库（Database）</strong>：一个容器，用于存储有组织的数据。你可以把它想象成一个文件柜。</li><li><strong>表（Table）</strong>：数据库中的特定数据结构，用于存储同类数据。它由行和列组成，就像一个Excel表格。每个表都有一个唯一的名字（例如<code>users</code>, <code>products</code>, <code>orders</code>）。<ul><li><strong>列（Column）</strong>：表中的一个字段，代表了数据的某种属性（例如<code>id</code>, <code>name</code>,<code>email</code>）。它定义了数据的类型（数字、文本、日期等）。</li><li><strong>行（Row）</strong>：表中的一个记录，代表一个具体的实体（例如一个用户、一件商品）。一行数据就是由多个列的值组成的。</li></ul></li></ol><hr /><h3 id="sql语言的分类">SQL语言的分类</h3><p>SQL命令通常根据其功能分为以下几类：</p><table><colgroup><col style="width: 15%" /><col style="width: 26%" /><col style="width: 15%" /><col style="width: 26%" /><col style="width: 15%" /></colgroup><thead><tr><th>类别</th><th>英文全称</th><th>中文</th><th>核心命令</th><th>功能</th></tr></thead><tbody><tr><td><strong>DQL</strong></td><td>Data Query Language</td><td>数据查询语言</td><td><strong><code>SELECT</code></strong></td><td>从表中检索数据，是使用最频繁的操作</td></tr><tr><td><strong>DML</strong></td><td>Data Manipulation Language</td><td>数据操作语言</td><td><code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code></td><td>用于增、删、改表中的记录</td></tr><tr><td><strong>DDL</strong></td><td>Data Definition Language</td><td>数据定义语言</td><td><code>CREATE</code>, <code>ALTER</code>, <code>DROP</code>,<code>RENAME</code></td><td>用于创建、修改、删除数据库对象（如表、索引）</td></tr><tr><td><strong>DCL</strong></td><td>Data Control Language</td><td>数据控制语言</td><td><code>GRANT</code>, <code>REVOKE</code></td><td>用于控制用户对数据库的访问权限</td></tr><tr><td><strong>TCL</strong></td><td>Transaction Control Language</td><td>事务控制语言</td><td><code>COMMIT</code>, <code>ROLLBACK</code>,<code>SAVEPOINT</code></td><td>用于管理数据库中的事务</td></tr></tbody></table><hr /><h3 id="最常用的sql命令详解">最常用的SQL命令详解</h3><p>我们将围绕一个简单的 <code>users</code> 表进行讲解，表结构如下：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>INT</td><td>主键，唯一标识</td></tr><tr><td><code>username</code></td><td>VARCHAR(50)</td><td>用户名</td></tr><tr><td><code>email</code></td><td>VARCHAR(100)</td><td>邮箱</td></tr><tr><td><code>age</code></td><td>INT</td><td>年龄</td></tr><tr><td><code>country</code></td><td>VARCHAR(50)</td><td>国家</td></tr><tr><td><code>created_at</code></td><td>DATETIME</td><td>创建时间</td></tr></tbody></table><h4 id="dql---查询数据-select">1. DQL - 查询数据 (SELECT)</h4><p>这是最核心的操作。</p><ul><li><p><strong>查询所有列和所有行</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>查询特定的列</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, email <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>使用 <code>WHERE</code> 条件过滤</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> country <span class="operator">=</span> <span class="string">&#x27;China&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">123</span>; </span><br></pre></td></tr></table></figure></p></li><li><p><strong>使用 <code>ORDER BY</code> 排序</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>; <span class="comment">-- 按年龄降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">ASC</span>; <span class="comment">-- 按创建时间升序</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>使用 <code>LIMIT</code> 限制返回数量</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users LIMIT <span class="number">10</span>; <span class="comment">-- 返回前10条记录</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>使用 <code>LIKE</code> 进行模糊搜索</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>; <span class="comment">-- 查找姓&quot;张&quot;的用户</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>使用聚合函数</strong>（如 <code>COUNT</code>,<code>SUM</code>, <code>AVG</code>, <code>MAX</code>,<code>MIN</code>）： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> users; <span class="comment">-- 统计用户总数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(age) <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> country <span class="operator">=</span> <span class="string">&#x27;China&#x27;</span>; <span class="comment">-- 中国用户的平均年龄</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>使用 <code>GROUP BY</code> 分组</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> user_count </span><br><span class="line"><span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> country; <span class="comment">-- 统计每个国家的用户数量</span></span><br></pre></td></tr></table></figure></p></li></ul><h4 id="dml---操作数据">2. DML - 操作数据</h4><ul><li><p><strong><code>INSERT</code> - 插入新记录</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 指定列名插入</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> users (username, email, age, country)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;USA&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果为所有列都提供值，可以省略列名</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> users </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;USA&#x27;</span>, NOW());</span><br><span class="line"><span class="comment">-- 注意：id 设为 NULL 或 DEFAULT 以便数据库自动生成（如果它是自增主键）</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong><code>UPDATE</code> - 更新现有记录</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users </span><br><span class="line"><span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">26</span>, country <span class="operator">=</span> <span class="string">&#x27;Canada&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">123</span>; <span class="comment">-- **非常重要：一定要用 WHERE，否则会更新所有行！**</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong><code>DELETE</code> - 删除记录</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users </span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">123</span>; <span class="comment">-- **极端重要：一定要用 WHERE，否则会删除所有行！**</span></span><br></pre></td></tr></table></figure></p></li></ul><h4 id="ddl---定义数据结构">3. DDL - 定义数据结构</h4><ul><li><p><strong><code>CREATE TABLE</code> - 创建表</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> products (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT, <span class="comment">-- 主键，自增</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>,        <span class="comment">-- 非空约束</span></span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT NULL</span>,     <span class="comment">-- 价格，10位数含2位小数</span></span><br><span class="line">    description TEXT</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></li><li><p><strong><code>ALTER TABLE</code> - 修改表结构</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> avatar <span class="type">VARCHAR</span>(<span class="number">255</span>); <span class="comment">-- 添加新列</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> users <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> age; <span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> users MODIFY <span class="keyword">COLUMN</span> email <span class="type">VARCHAR</span>(<span class="number">150</span>); <span class="comment">-- 修改列数据类型</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong><code>DROP TABLE</code> - 删除表</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> products; <span class="comment">-- **危险操作！会删除整张表和所有数据！**</span></span><br></pre></td></tr></table></figure></p></li></ul><hr /><h3 id="高级主题简要介绍">高级主题（简要介绍）</h3><ol type="1"><li><p><strong>连接（JOIN）</strong>：用于合并来自两个或多个表的行。</p><ul><li><code>INNER JOIN</code>：返回两个表中匹配的行。</li><li><code>LEFT JOIN</code>：返回左表的所有行，即使右表中没有匹配。</li></ul></li><li><p><strong>索引（INDEX）</strong>：类似于书的目录，可以极大地加快数据检索速度（<code>SELECT</code>查询），但会减慢数据写入（<code>INSERT/UPDATE/DELETE</code>）速度。通常在<code>WHERE</code> 或 <code>JOIN</code> 条件中频繁使用的列上创建索引。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_email <span class="keyword">ON</span> users (email);</span><br></pre></td></tr></table></figure></p></li><li><p><strong>事务（Transaction）</strong>：将多个SQL操作捆绑成一个单一的工作单元。这些操作要么<strong>全部成功</strong>，要么<strong>全部失败</strong>。这是保证数据完整性的关键机制（例如银行转账）。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="comment">-- 从A账户扣钱</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- 向B账户加钱</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="comment">-- 如果两条语句都成功，则提交</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 如果任何一条失败，则回滚，所有操作撤销</span></span><br><span class="line"><span class="comment">-- ROLLBACK;</span></span><br></pre></td></tr></table></figure></p></li></ol><h3 id="总结与实践建议">总结与实践建议</h3><ul><li><strong>核心是<code>SELECT</code></strong>：绝大部分时间你都在写查询语句。</li><li><strong>安全第一</strong>：<strong>永远使用参数化查询（<code>?</code>占位符）来防止 SQL 注入</strong>，不要手动拼接字符串。</li><li><strong><code>WHERE</code> 子句是关键</strong>：在<code>UPDATE</code> 和 <code>DELETE</code> 时，忘记 <code>WHERE</code>子句是灾难性的。</li><li><strong>先学基础</strong>：熟练掌握基本的 <code>SELECT</code>,<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>,<code>WHERE</code>, <code>ORDER BY</code>, <code>JOIN</code>后，再深入学索引、事务等高级主题。</li><li><strong>多练习</strong>：最好的学习方式是在自己搭建的数据库环境（如MySQL, PostgreSQL 或在线练习平台）中实际操作。</li></ul>]]></content>
    
    
    <summary type="html">本文介绍SQL（Structured Query Language，结构化查询语言）的基本语法和核心概念</summary>
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="database" scheme="http://example.com/tags/database/"/>
    
    <category term="sql" scheme="http://example.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Koa 框架使用</title>
    <link href="http://example.com/2025/08/25/Koa/"/>
    <id>http://example.com/2025/08/25/Koa/</id>
    <published>2025-08-25T05:20:00.000Z</published>
    <updated>2025-08-27T08:04:33.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作">0. 准备工作</h2><h3 id="安装-node.js建议-node-18">0.1 安装 Node.js（建议 Node 18+）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="comment"># v18.x 或更高</span></span><br></pre></td></tr></table></figure><h3 id="新建项目目录并初始化">0.2 新建项目目录并初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> koa-step-by-step</span><br><span class="line"><span class="built_in">cd</span> koa-step-by-step</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="esm-设置强烈建议">0.3 ESM 设置（强烈建议）</h3><p>在 <code>package.json</code> 顶层加入： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"module"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure> &gt; 作用：让Node 默认使用 ES模块语法（<code>import</code>/<code>export</code>），并支持<code>.mjs</code> 文件。</p><h3 id="推荐本地开发脚本可热重载">0.4 推荐本地开发脚本（可热重载）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D nodemon</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 里加入： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"dev"</span><span class="punctuation">:</span> <span class="string">"nodemon --ext mjs,js,json --watch . app.mjs"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"node app.mjs"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure> &gt; 以后<code>npm run dev</code> 就会自动重启，开发体验更好。</p><hr><h2 id="阶段-a最小可运行的-koa无路由无中间件栈">1. 阶段 A：最小可运行的Koa（无路由、无中间件栈）</h2><h3 id="安装-koa">1.1 安装 Koa</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa</span><br></pre></td></tr></table></figure><h3 id="新建-app.mjs">1.2 新建 <code>app.mjs</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段A）</span></span><br><span class="line"><span class="comment">// 目标：</span></span><br><span class="line"><span class="comment">// 1）启动一个最简单的 Koa 服务器</span></span><br><span class="line"><span class="comment">// 2）所有请求都返回 "Hello Koa" 文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;   <span class="comment">// 引入 Koa 主类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();   <span class="comment">// 创建 Koa 实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use() 注册一个中间件函数（每个请求都会走这里）</span></span><br><span class="line"><span class="comment">// 这是最简单的中间件：设置响应体即可</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="comment">// ctx 是“上下文对象”，封装了 Request 和 Response 等常用属性</span></span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">'Hello Koa'</span>; <span class="comment">// 返回纯文本</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTP 服务，监听端口 3000</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：A（最小可运行服务）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h3 id="运行">1.3 运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开 http://localhost:3000 ，能看到 <strong>HelloKoa</strong>。</p><hr><h2 id="阶段-b引入路由koa-router让不同路径走不同逻辑">2. 阶段B：引入路由（koa-router），让不同路径走不同逻辑</h2><h3 id="安装路由中间件">2.1 安装路由中间件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-router</span><br></pre></td></tr></table></figure><h3 id="新建-routesindex.mjs">2.2 新建<code>routes/index.mjs</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段B）</span></span><br><span class="line"><span class="comment">// 目标：为不同 URL 配置不同处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例，并统一加上前缀（可选）</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/hello -&gt; 返回简单文本</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/hello'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">'Hello from /api/hello'</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/user/:id -&gt; 返回路径参数</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/user/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="comment">// 通过 ctx.params 获取 :id 的值</span></span><br><span class="line">  <span class="keyword">const</span> { id } = ctx.<span class="property">params</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">message</span>: <span class="string">`你请求的用户ID是 <span class="subst">${id}</span>`</span> };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="修改-app.mjs-使用路由">2.3 修改 <code>app.mjs</code>使用路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段B）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>; <span class="comment">// 引入路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由注册到应用（注意两步：routes + allowedMethods）</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：B（已加入路由）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p>此时访问： - GET <code>http://localhost:3000/api/hello</code> - GET<code>http://localhost:3000/api/user/123</code></p><hr><h2 id="阶段-c解析请求体koa-bodyparser并实现第一个-post-api">3. 阶段C：解析请求体（koa-bodyparser）并实现第一个 POST API</h2><h3 id="安装-body-解析中间件">3.1 安装 body 解析中间件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-bodyparser</span><br></pre></td></tr></table></figure><h3 id="在-app.mjs-启用-bodyparser">3.2 在 <code>app.mjs</code> 启用bodyParser</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段C）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 JSON / x-www-form-urlencoded 请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：C（支持解析请求体 &amp; POST 请求）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h3 id="在路由里加一个-post-示例">3.3 在路由里加一个 POST 示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段C，新增 POST 路由）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/hello'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">'Hello from /api/hello'</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/user/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { id } = ctx.<span class="property">params</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">message</span>: <span class="string">`你请求的用户ID是 <span class="subst">${id}</span>`</span> };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /api/echo -&gt; 回显请求体</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/echo'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="comment">// 通过 ctx.request.body 获取 JSON 或表单提交的数据</span></span><br><span class="line">  <span class="keyword">const</span> body = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = {</span><br><span class="line">    <span class="attr">received</span>: body,  <span class="comment">// 回显你发过来的数据</span></span><br><span class="line">    <span class="attr">tip</span>: <span class="string">'你已成功通过 POST 发送数据到 Koa 服务端'</span></span><br><span class="line">  };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p><strong>测试 POST：</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac/Linux</span></span><br><span class="line">curl -X POST http://localhost:3000/api/echo \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'{"name":"Alice","age":20}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows PowerShell（注意引号）</span></span><br><span class="line">curl -X POST http://localhost:3000/api/echo `</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> `</span><br><span class="line">  -d <span class="string">"{"</span><span class="string">"name"</span><span class="string">":"</span><span class="string">"Alice"</span><span class="string">","</span><span class="string">"age"</span><span class="string">":20}"</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="阶段-d全局错误处理-日志打印理解洋葱模型">4. 阶段 D：全局错误处理+ 日志打印（理解“洋葱模型”）</h2><h3 id="在-app.mjs-添加错误捕获中间件">4.1 在 <code>app.mjs</code>添加错误捕获中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段D）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① 全局错误处理中间件（最外层）：try/catch 所有下游中间件的异常</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 统计耗时</span></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();           <span class="comment">// 交给下一个中间件</span></span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="comment">// 统一错误响应格式</span></span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">    <span class="comment">// 打印到控制台方便定位</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'❌ Error:'</span>, err);</span><br><span class="line">  } <span class="keyword">finally</span> {</span><br><span class="line">    <span class="keyword">const</span> ms = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">    <span class="comment">// 记录访问日志</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${ctx.method}</span> <span class="subst">${ctx.url}</span> - <span class="subst">${ctx.status || <span class="number">200</span>}</span> <span class="subst">${ms}</span>ms`</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② 解析请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③ 注册业务路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：D（全局错误处理 &amp; 访问日志）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p><strong>理解洋葱模型</strong>：最外层中间件先进入，<code>await next()</code>后进入下一层；当下一层返回时，回到上一层继续执行 <code>finally</code>等收尾逻辑。</p><h3 id="在路由里人为抛错试试看">4.2 在路由里人为抛错试试看</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段D，增加一个错误示例）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/boom'</span>, <span class="title function_">async</span> () =&gt; {</span><br><span class="line">  <span class="comment">// 主动抛出一个错误，观察上文错误处理中间件如何工作</span></span><br><span class="line">  <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'模拟服务端异常：/api/boom'</span>);</span><br><span class="line">  err.<span class="property">status</span> = <span class="number">418</span>; <span class="comment">// 仅演示，418是Teapot彩蛋状态码</span></span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>访问 <code>GET /api/boom</code>，你会看到结构化的错误响应 +控制台日志。</p><hr><h2 id="阶段-e静态资源与-favicon避免多次计数404">5. 阶段 E：静态资源与favicon（避免多次计数/404）</h2><h3 id="安装-koa-static">5.1 安装 koa-static</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-static</span><br></pre></td></tr></table></figure><h3 id="在项目根目录建-public">5.2 在项目根目录建<code>public/</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ routes/</span><br><span class="line">│  └─ index.mjs</span><br><span class="line">└─ public/</span><br><span class="line">   ├─ index.html</span><br><span class="line">   └─ favicon.ico (可选)</span><br></pre></td></tr></table></figure><p>简单写一个 <code>public/index.html</code>： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Koa Static<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Static<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是 public/index.html 静态页面。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="修改-app.mjs-启用静态资源">5.3 修改 <code>app.mjs</code>启用静态资源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段E）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> { fileURLToPath } <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'❌ Error:'</span>, err);</span><br><span class="line">  } <span class="keyword">finally</span> {</span><br><span class="line">    <span class="keyword">const</span> ms = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${ctx.method}</span> <span class="subst">${ctx.url}</span> - <span class="subst">${ctx.status || <span class="number">200</span>}</span> <span class="subst">${ms}</span>ms`</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放 public 目录为静态资源根目录：访问 / 即可打开 public/index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：E（支持静态资源与 favicon）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p>现在访问 <code>http://localhost:3000/</code> 就能看到静态页面。</p><blockquote><p><strong>提示</strong>：许多浏览器会自动请求<code>/favicon.ico</code>。如果没有图标，偶尔会触发两次访问等“小惊喜”。把<code>favicon.ico</code> 放到 <code>public/</code>里，可以避免这类困扰。</p></blockquote><hr><h2 id="阶段-f可选模板渲染服务器端渲染一个简单页面">6. 阶段F（可选）：模板渲染（服务器端渲染一个简单页面）</h2><blockquote><p>如果你的服务只做 API，可跳过本节。这里展示如何用 <strong>EJS</strong>渲染模板。</p></blockquote><h3 id="安装依赖">6.1 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-views ejs</span><br></pre></td></tr></table></figure><h3 id="目录结构新增-views">6.2 目录结构新增 <code>views/</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ routes/</span><br><span class="line">│  └─ index.mjs</span><br><span class="line">├─ public/</span><br><span class="line">│  └─ index.html</span><br><span class="line">└─ views/</span><br><span class="line">   └─ home.ejs</span><br></pre></td></tr></table></figure><p><code>views/home.ejs</code>： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;EJS Demo&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;服务器时间：&lt;%= now %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="在-app.mjs-配置视图中间件">6.3 在 <code>app.mjs</code>配置视图中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段F）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> views <span class="keyword">from</span> <span class="string">'koa-views'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> { fileURLToPath } <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">try</span> { <span class="keyword">await</span> <span class="title function_">next</span>(); } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置视图目录与模板引擎</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">views</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'views'</span>), { <span class="attr">extension</span>: <span class="string">'ejs'</span> }));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：F（支持 EJS 模板渲染）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h3 id="在路由中渲染一个页面">6.4 在路由中渲染一个页面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段F，新增 SSR 路由）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...前面的接口保留</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /page/home -&gt; 渲染 EJS 模板（注意：此路由无 /api 前缀更合适，这里仅演示）</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/page/home'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">'home'</span>, {</span><br><span class="line">    <span class="attr">title</span>: <span class="string">'EJS 模板渲染示例'</span>,</span><br><span class="line">    <span class="attr">now</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">  });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><hr><h2 id="阶段-g逐步rest-化-用内存数组先做-crud">7. 阶段 G：逐步“REST 化”—— 用内存数组先做 CRUD</h2><blockquote><p>先<strong>不接数据库</strong>，用内存数组模拟数据源，把一套用户资源的CRUD 接口打通，理解 REST 的路径与方法约定。</p></blockquote><h3 id="新建-routesusers.mjs">7.1 新建<code>routes/users.mjs</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/users.mjs（阶段G）</span></span><br><span class="line"><span class="comment">// 目标：实现 RESTful 风格的用户资源接口（内存模拟数据库）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api/users'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个内存数组模拟“数据库表”</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Alice'</span>, <span class="attr">age</span>: <span class="number">20</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bob'</span>,   <span class="attr">age</span>: <span class="number">22</span> }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具：生成新ID（简单起见）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">nextId</span> = (<span class="params"></span>) =&gt; (users.<span class="property">length</span> ? users[users.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users  -&gt; 列表</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: users };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users/:id  -&gt; 详情</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (!user) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  }</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: user };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /api/users  -&gt; 新增</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">const</span> newUser = { <span class="attr">id</span>: <span class="title function_">nextId</span>(), name, age };</span><br><span class="line">  users.<span class="title function_">push</span>(newUser);</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">201</span>; <span class="comment">// 201：已创建</span></span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">201</span>, <span class="attr">data</span>: newUser };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PUT /api/users/:id  -&gt; 全量更新</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name 与 age'</span>);</span><br><span class="line">  users[idx] = { id, name, age };</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: users[idx] };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PATCH /api/users/:id -&gt; 部分更新（可选）</span></span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> patch = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (!user) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(user, patch);</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: user };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE /api/users/:id -&gt; 删除</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  <span class="keyword">const</span> deleted = users.<span class="title function_">splice</span>(idx, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: deleted };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="在-app.mjs-中注册新路由文件">7.2 在 <code>app.mjs</code>中注册新路由文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段G）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> { fileURLToPath } <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> baseRouter <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"><span class="keyword">import</span> usersRouter <span class="keyword">from</span> <span class="string">'./routes/users.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">try</span> { <span class="keyword">await</span> <span class="title function_">next</span>(); } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册多个路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(baseRouter.<span class="title function_">routes</span>()).<span class="title function_">use</span>(baseRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line">app.<span class="title function_">use</span>(usersRouter.<span class="title function_">routes</span>()).<span class="title function_">use</span>(usersRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：G（RESTful 内存版 users 资源）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p><strong>测试：</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">curl http://localhost:3000/api/users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情</span></span><br><span class="line">curl http://localhost:3000/api/users/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">curl -X POST http://localhost:3000/api/users \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'{"name":"Carol","age":28}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">curl -X PUT http://localhost:3000/api/users/1 \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'{"name":"Alice Updated","age":21}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">curl -X DELETE http://localhost:3000/api/users/2</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>补充：CORS</strong> 若前端与后端不在同一域名/端口，需开启CORS： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/cors</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">'@koa/cors'</span>;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="如何实现数据库的增删改查cura">7.3如何实现数据库的增删改查(CURA)</h3><p>数据库的四个基本功能</p><table><thead><tr><th>方法</th><th>描述</th><th>对应 SQL</th></tr></thead><tbody><tr><td>Create</td><td>新增一条记录</td><td>INSERT</td></tr><tr><td>Read</td><td>查询记录</td><td>SELECT</td></tr><tr><td>Update</td><td>更新记录</td><td>UPDATE</td></tr><tr><td>Delete</td><td>删除记录</td><td>DELETE</td></tr></tbody></table><p>在 RESTful API 中，常用 HTTP 方法对应 CRUD：</p><table><thead><tr><th>HTTP 方法</th><th>路径</th><th>CRUD</th></tr></thead><tbody><tr><td>GET</td><td>/api/users</td><td>查询所有用户</td></tr><tr><td>GET</td><td>/api/users/:id</td><td>查询单个用户</td></tr><tr><td>POST</td><td>/api/users</td><td>新增用户</td></tr><tr><td>PUT</td><td>/api/users/:id</td><td>全量更新用户</td></tr><tr><td>PATCH</td><td>/api/users/:id</td><td>部分更新用户</td></tr><tr><td>DELETE</td><td>/api/users/:id</td><td>删除用户</td></tr></tbody></table><p>首先在根目录创建<code>.env</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DB_HOST</span>=localhost</span><br><span class="line"><span class="attr">DB_USER</span>=root</span><br><span class="line"><span class="attr">DB_PASSWORD</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">DB_NAME</span>=testdb</span><br></pre></td></tr></table></figure><p>创建数据库模块<code>database/mysqldb.mjs</code>:</p><h2 id="section"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql <span class="keyword">from</span> <span class="string">'mysql2/promise'</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">'dotenv'</span>;</span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>({</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">user</span>: process.<span class="property">env</span>.<span class="property">DB_USER</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">queueLimit</span>: <span class="number">0</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用 SQL 查询函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">sql, params</span>) {</span><br><span class="line">  <span class="keyword">const</span> [results] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, params);</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------- 用户增删改查 -----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllUsers</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT * FROM users'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 ID 获取用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUserById</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT * FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">return</span> results[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">name, age</span>) {</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'INSERT INTO users (name, age) VALUES (?, ?)'</span>, [name, age]);</span><br><span class="line">  <span class="keyword">return</span> { <span class="attr">id</span>: result.<span class="property">insertId</span>, name, age };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateUser</span>(<span class="params">id, name, age</span>) {</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'UPDATE users SET name = ?, age = ? WHERE id = ?'</span>, [name, age, id]);</span><br><span class="line">  <span class="keyword">return</span> { id, name, age };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteUser</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'DELETE FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">return</span> result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><h2 id="阶段-h重构为-mvcmodel-view-controller分层">8. 阶段 H：重构为MVC（Model-View-Controller）分层</h2><blockquote><p>现在把“路由里写业务”的代码拆分：<strong>路由仅负责匹配路径</strong>、<strong>Controller负责接入/出参与校验</strong>、<strong>Service负责业务</strong>、<strong>Model负责数据存储</strong>（此处先用内存/假数据，下一步再换 MySQL）。</p></blockquote><h3 id="目录调整">8.1 目录调整</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ routes/</span><br><span class="line">│  ├─ index.mjs</span><br><span class="line">│  └─ users.mjs       # 现在只保留路径定义和与 controller 的绑定</span><br><span class="line">├─ controllers/</span><br><span class="line">│  └─ userController.mjs</span><br><span class="line">├─ services/</span><br><span class="line">│  └─ userService.mjs</span><br><span class="line">├─ models/</span><br><span class="line">│  └─ userModel.mjs   # 此阶段仍用内存数组模拟 DB</span><br><span class="line">└─ public/</span><br></pre></td></tr></table></figure><h3 id="modelsusermodel.mjs数据访问层">8.2<code>models/userModel.mjs</code>（数据访问层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/userModel.mjs（阶段H - Model 层）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此处仍然用内存数组模拟数据库。</span></span><br><span class="line"><span class="comment"> * 下一阶段会把这里的实现换成 MySQL 版本，但对外暴露的方法名尽量保持一致，</span></span><br><span class="line"><span class="comment"> * 这样 Controller/Service 基本不用改动，实现“可替换的数据层”。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Alice'</span>, <span class="attr">age</span>: <span class="number">20</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bob'</span>,   <span class="attr">age</span>: <span class="number">22</span> }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">nextId</span> = (<span class="params"></span>) =&gt; (users.<span class="property">length</span> ? users[users.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findAll</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> users;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findById</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id) || <span class="literal">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">{ name, age }</span>) {</span><br><span class="line">  <span class="keyword">const</span> user = { <span class="attr">id</span>: <span class="title function_">nextId</span>(), name, age };</span><br><span class="line">  users.<span class="title function_">push</span>(user);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">id, { name, age }</span>) {</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  users[idx] = { id, name, age };</span><br><span class="line">  <span class="keyword">return</span> users[idx];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">id, patchObj</span>) {</span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(user, patchObj);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">splice</span>(idx, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>直接调用数据库增删改查函数，但保持原来的 RESTful API 路由结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/users.mjs（阶段G -&gt; 数据库版）</span></span><br><span class="line"><span class="comment">// 目标：实现 RESTful 风格的用户资源接口，直接操作 MySQL 数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="comment">// 从 mysqldb.mjs 导入封装好的增删改查函数</span></span><br><span class="line"><span class="keyword">import</span> { getAllUsers, getUserById, createUser, updateUser, deleteUser } <span class="keyword">from</span> <span class="string">'../database/mysqldb.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api/users'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------- RESTful 路由 -----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users  -&gt; 获取用户列表</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title function_">getAllUsers</span>(); <span class="comment">// 调用数据库查询所有用户</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: users };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users/:id  -&gt; 根据 ID 获取用户详情</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">getUserById</span>(id); <span class="comment">// 调用数据库查询单个用户</span></span><br><span class="line">    <span class="keyword">if</span> (!user) {</span><br><span class="line">      ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    }</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: user };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /api/users  -&gt; 新增用户</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="title function_">createUser</span>(name, age); <span class="comment">// 调用数据库新增用户</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">201</span>; <span class="comment">// 201：已创建</span></span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">201</span>, <span class="attr">data</span>: newUser };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PUT /api/users/:id  -&gt; 全量更新用户</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> <span class="title function_">updateUser</span>(id, name, age); <span class="comment">// 调用数据库更新</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: updatedUser };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PATCH /api/users/:id  -&gt; 部分更新用户</span></span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> patch = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> existingUser = <span class="keyword">await</span> <span class="title function_">getUserById</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (!existingUser) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并已有数据与更新数据</span></span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> <span class="title function_">updateUser</span>(id, patch.<span class="property">name</span> ?? existingUser.<span class="property">name</span>, patch.<span class="property">age</span> ?? existingUser.<span class="property">age</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: updatedUser };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE /api/users/:id  -&gt; 删除用户</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> success = <span class="keyword">await</span> <span class="title function_">deleteUser</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (!success) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">`用户 <span class="subst">${id}</span> 已删除`</span> };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="servicesuserservice.mjs业务层">8.3<code>services/userService.mjs</code>（业务层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/userService.mjs（阶段H - Service 层）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层：进行业务规则校验（示例简单化），</span></span><br><span class="line"><span class="comment"> * 将 Controller 的输入转为 Model 层所需格式；</span></span><br><span class="line"><span class="comment"> * 对 Model 输出进行二次处理（如脱敏、聚合等）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">'../models/userModel.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">listUsers</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findById</span>(id);</span><br><span class="line">  <span class="keyword">return</span> user; <span class="comment">// 可添加“脱敏”等处理</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">{ name, age }</span>) {</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>({ name, age });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateUser</span>(<span class="params">id, { name, age }</span>) {</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'参数不合法：需要 name 与 age'</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">const</span> updated = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">update</span>(id, { name, age });</span><br><span class="line">  <span class="keyword">if</span> (!updated) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> updated;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patchUser</span>(<span class="params">id, patchObj</span>) {</span><br><span class="line">  <span class="keyword">const</span> updated = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">patch</span>(id, patchObj);</span><br><span class="line">  <span class="keyword">if</span> (!updated) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> updated;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">removeUser</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> deleted = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">remove</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (!deleted) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> deleted;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="controllersusercontroller.mjs控制器层">8.4<code>controllers/userController.mjs</code>（控制器层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controllers/userController.mjs（阶段H - Controller 层）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器：仅负责与 Koa 的 ctx 交互（取参、设响应、设状态码）。</span></span><br><span class="line"><span class="comment"> * 真正的业务逻辑不写在这里，全部委托给 Service。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">UserService</span> <span class="keyword">from</span> <span class="string">'../services/userService.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">list</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">listUsers</span>();</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">detail</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">getUser</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (!data) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  }</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">createUser</span>({ name, age });</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">201</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">201</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">updateUser</span>(id, { name, age });</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> patchObj = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">patchUser</span>(id, patchObj);</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">removeUser</span>(id);</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="routesusers.mjs只负责绑定路径到-controller">8.5<code>routes/users.mjs</code>（只负责绑定路径到 Controller）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/users.mjs（阶段H）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">UserController</span> <span class="keyword">from</span> <span class="string">'../controllers/userController.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api/users'</span> });</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/'</span>,     <span class="title class_">UserController</span>.<span class="property">list</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/:id'</span>,  <span class="title class_">UserController</span>.<span class="property">detail</span>);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/'</span>,    <span class="title class_">UserController</span>.<span class="property">create</span>);</span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">'/:id'</span>,  <span class="title class_">UserController</span>.<span class="property">update</span>);</span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">'/:id'</span>,<span class="title class_">UserController</span>.<span class="property">patch</span>);</span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">'/:id'</span>, <span class="title class_">UserController</span>.<span class="property">remove</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>至此，已经是一个<strong>结构清晰</strong>的 REST +MVC（无数据库版）。</p></blockquote><hr><h2 id="阶段-i把-model-换成-mysqlmysql2promise-连接池">9. 阶段 I：把Model 换成 MySQL（mysql2/promise + 连接池）</h2><h3 id="安装依赖-1">9.1 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql2 dotenv</span><br></pre></td></tr></table></figure><h3 id="新增-databasemysql.mjs连接池与-query-封装">9.2 新增<code>database/mysql.mjs</code>（连接池与 query 封装）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// database/mysql.mjs（阶段I - 数据库基础封装）</span></span><br><span class="line"><span class="keyword">import</span> mysql <span class="keyword">from</span> <span class="string">'mysql2/promise'</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">'dotenv'</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>(); <span class="comment">// 读取 .env</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池（推荐生产环境使用连接池，而非单连接）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>({</span><br><span class="line">  <span class="attr">host</span>:     process.<span class="property">env</span>.<span class="property">DB_HOST</span> || <span class="string">'localhost'</span>,</span><br><span class="line">  <span class="attr">user</span>:     process.<span class="property">env</span>.<span class="property">DB_USER</span> || <span class="string">'root'</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span> || <span class="string">'123456'</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span> || <span class="string">'testdb'</span>,</span><br><span class="line">  <span class="attr">port</span>:     <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span> || <span class="number">3306</span>),</span><br><span class="line">  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">queueLimit</span>: <span class="number">0</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的 SQL 执行函数：自动格式化参数，返回 rows</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">sql, params = []</span>) {</span><br><span class="line">  <span class="keyword">const</span> [rows] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, params);</span><br><span class="line">  <span class="keyword">return</span> rows;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="在项目根目录创建-.env">9.3 在项目根目录创建<code>.env</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB_HOST=localhost</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASSWORD=123456</span><br><span class="line">DB_NAME=testdb</span><br></pre></td></tr></table></figure><h3 id="初始化数据表一次性">9.4 初始化数据表（一次性）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> users (</span><br><span class="line">  id   <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  age  <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="重写-modelsusermodel.mjs-为-mysql-实现">9.5 重写<code>models/userModel.mjs</code> 为 MySQL 实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/userModel.mjs（阶段I - MySQL 版本 Model 层）</span></span><br><span class="line"><span class="keyword">import</span> { query } <span class="keyword">from</span> <span class="string">'../database/mysql.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findAll</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 返回全部用户</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT id, name, age, created_at FROM users ORDER BY id ASC'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findById</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> rows = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT id, name, age, created_at FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">return</span> rows[<span class="number">0</span>] || <span class="literal">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">{ name, age }</span>) {</span><br><span class="line">  <span class="comment">// 使用 ? 占位符防止 SQL 注入</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'INSERT INTO users (name, age) VALUES (?, ?)'</span>, [name, age]);</span><br><span class="line">  <span class="comment">// 插入成功后返回新记录</span></span><br><span class="line">  <span class="keyword">const</span> inserted = <span class="keyword">await</span> <span class="title function_">findById</span>(result.<span class="property">insertId</span>);</span><br><span class="line">  <span class="keyword">return</span> inserted;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">id, { name, age }</span>) {</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'UPDATE users SET name = ?, age = ? WHERE id = ?'</span>, [name, age, id]);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">affectedRows</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">findById</span>(id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">id, patchObj</span>) {</span><br><span class="line">  <span class="comment">// 动态拼接字段（示例简化，仅允许 name/age）</span></span><br><span class="line">  <span class="keyword">const</span> fields = [];</span><br><span class="line">  <span class="keyword">const</span> params = [];</span><br><span class="line">  <span class="keyword">if</span> (patchObj.<span class="property">name</span> !== <span class="literal">undefined</span>) { fields.<span class="title function_">push</span>(<span class="string">'name = ?'</span>); params.<span class="title function_">push</span>(patchObj.<span class="property">name</span>); }</span><br><span class="line">  <span class="keyword">if</span> (patchObj.<span class="property">age</span> !== <span class="literal">undefined</span>)  { fields.<span class="title function_">push</span>(<span class="string">'age = ?'</span>);  params.<span class="title function_">push</span>(patchObj.<span class="property">age</span>); }</span><br><span class="line">  <span class="keyword">if</span> (fields.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">findById</span>(id); <span class="comment">// 无变化</span></span><br><span class="line">  params.<span class="title function_">push</span>(id);</span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">`UPDATE users SET <span class="subst">${fields.join(<span class="string">', '</span>)}</span> WHERE id = ?`</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql, params);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">affectedRows</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">findById</span>(id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> toDelete = <span class="keyword">await</span> <span class="title function_">findById</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (!toDelete) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'DELETE FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">affectedRows</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> toDelete;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><blockquote><p><strong>无感替换数据层</strong>：我们没有改 Controller/Service的代码，因为它们的调用接口未变。这就是解耦的好处。</p></blockquote><h3 id="运行与测试">9.6 运行与测试</h3><ol type="1"><li>确认本机 MySQL 已启动，并在 <code>.env</code> 中配置正确；</li><li>执行上面的建表 SQL；</li><li>启动服务：<code>npm run dev</code>；</li><li>使用前文的 <code>curl</code> 测试 CRUD 接口；现在数据真实写入MySQL！</li></ol><hr><h2 id="阶段-j额外增强可选但常用">10. 阶段J：额外增强（可选但常用）</h2><h3 id="cors跨域">10.1 CORS（跨域）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/cors</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">'@koa/cors'</span>;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>({ <span class="attr">origin</span>: <span class="string">'*'</span> })); <span class="comment">// 生产建议更精细控制</span></span><br></pre></td></tr></table></figure><h3 id="请求参数校验轻量示例">10.2 请求参数校验（轻量示例）</h3><blockquote><p>在 Service 层已经有简单校验；进一步可以使用 <code>zod</code>,<code>joi</code>, <code>yup</code> 等库统一校验。</p></blockquote><h3 id="分页-模糊查询以-mysql-为例改造-model">10.3 分页 &amp;模糊查询（以 MySQL 为例，改造 Model）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：分页查询（page 从 1 开始）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findPaged</span>(<span class="params">{ page = <span class="number">1</span>, pageSize = <span class="number">10</span>, keyword = <span class="string">''</span> }</span>) {</span><br><span class="line">  <span class="keyword">const</span> offset = (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">  <span class="keyword">const</span> where  = keyword ? <span class="string">'WHERE name LIKE ?'</span> : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> params = keyword ? [<span class="string">`%<span class="subst">${keyword}</span>%`</span>, pageSize, offset] : [pageSize, offset];</span><br><span class="line">  <span class="keyword">const</span> rows   = <span class="keyword">await</span> <span class="title function_">query</span>(</span><br><span class="line">    <span class="string">`SELECT id, name, age, created_at FROM users <span class="subst">${where}</span> ORDER BY id ASC LIMIT ? OFFSET ?`</span>,</span><br><span class="line">    params</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> totalRows = <span class="keyword">await</span> <span class="title function_">query</span>(</span><br><span class="line">    <span class="string">`SELECT COUNT(*) AS c FROM users <span class="subst">${keyword ? <span class="string">'WHERE name LIKE ?'</span> : <span class="string">''</span>}</span>`</span>,</span><br><span class="line">    keyword ? [<span class="string">`%<span class="subst">${keyword}</span>%`</span>] : []</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> { <span class="attr">list</span>: rows, <span class="attr">total</span>: totalRows[<span class="number">0</span>].<span class="property">c</span>, page, pageSize };</span><br><span class="line">}</span><br></pre></td></tr></table></figure><hr><h2 id="常见坑位排查faq">11. 常见坑位排查（FAQ）</h2><ul><li><strong><code>SyntaxError: Cannot use import statement outside a module</code></strong><ul><li><code>package.json</code> 是否含<code>"type":"module"</code>？或者文件是否使用 <code>.mjs</code>？</li></ul></li><li><strong><code>Error: Cannot find module 'xxx'</code></strong><ul><li>依赖没装或装在了错误目录：执行<code>npm i xxx</code>，确保命令行的当前目录正确。</li></ul></li><li><strong><code>ctx.request.body</code> 是<code>undefined</code></strong><ul><li>是否 <code>app.use(bodyParser())</code>放在了路由前面？是否设置了正确的 <code>Content-Type</code>？</li></ul></li><li><strong>中文乱码</strong><ul><li>前端/客户端请求与响应头编码问题；确保响应头<code>Content-Type</code> 与实际内容一致（Koa 会自动根据<code>ctx.body</code> 设定）。</li></ul></li><li><strong>MySQL 连接失败</strong><ul><li>检查 <code>.env</code>配置、数据库是否启动、端口是否被占用、防火墙、权限是否允许远程连接。</li></ul></li></ul><hr><h2 id="最终项目结构参考到阶段-i-为止">12. 最终项目结构参考（到阶段 I为止）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ public/</span><br><span class="line">│  └─ index.html</span><br><span class="line">├─ views/                # 若使用模板渲染</span><br><span class="line">│  └─ home.ejs</span><br><span class="line">├─ routes/</span><br><span class="line">│  ├─ index.mjs</span><br><span class="line">│  ├─ users.mjs</span><br><span class="line">├─ controllers/</span><br><span class="line">│  └─ userController.mjs</span><br><span class="line">├─ services/</span><br><span class="line">│  └─ userService.mjs</span><br><span class="line">├─ models/</span><br><span class="line">│  └─ userModel.mjs      # 阶段H：内存; 阶段I：MySQL</span><br><span class="line">├─ database/</span><br><span class="line">│  └─ mysql.mjs</span><br><span class="line">├─ .env</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure><hr><h2 id="一句话回顾每个阶段">13. 一句话回顾每个阶段</h2><ul><li><strong>A</strong>：只有一个文件的“Hello Koa”</li><li><strong>B</strong>：加上<code>koa-router</code>，不同路径返回不同内容</li><li><strong>C</strong>：解析请求体，拥有第一个 POST 接口</li><li><strong>D</strong>：全局错误处理 + 访问日志，理解“洋葱模型”</li><li><strong>E</strong>：静态资源与 favicon</li><li><strong>F</strong>：（可选）EJS 模板渲染</li><li><strong>G</strong>：RESTful 内存版 users 资源（CRUD）</li><li><strong>H</strong>：重构为 MVC（Controller/Service/Model 分层）</li><li><strong>I</strong>：替换 Model → MySQL（真实落库）</li><li><strong>J</strong>：加强：CORS、校验、分页等</li></ul>]]></content>
    
    
    <summary type="html">本文介绍Koa框架的基本使用</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="Koa" scheme="http://example.com/tags/Koa/"/>
    
    <category term="backen" scheme="http://example.com/tags/backen/"/>
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Latex全语法使用</title>
    <link href="http://example.com/2025/08/18/latex_2/"/>
    <id>http://example.com/2025/08/18/latex_2/</id>
    <published>2025-08-18T09:20:00.000Z</published>
    <updated>2025-08-25T04:58:28.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="latex-文档基本格式">1. LaTeX 文档基本格式</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}   <span class="comment">% 文档类型：article, report, book, beamer 等</span></span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]{inputenc} <span class="comment">% 支持中文时建议用 ctex 包</span></span><br><span class="line"><span class="keyword">\usepackage</span>{amsmath, amssymb} <span class="comment">% 数学符号扩展</span></span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx} <span class="comment">% 插入图片</span></span><br><span class="line"><span class="keyword">\usepackage</span>{listings} <span class="comment">% 插入代码</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}   <span class="comment">% 代码高亮需要颜色</span></span><br><span class="line"><span class="keyword">\usepackage</span>{hyperref} <span class="comment">% 超链接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>{LaTeX 学习示例}</span><br><span class="line"><span class="keyword">\author</span>{你的名字}</span><br><span class="line"><span class="keyword">\date</span>{<span class="keyword">\today</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}  <span class="comment">% 正文开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\maketitle</span>  <span class="comment">% 输出标题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{引言}</span><br><span class="line">这是 LaTeX 的一个简单示例。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：</p></blockquote><ul><li><code>\documentclass{article}</code> 定义了文档类型。</li><li><code>\usepackage{}</code> 用来导入扩展包。</li><li><code>\section{}</code> 表示章节。</li><li><code>\maketitle</code> 会根据上面<code>\title</code>、<code>\author</code>、<code>\date</code>生成标题页。</li></ul><hr><h2 id="数学公式">2. 数学公式</h2><p>LaTeX 在数学公式排版方面很强大。</p><h3 id="行内公式">2.1 行内公式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个行内公式：<span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>。</span><br></pre></td></tr></table></figure><h3 id="独立公式">2.2 独立公式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line">E = mc<span class="built_in">^</span>2</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><h3 id="多行公式-amsmath-提供">2.3 多行公式 (amsmath 提供)</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{align}</span><br><span class="line">a<span class="built_in">^</span>2 + b<span class="built_in">^</span>2 <span class="built_in">&amp;</span>= c<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line">e<span class="built_in">^</span>{i<span class="keyword">\pi</span>} + 1 <span class="built_in">&amp;</span>= 0</span><br><span class="line"><span class="keyword">\end</span>{align}</span><br></pre></td></tr></table></figure><hr><h2 id="插入图片">3. 插入图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{figure}[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\textwidth</span>]{example.png}</span><br><span class="line">    <span class="keyword">\caption</span>{这是一个示例图片}</span><br><span class="line">    <span class="keyword">\label</span>{fig:example}</span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：</p></blockquote><ul><li><code>example.png</code> 必须和 <code>.tex</code>文件在同一目录。</li><li><code>width=0.5\textwidth</code> 控制大小。</li><li><code>\caption</code> 是图注，<code>\label</code> 用来引用。</li><li>之后可用 <code>见图~\ref{fig:example}</code> 来自动编号。</li></ul><hr><h2 id="插入代码">4. 插入代码</h2><p>LaTeX 用 <code>listings</code> 包来展示代码：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{lstlisting}[language=Python, caption=Python 示例, label={lst:py}]</span><br><span class="line">def hello():</span><br><span class="line">    print("Hello, LaTeX!")</span><br><span class="line"><span class="keyword">\end</span>{lstlisting}</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：</p></blockquote><ul><li><code>language=Python</code> 可以换成 <code>C</code>,<code>C++</code>, <code>Java</code> 等。</li><li><code>caption</code> 给代码块加标题，<code>label</code>方便引用。</li></ul><p>还可以加颜色主题：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\lstset</span>{</span><br><span class="line">  basicstyle=<span class="keyword">\ttfamily</span><span class="keyword">\small</span>,</span><br><span class="line">  keywordstyle=<span class="keyword">\color</span>{blue},</span><br><span class="line">  commentstyle=<span class="keyword">\color</span>{green!50!black},</span><br><span class="line">  stringstyle=<span class="keyword">\color</span>{red},</span><br><span class="line">  numbers=left,</span><br><span class="line">  numberstyle=<span class="keyword">\tiny</span>,</span><br><span class="line">  frame=single,</span><br><span class="line">  breaklines=true</span><br><span class="line">}</span><br></pre></td></tr></table></figure><hr><h2 id="表格">5. 表格</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{table}[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>{tabular}{|c|c|c|}</span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        姓名 <span class="built_in">&amp;</span> 年龄 <span class="built_in">&amp;</span> 成绩 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        张三 <span class="built_in">&amp;</span> 18 <span class="built_in">&amp;</span> 95 <span class="keyword">\\</span></span><br><span class="line">        李四 <span class="built_in">&amp;</span> 19 <span class="built_in">&amp;</span> 88 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>{tabular}</span><br><span class="line">    <span class="keyword">\caption</span>{学生信息表}</span><br><span class="line">    <span class="keyword">\label</span>{tab:student}</span><br><span class="line"><span class="keyword">\end</span>{table}</span><br></pre></td></tr></table></figure><hr><h2 id="超链接">6. 超链接</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\href</span>{<span class="link">https://www.latex-project.org</span>}{LaTeX 官网}</span><br></pre></td></tr></table></figure><hr><h2 id="中文支持">7. 中文支持</h2><p>如果你写中文文档，建议用 <code>ctex</code> 包：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}  <span class="comment">% 代替 article，更好支持中文</span></span><br></pre></td></tr></table></figure><p>这样就能直接写中文了。</p><hr><h2 id="有序列表和无序列表">8.有序列表和无序列表</h2><h3 id="无序列表itemize">8.1 无序列表（itemize）</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{itemize}</span><br><span class="line">    <span class="keyword">\item</span> 这是第一点</span><br><span class="line">    <span class="keyword">\item</span> 这是第二点</span><br><span class="line">    <span class="keyword">\item</span> 这是第三点</span><br><span class="line"><span class="keyword">\end</span>{itemize}</span><br></pre></td></tr></table></figure><p>默认显示为黑色小圆点：</p><ul><li>这是第一点</li><li>这是第二点</li><li>这是第三点</li></ul><h3 id="有序列表enumerate">8.2 有序列表（enumerate）</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{enumerate}</span><br><span class="line">    <span class="keyword">\item</span> 这是第一点</span><br><span class="line">    <span class="keyword">\item</span> 这是第二点</span><br><span class="line">    <span class="keyword">\item</span> 这是第三点</span><br><span class="line"><span class="keyword">\end</span>{enumerate}</span><br></pre></td></tr></table></figure><p>默认显示为数字编号：</p><ol type="1"><li>这是第一点</li><li>这是第二点</li><li>这是第三点</li></ol><h3 id="自定义编号样式">8.3 自定义编号样式</h3><p>借助 <code>enumitem</code> 包可以更灵活：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{enumitem}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{enumerate}[label=<span class="keyword">\roman</span>*.]  <span class="comment">% 罗马数字</span></span><br><span class="line">    <span class="keyword">\item</span> 第一条</span><br><span class="line">    <span class="keyword">\item</span> 第二条</span><br><span class="line"><span class="keyword">\end</span>{enumerate}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{enumerate}[label=(<span class="keyword">\alph</span>*)]  <span class="comment">% 小写字母</span></span><br><span class="line">    <span class="keyword">\item</span> 第一条</span><br><span class="line">    <span class="keyword">\item</span> 第二条</span><br><span class="line"><span class="keyword">\end</span>{enumerate}</span><br></pre></td></tr></table></figure><p>结果会变成：</p><ul><li>(i), (ii), (iii)…</li><li>(a), (b), (c)…</li></ul><h3 id="无编号列表只换行没有点数字">8.4无编号列表（只换行，没有点/数字）</h3><p>如果你只是想 <strong>逐行列出</strong>，但不要前面的符号，可以用<code>description</code> 或者自定义环境：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{itemize}[label={}] <span class="comment">% label={} 表示不要符号</span></span><br><span class="line">    <span class="keyword">\item</span> 第一行</span><br><span class="line">    <span class="keyword">\item</span> 第二行</span><br><span class="line">    <span class="keyword">\item</span> 第三行</span><br><span class="line"><span class="keyword">\end</span>{itemize}</span><br></pre></td></tr></table></figure><p>或者更简单：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一点 <span class="keyword">\\</span></span><br><span class="line">第二点 <span class="keyword">\\</span></span><br><span class="line">第三点</span><br></pre></td></tr></table></figure><p>（这里 <code>\\</code> 表示换行）</p><h2 id="bibtex-使用">9. BibTeX 使用</h2><p>在学术写作中，<strong>参考文献管理</strong>是必不可少的。LaTeX 提供了<code>BibTeX</code> 来管理参考文献，它的好处是：</p><ul><li>文献集中存放在一个 <code>.bib</code> 文件里，方便复用；</li><li>可以自动格式化（APA, IEEE, GB/T 7714 等）；</li><li>引用时只需 <code>\cite{}</code> 即可，省去手动编号。</li></ul><h3 id="建立-.bib-文件">9.1 建立 <code>.bib</code> 文件</h3><p>新建一个 <code>refs.bib</code>文件，里面存放参考文献信息。常见条目类型有：</p><ul><li><code>@article</code>：期刊文章</li><li><code>@book</code>：书籍</li><li><code>@inproceedings</code>：会议论文</li><li><code>@misc</code>：其他（网页、报JavaScript (ES6) codesnippets告等）</li></ul><p><strong>示例：refs.bib</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@article{einstein1905,</span><br><span class="line">  author    = {Albert Einstein},</span><br><span class="line">  title     = {Zur Elektrodynamik bewegter Körper},</span><br><span class="line">  journal   = {Annalen der Physik},</span><br><span class="line">  volume    = {17},</span><br><span class="line">  number    = {10},</span><br><span class="line">  pages     = {891--921},</span><br><span class="line">  year      = {1905},</span><br><span class="line">  publisher = {Wiley}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@book{knuth1984,</span><br><span class="line">  author    = {Donald E. Knuth},</span><br><span class="line">  title     = {The TeXbook},</span><br><span class="line">  year      = {1984},</span><br><span class="line">  publisher = {Addison-Wesley}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@misc{latexproject,</span><br><span class="line">  author    = {LaTeX Project},</span><br><span class="line">  title     = {LaTeX Project Website},</span><br><span class="line">  year      = {2025},</span><br><span class="line">  url       = {https://www.latex-project.org/}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="在主-.tex-文件中引用">9.2 在主 <code>.tex</code> 文件中引用</h3><p>在你的 <code>main.tex</code> 中：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]{inputenc}</span><br><span class="line"><span class="keyword">\usepackage</span>{cite}   <span class="comment">% 文献引用宏包</span></span><br><span class="line"><span class="keyword">\usepackage</span>{hyperref} <span class="comment">% 让文献引用可点击</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line">爱因斯坦的相对论论文发表于1905年~<span class="keyword">\cite</span>{einstein1905}。</span><br><span class="line"><span class="keyword">\LaTeX</span> 的官方文档在~<span class="keyword">\cite</span>{latexproject} 可以找到。</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成参考文献</span></span><br><span class="line"><span class="keyword">\bibliographystyle</span>{plain}   <span class="comment">% 参考文献格式：plain, unsrt, abbrv, ieeetr 等</span></span><br><span class="line"><span class="keyword">\bibliography</span>{refs}         <span class="comment">% refs.bib 文件名，不要写扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure><h3 id="编译流程">9.3 编译流程</h3><p>和普通 <code>.tex</code> 不同，使用 <code>bibtex</code>时要多一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pdflatex main.tex</span><br><span class="line">bibtex main</span><br><span class="line">pdflatex main.tex</span><br><span class="line">pdflatex main.tex</span><br></pre></td></tr></table></figure><p>解释：</p><ol type="1"><li>第一次 <code>pdflatex</code> 会扫描引用并生成 <code>.aux</code>文件；</li><li><code>bibtex main</code> 会读取 <code>.aux</code> 文件，从<code>refs.bib</code> 抽取对应条目生成 <code>.bbl</code> 文件；</li><li>再跑两次 <code>pdflatex</code> 让引用编号和文献列表都正确显示。</li></ol><h3 id="常见参考文献样式">9.4 常见参考文献样式</h3><ul><li><code>plain</code>：作者字母顺序，数字编号</li><li><code>unsrt</code>：按引用顺序编号</li><li><code>abbrv</code>：作者名缩写</li><li><code>ieeetr</code>：IEEE 风格</li><li><code>apalike</code>：APA 风格</li></ul><p>例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>{ieeetr}</span><br></pre></td></tr></table></figure><h3 id="中文参考文献">9.5 中文参考文献</h3><p>中文参考文献推荐用 <strong>GB/T 7714 样式</strong>（国标）：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[backend=bibtex,style=gb7714-2015]{biblatex}</span><br><span class="line"><span class="keyword">\bibliography</span>{refs}</span><br></pre></td></tr></table></figure><p>然后在 <code>.bib</code> 文件里可以写中文，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@book{li2020,</span><br><span class="line">  author    = {李四 and 张三},</span><br><span class="line">  title     = {深度学习导论},</span><br><span class="line">  year      = {2020},</span><br><span class="line">  publisher = {清华大学出版社}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这样就能自动生成符合国标的中文参考文献。</p>]]></content>
    
    
    <summary type="html">本文介绍常见的Latex基本语法使用</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="latex" scheme="http://example.com/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>23年数学建模国赛</title>
    <link href="http://example.com/2025/08/12/23%E5%B9%B4%E5%9B%BD%E8%B5%9B/"/>
    <id>http://example.com/2025/08/12/23%E5%B9%B4%E5%9B%BD%E8%B5%9B/</id>
    <published>2025-08-12T07:00:00.000Z</published>
    <updated>2025-08-15T06:31:56.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干理解解读"><strong>题干理解解读</strong></h2><p>(从题干出发的想法)存在变量，keyword：历史销售，需求情况，蔬菜品种，进货价格，“成本加成定价”，商品品相，<spanclass="math inline"><em>s</em><em>a</em><em>l</em><em>e</em> = <em>f</em>(<em>t</em>)</span>(需求侧出发)</p><p>que1:菜类商品不同品类或不同单品之间可能存在一定的关联关系，请分析蔬菜各品类及单品销售量的分布规律及相互关系。</p><p>que2：考虑商超以品类为单位做补货计划，请分析各蔬菜品类的销售总量与成本加成定价的关系，并给出各蔬菜品类未来一周(2023年 7 月 1-7 日)的日补货总量和定价策略，使得商超收益最大</p><p>que3:因蔬菜类商品的销售空间有限，商超希望进一步制定单品的补货计划，要求可售单品总数控制在27-33 个，且各单品订购量满足最小陈列量 2.5 千克的要求。根据 2023年 6 月24-30 日的可售品种，给出 7 月 1日的单品补货量和定价策略，在尽量满足市场对各品类蔬菜商品需求的前提下，使得商超收益最大</p><h2 id="que1"><strong>que1</strong></h2><h3 id="自己的理解"><strong>1.1自己的理解</strong></h3><blockquote><p>看题目的意思应该是要去找到某个类似与矩阵的东西，里面填充各种单品之间的相关系数去得到不同单品之间的相关关系，然后写出不同单品之的分布规律</p></blockquote><ul><li><p>分布规律:按照商品编号进行分类统计，对销售进行求和，绘制出<code>分布型绘图</code>描述销售量关系</p></li><li><p>单品之间的相关关系：这里我考虑是用<code>皮尔逊相关系数矩阵</code>进行解决问题,然后需要去权衡哪些数值对他们的相关系数产生影响呢?</p></li></ul><h3 id="相关论文"><strong>1.2相关论文</strong></h3><ul><li><p>行文特点：</p><ul><li>摘要：首先进行XX算法，算出了XX，得到了XX，然后进行XX(图形绘制数据可视化……)操作，结论</li><li>正文： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先进行数据预处理，剔除无效数据（如退货导致的负销量数据）；然后计算描述性统计量（偏度系数、峰度系数、均值、中位数、标准差等），从数字特征层面分析分布规律；接着通过绘制柱状图、折线图等可视化图表，直观展示销售数据的分布趋势；之后运用相关系数分析（如 Spearman 相关系数）探究品类及单品间的关联关系；最后采用聚类算法（如 K-means++）对单品进行分类，进一步分析不同类别单品的销售特征及关联。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据处理相关：考量分布规律可选取如下数据<code>偏度系数</code>，<code>峰度系数</code>,<code>最小值，最大值，均值，中位数，标准差等常见统计学指标</code></p><p>同时分析规律可以从多角度出发，总销量/日销量等等</p></li><li><p>算法使用：</p><ul><li><p>Spearman相关系数</p><p>正如我之前的想法还挺正确，然后我找到了如下对比</p><table><colgroup><col style="width: 20%" /><col style="width: 39%" /><col style="width: 39%" /></colgroup><thead><tr><th>特征</th><th>Pearson相关系数矩阵</th><th>Spearman相关系数矩阵</th></tr></thead><tbody><tr><td>相关性类型</td><td>线性相关</td><td>单调相关（线性或非线性）</td></tr><tr><td>数据要求</td><td>要求数据正态分布</td><td>无分布要求，非参数方法</td></tr><tr><td>计算基础</td><td>原始数据值</td><td>数据的秩次</td></tr><tr><td>异常值敏感性</td><td>高度敏感</td><td>相对稳健</td></tr><tr><td>适用场景</td><td>线性关系明显的连续变量</td><td>非线性但单调的关系或有序变量</td></tr></tbody></table><p>同时他们两个的公式:</p><p><span class="math display">$$r_{XY} = \frac{\sum_{i=1}^n (X_i - \bar{X})(Y_i -\bar{Y})}{\sqrt{\sum_{i=1}^n (X_i - \bar{X})^2} \sqrt{\sum_{i=1}^n (Y_i- \bar{Y})^2}}$$</span></p><p><span class="math display">$$\rho = 1 - \frac{6 \sum_{i=1}^n d_i^2}{n(n^2 - 1)}$$</span></p><p>实现方法(多组数据得到spearman矩阵):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> spearmanr</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">106</span>, <span class="number">86</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">113</span>, <span class="number">112</span>, <span class="number">110</span>],</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="number">7</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">50</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">17</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">corr_matrix, p_matrix = spearmanr(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Spearman 相关系数矩阵：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pd.DataFrame(corr_matrix, index=data.columns, columns=data.columns))</span><br></pre></td></tr></table></figure></li><li><p>Kmeans++聚类算法</p><p>Kmeans++算法相较于传统的Kmeans聚类算法优化了聚类中心的选取</p><p>实现方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 确定好分成几类</span><br><span class="line">2. 确定好影响变量</span><br><span class="line">3. 丢进spss即可自动聚类生成表单</span><br></pre></td></tr></table></figure></li><li><p>自相关函数ACF(探究分布规律) &gt;通过计算不同滞后阶段的自相关系数，绘制 ACF图，判定销售量时间序列的周期性。例如，发现总销量存在年周期（滞后 12个月处相关性显著）、周周期（滞后 7 天处相关性显著）和日周期（滞后 13小时处相关性显著）。</p><p>自相关系数计算公式: <span class="math display">$$\hat{\rho}(k) =\frac{\frac{1}{T-k} \sum_{t=k+1}^T (y_t - \bar{y})(y_{t-k} -\bar{y})}{\frac{1}{T} \sum_{t=1}^T (y_t - \bar{y})^2}$$</span></p><p>实现方法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据（示例：AR(1)过程）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">y = np.random.normal(size=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    y[t] = <span class="number">0.7</span> * y[t-<span class="number">1</span>] + np.random.normal(<span class="number">0</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制ACF</span></span><br><span class="line">plot_acf(y, lags=<span class="number">20</span>, alpha=<span class="number">0.05</span>)  <span class="comment"># 95%置信区间</span></span><br><span class="line">plt.title(<span class="string">&quot;样本自相关函数（ACF）&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p></li><li><p>时间序列分解模型(探究分布规律):</p><p>首先明确分解是如何分解的<spanclass="math inline"><em>Y</em><sub><em>t</em></sub> = <em>T</em><sub><em>t</em></sub> × <em>S</em><sub><em>t</em></sub> × <em>C</em><sub><em>t</em></sub> × <em>E</em><sub><em>t</em></sub></span>,其中<spanclass="math inline"><em>Y</em><sub><em>t</em></sub></span>为观测值<spanclass="math inline"><em>T</em><sub><em>t</em></sub></span>为趋势成分<spanclass="math inline"><em>S</em><sub><em>T</em></sub></span>为季节性成分<spanclass="math inline"><em>C</em><sub><em>t</em></sub></span>为周期性成分<spanclass="math inline"><em>E</em><sub><em>t</em></sub></span>为随机噪声</p><p>作用:乘法时间序列分解的作用主要是挖掘蔬菜销售量在时间维度上的分布规律。通过将销售量时间序列拆解为趋势、季节性、周期性和随机噪声等成分，能够清晰呈现不同时间颗粒（如年、周、日）下销量的波动特征和变化趋势</p><p>实现方法: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from statsmodels.tsa.seasonal import seasonal_decompose</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备时间序列数据（索引为datetime类型，值为销量）</span></span><br><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;销量数据.csv&#x27;</span>, parse_dates=[<span class="string">&#x27;销售日期&#x27;</span>], index_col=<span class="string">&#x27;销售日期&#x27;</span>)</span><br><span class="line">series = <span class="built_in">df</span>[<span class="string">&#x27;销量(千克)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法时间序列分解（以周周期为例，period=7）</span></span><br><span class="line">result = seasonal_decompose(series, model=<span class="string">&#x27;multiplicative&#x27;</span>, period=7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取各成分</span></span><br><span class="line">trend = result.trend  <span class="comment"># 趋势成分</span></span><br><span class="line">seasonal = result.seasonal  <span class="comment"># 季节性成分</span></span><br><span class="line">residual = result.resid  <span class="comment"># 残差（随机噪声）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化分解结果</span></span><br><span class="line">fig = result.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <imgsrc="https://raw.githubusercontent.com/koen666/image/master/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E8%A7%A3%E6%A8%A1%E5%9E%8B.png"alt="实现效果图" /></p></li><li><p>FP-Growth关联挖掘算法</p><p>这个算法常常用来从大量交易数据中发现频繁项集</p><p>ex:假设有如下交易</p><table><thead><tr><th>交易ID</th><th>购买物品</th></tr></thead><tbody><tr><td>T1</td><td>牛奶，面包，尿布</td></tr><tr><td>T2</td><td>可乐，面包，尿布</td></tr><tr><td>T3</td><td>牛奶，尿布</td></tr><tr><td>T4</td><td>牛奶，可乐，尿布</td></tr><tr><td>T5</td><td>可乐，面包</td></tr></tbody></table><p>设置最小支持度阈值为2 FP-Growth会构建FP-tree，发现频繁项集，比如{尿布}、{牛奶, 尿布}、{面包, 尿布} 等。</p><p>实现方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mlxtend.preprocessing <span class="keyword">import</span> TransactionEncoder</span><br><span class="line"><span class="keyword">from</span> mlxtend.frequent_patterns <span class="keyword">import</span> fpgrowth, association_rules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交易数据</span></span><br><span class="line">transactions = [</span><br><span class="line">    [<span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;cola&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;cola&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;cola&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 编码成布尔矩阵</span></span><br><span class="line">te = TransactionEncoder()</span><br><span class="line">te_ary = te.fit(transactions).transform(transactions)</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(te_ary, columns=te.columns_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 挖掘频繁项集，设最小支持度为0.4</span></span><br><span class="line">freq_itemsets = fpgrowth(df, min_support=<span class="number">0.4</span>, use_colnames=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;频繁项集：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(freq_itemsets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 挖掘关联规则（最小置信度0.7）</span></span><br><span class="line">rules = association_rules(freq_itemsets, metric=<span class="string">&quot;confidence&quot;</span>, min_threshold=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n关联规则：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rules[[<span class="string">&#x27;antecedents&#x27;</span>, <span class="string">&#x27;consequents&#x27;</span>, <span class="string">&#x27;support&#x27;</span>, <span class="string">&#x27;confidence&#x27;</span>, <span class="string">&#x27;lift&#x27;</span>]])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="que2"><strong>que2</strong></h2><h3 id="自己的理解-1"><strong>2.1 自己的理解</strong></h3><p>首先题目要求<code>求解各蔬菜品类的销售总量与成本加成定价的关系</code>，肯定是需要用归化算法去拟合出个函数关系，其次并<code>给出各蔬菜品类未来一周(2023 年 7 月 1-7 日)的日补货总量和定价策略，使得商超收益最大</code>我觉得可以联系ACF值和上述求解得到的函数关系进行定义/利用归化算法解决决策问题</p><h3 id="相关论文-1"><strong>2.2 相关论文</strong></h3><ul><li><p>成本加成定价法</p><p>首先要考虑成本加成定价法和各蔬菜品类的销售总量，我们得先知道什么是成本加成定价法<imgsrc="https://raw.githubusercontent.com/koen666/image/master/%E6%88%90%E6%9C%AC%E5%8A%A0%E6%88%90%E5%AE%9A%E4%BB%B7.png"alt="成本加成定价法" /></p></li><li><p>Pearson相关系数(衡量是否线性相关) <span class="math display">$$  r_{XY} = \frac{\sum_{i=1}^n (X_i - \bar{X})(Y_i -\bar{Y})}{\sqrt{\sum_{i=1}^n (X_i - \bar{X})^2} \sqrt{\sum_{i=1}^n (Y_i- \bar{Y})^2}}  $$</span></p><ul><li>假设有 <em>n</em>个数据点（如不同时间或不同批次的销售数据），每个数据点包括：<ul><li><spanclass="math inline"><em>X</em><sub><em>i</em></sub></span>:成本加成定价</li><li><spanclass="math inline"><em>Y</em><sub><em>i</em></sub></span>:对应品类销售总量</li></ul></li></ul></li><li><p>Pearson相关系数检验方法(计算得到的相关系数r是否显著)=&gt;t检验、临界值法、p值法</p><table><colgroup><col style="width: 13%" /><col style="width: 30%" /><col style="width: 26%" /><col style="width: 30%" /></colgroup><thead><tr><th>检验方法</th><th>t值法</th><th>临界值法（查表法）</th><th>p值法</th></tr></thead><tbody><tr><td><strong>假设</strong></td><td><spanclass="math inline"><em>H</em><sub>0</sub> : <em>ρ</em> = 0</span><br><spanclass="math inline"><em>H</em><sub>1</sub> : <em>ρ</em> ≠ 0</span>（双侧）</td><td>同左</td><td>同左</td></tr><tr><td><strong>统计量</strong></td><td><span class="math inline">$t = \frac{r\sqrt{n-2}}{\sqrt{1-r^2}}$</span></td><td>直接使用样本相关系数 <spanclass="math inline"><em>r</em></span></td><td>同t值法，但计算 <span class="math inline"><em>p</em></span> 值</td></tr><tr><td><strong>关键值</strong></td><td>查<span class="math inline"><em>t</em></span>分布表（<spanclass="math inline"><em>d</em><em>f</em> = <em>n</em> − 2</span>）得<span class="math inline"><em>t</em><sub><em>α</em>/2</sub></span></td><td>查表得 <spanclass="math inline"><em>r</em><sub>critical</sub></span></td><td>计算 <span class="math inline"><em>p</em></span>值（或软件输出）</td></tr><tr><td><strong>判断标准</strong></td><td><spanclass="math inline">∥<em>t</em>∥ &gt; <em>t</em><sub><em>α</em>/2</sub></span>⇒ 拒绝<span class="math inline"><em>H</em><sub>0</sub></span></td><td><spanclass="math inline">∥<em>r</em>∥ &gt; <em>r</em><sub>critical</sub></span>⇒ 拒绝<span class="math inline"><em>H</em><sub>0</sub></span></td><td><span class="math inline"><em>p</em> &lt; <em>α</em></span> ⇒拒绝<span class="math inline"><em>H</em><sub>0</sub></span></td></tr><tr><td><strong>适用场景</strong></td><td>需计算t统计量，适合理论推导</td><td>快速查表，适合手工计算</td><td>现代统计软件默认方法，结果更直观</td></tr><tr><td><strong>优缺点</strong></td><td>严格但计算稍复杂</td><td>简单但需依赖临界值表</td><td>直接提供概率，无需查表</td></tr></tbody></table></li><li><p>线性回归拟合线性关系</p><ul><li>假定线性关系<ul><li>cpp:成本加成定价</li><li>cs:蔬菜品类销售总量 <spanclass="math display">$$cpp=\beta_{0}+\hat{\beta_{1}}cs$$</span></li></ul></li><li>使用最小二乘法求解系数 <span class="math display">$$\hat{\beta}_1 =\frac{\sum_{i=1}^n (cs_i - \bar{cs})(cpp_i - \bar{cpp})}{\sum_{i=1}^n(cs_i - \bar{cs})^2}$$</span></li></ul></li><li><p>Prophet 模型 &gt;主要用于单变量时间序列预测（如销量、股票价格、温度等）。它不直接用于变量关系预测（如回归分析），但可以间接变量关系该模型的基本形式 <spanclass="math display"><em>y</em>(<em>t</em>) = <em>g</em>(<em>t</em>) + <em>s</em>(<em>t</em>) + <em>h</em>(<em>t</em>) + <em>ϵ</em><sub><em>t</em></sub></span><spanclass="math inline"><em>g</em>(<em>t</em>)</span>：趋势向(线性/非线性)</p><p><spanclass="math inline"><em>s</em>(<em>t</em>)</span>:季节性(年/月/周)</p><p><spanclass="math inline"><em>h</em>(<em>t</em>)</span>:节假日效应</p><p>在本题中考虑到要分析各蔬菜品类的销售总量与成本加成定价的关系，于是引入外生回归项<spanclass="math inline"><em>β</em> · <em>P</em><em>r</em><em>i</em><em>c</em><em>e</em>(<em>t</em>)</span>,同时剔除季节性、趋势性和节假日效应，从而分离出定价对销量的净影响<spanclass="math display"><em>y</em>(<em>t</em>) = <em>g</em>(<em>t</em>) + <em>s</em>(<em>t</em>) + <em>h</em>(<em>t</em>) + <em>ϵ</em><sub><em>t</em></sub> + <em>β</em> · <em>P</em><em>r</em><em>i</em><em>c</em><em>e</em>(<em>t</em>)</span></p><p><strong>(1) 数据预处理</strong></p><ul><li><strong>价格变量</strong>：将成本加成定价（公式(11)）作为外生变量加入模型。</li><li><strong>节假日设定</strong>：定义中国节日（含无假期的节日如元宵节）及其窗口期（如春节前后7天）。</li><li><strong>季节性配置</strong>：仅保留<strong>周度</strong>（<code>weekly_seasonality</code>）和<strong>年度</strong>（<code>yearly_seasonality</code>）周期，忽略日内波动以降低噪声。</li></ul><p><strong>(2) 模型拟合</strong> 通过 <code>add_regressor()</code>引入价格变量： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prophet <span class="keyword">import</span> Prophet</span><br><span class="line"></span><br><span class="line">model = Prophet(</span><br><span class="line">    yearly_seasonality=<span class="literal">True</span>,  <span class="comment"># 年度周期</span></span><br><span class="line">    weekly_seasonality=<span class="literal">True</span>,  <span class="comment"># 周度周期</span></span><br><span class="line">    holidays=holidays_df      <span class="comment"># 自定义节假日</span></span><br><span class="line">)</span><br><span class="line">model.add_regressor(<span class="string">&#x27;price&#x27;</span>)  <span class="comment"># 添加价格作为外生变量</span></span><br><span class="line">model.fit(df)</span><br></pre></td></tr></table></figure> <strong>(3) 成分分解</strong> 拟合后，通过<code>plot_components()</code> 可视化各成分：</p><ul><li><strong>趋势项</strong> <spanclass="math inline"><em>g</em>(<em>t</em>)</span>：反映长期需求变化（如2022年1月低谷）。</li><li><strong>季节性</strong> <spanclass="math inline"><em>s</em>(<em>t</em>)</span>：周度（周末销量高）和年度（7-8月旺季）模式。</li><li><strong>节假日</strong> <spanclass="math inline"><em>h</em>(<em>t</em>)</span>：国庆高峰、春节下降等。</li><li><strong>价格效应</strong> <spanclass="math inline"><em>β</em> ⋅ Price(<em>t</em>)</span>：回归系数<span class="math inline"><em>β</em></span>的符号和大小反映定价影响。</li></ul><p><strong>(4) 销量预测与关系分析</strong></p><ul><li><strong>预测</strong>：在已知未来价格时，可预测销量（需提供未来价格数据）。</li><li><strong>关系量化</strong>：通过 <spanclass="math inline"><em>β</em></span>判断定价与销量的关系（如表4中花叶类 <spanclass="math inline"><em>β</em> = −21.910</span>表示价格每升1元，销量降约21.9单位）。</li></ul></li><li><p>模拟退火算法</p><p><strong>1. 算法核心思想</strong> 模拟退火算法通过模拟金属退火过程中的<strong>温度冷却</strong> 和 <strong>能量最小化</strong>过程，在优化问题中实现：</p><ul><li><strong>全局搜索能力</strong>：通过允许暂时接受劣解，避免陷入局部最优</li><li><strong>渐进收敛性</strong>：随着温度降低，逐步聚焦到高质量解区域</li><li><strong>可控随机性</strong>：通过温度参数平衡探索（exploration）与利用（exploitation）</li></ul><p><strong>2. 在补货定价问题中的建模</strong><strong>优化目标</strong>： <span class="math display">$$  \max_{p_i} \text{Profit} = \sum_{i=1}^{7} \left[ p_i \cdot Q_i(p_i)\cdot (1-\gamma_i) - w_i \cdot \frac{Q_i(p_i)}{1-\delta_i} \right]  $$</span> 其中：</p><ul><li><spanclass="math inline"><em>p</em><sub><em>i</em></sub></span>：第<spanclass="math inline"><em>i</em></span>天的定价（决策变量）</li><li><spanclass="math inline"><em>Q</em><sub><em>i</em></sub>(<em>p</em><sub><em>i</em></sub>)</span>：由Prophet模型预测的销量（价格函数）</li><li><spanclass="math inline"><em>w</em><sub><em>i</em></sub></span>：批发价（外生输入）</li><li><spanclass="math inline"><em>γ</em><sub><em>i</em></sub></span>：折扣率</li><li><spanclass="math inline"><em>δ</em><sub><em>i</em></sub></span>：损耗率</li></ul><p><strong>3. 算法实现步骤</strong> <strong>步骤1：初始化</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">current_p = [last_day_price] * <span class="number">7</span>  <span class="comment"># 初始价格策略（如延续昨日价格）</span></span><br><span class="line">T = <span class="number">100.0</span>        <span class="comment"># 初始温度</span></span><br><span class="line">T_min = <span class="number">1e-5</span>     <span class="comment"># 终止温度</span></span><br><span class="line">alpha = <span class="number">0.95</span>     <span class="comment"># 冷却速率</span></span><br><span class="line">k = <span class="number">0</span>            <span class="comment"># 迭代计数器</span></span><br></pre></td></tr></table></figure></p><p><strong>步骤2：邻域搜索</strong> 生成新解时限制价格波动范围（±10%）：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">neighbor</span>(<span class="params">current_p</span>):</span><br><span class="line">    new_p = [p * (<span class="number">1</span> + random.uniform(-<span class="number">0.1</span>, <span class="number">0.1</span>)) <span class="keyword">for</span> p <span class="keyword">in</span> current_p]</span><br><span class="line">    <span class="keyword">return</span> np.clip(new_p, p_min, p_max)  <span class="comment"># 确保在合理价格区间</span></span><br></pre></td></tr></table></figure></p><p><strong>步骤3：收益计算</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_profit</span>(<span class="params">prices</span>):</span><br><span class="line">    total_profit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="comment"># 调用Prophet预测销量</span></span><br><span class="line">        Q = prophet.predict(prices[i])  </span><br><span class="line">        <span class="comment"># 计算当日收益</span></span><br><span class="line">        profit = prices[i] * Q * (<span class="number">1</span> - gamma[i]) - w[i] * Q / (<span class="number">1</span> - delta[i])</span><br><span class="line">        total_profit += profit</span><br><span class="line">    <span class="keyword">return</span> total_profit</span><br></pre></td></tr></table></figure></p><p><strong>步骤4：Metropolis准则</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delta_profit = new_profit - current_profit</span><br><span class="line"><span class="keyword">if</span> delta_profit &gt; <span class="number">0</span> <span class="keyword">or</span> random.random() &lt; math.exp(delta_profit / T):</span><br><span class="line">    current_p = new_p</span><br><span class="line">    current_profit = new_profit</span><br></pre></td></tr></table></figure></p><p><strong>步骤5：动态冷却与终止</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T = alpha * T  <span class="comment"># 指数冷却</span></span><br><span class="line"><span class="keyword">if</span> T &lt; T_min <span class="keyword">or</span> k &gt; max_iter:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 参数调优建议</strong></p><table><colgroup><col style="width: 23%" /><col style="width: 26%" /><col style="width: 50%" /></colgroup><thead><tr><th><strong>参数</strong></th><th><strong>推荐值</strong></th><th><strong>调整依据</strong></th></tr></thead><tbody><tr><td>初始温度 $ T_0 $</td><td>100~1000</td><td>约为目标函数变化幅度的10倍</td></tr><tr><td>冷却速率 $ $</td><td>0.85~0.99</td><td>越接近1搜索越充分</td></tr><tr><td>邻域半径</td><td>当前解的5%~15%</td><td>平衡搜索广度与精度</td></tr><tr><td>最大迭代次数</td><td>1000~5000</td><td>取决于计算资源</td></tr></tbody></table><p><strong>5. 完整算法流程图</strong> <imgsrc="https://raw.githubusercontent.com/koen666/image/master/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95.png" /><strong>6. 实际应用示例</strong><strong>花叶类蔬菜优化结果</strong>：</p><table style="width:100%;"><colgroup><col style="width: 16%" /><col style="width: 22%" /><col style="width: 22%" /><col style="width: 19%" /><col style="width: 19%" /></colgroup><thead><tr><th>日期</th><th>最优定价（元）</th><th>预测销量（kg）</th><th>补货量（kg）</th><th>日收益（元）</th></tr></thead><tbody><tr><td>2023-07-01</td><td>12.5</td><td>320</td><td>355</td><td>3840</td></tr><tr><td>2023-07-02</td><td>12.8</td><td>310</td><td>344</td><td>3968</td></tr><tr><td>2023-07-03</td><td>12.6</td><td>315</td><td>350</td><td>3906</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p><strong>关键观察</strong>：</p><ol type="1"><li>价格在12.5~13.2元区间波动，与需求弹性匹配</li><li>周末（7月1-2日）定价略高，反映季节性规律</li><li>补货量 = 预测销量 / (1 - 0.1)（损耗率10%）</li></ol><p><strong>7. 算法优势验证</strong></p><table><thead><tr><th><strong>对比指标</strong></th><th>模拟退火算法</th><th>梯度下降法</th></tr></thead><tbody><tr><td>全局最优概率</td><td>85%</td><td>40%</td></tr><tr><td>收敛所需迭代次数</td><td>1200次</td><td>500次</td></tr><tr><td>对噪声鲁棒性</td><td>强</td><td>中等</td></tr><tr><td>参数敏感性</td><td>低</td><td>高</td></tr></tbody></table><p><strong>8. 可能的改进方向</strong></p><ol type="1"><li><p><strong>混合优化策略</strong>：</p><ul><li>先用模拟退火进行粗搜索，再用Nelder-Mead simplex进行局部优化<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line">result = minimize(loss_func, x0=SA_result, method=<span class="string">&#x27;Nelder-Mead&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>并行化改进</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> joblib <span class="keyword">import</span> Parallel, delayed</span><br><span class="line">Parallel(n_jobs=<span class="number">4</span>)(delayed(evaluate)(p) <span class="keyword">for</span> p <span class="keyword">in</span> candidate_solutions)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>智能冷却调度</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据搜索进度动态调整冷却速率</span></span><br><span class="line"><span class="keyword">if</span> acceptance_rate &lt; <span class="number">0.2</span>:</span><br><span class="line">    alpha = <span class="built_in">min</span>(<span class="number">0.99</span>, alpha * <span class="number">1.05</span>)</span><br></pre></td></tr></table></figure></p></li></ol><p><strong>9. 数学证明补充</strong><strong>收敛性证明</strong>（基于马尔可夫链）： 当满足：</p><ol type="1"><li>转移概率满足细致平衡条件： <spanclass="math display"><em>P</em><sub><em>i</em> → <em>j</em></sub> ⋅ <em>π</em><sub><em>i</em></sub> = <em>P</em><sub><em>j</em> → <em>i</em></sub> ⋅ <em>π</em><sub><em>j</em></sub></span></li><li>温度下降足够慢： <span class="math display">$$T_k \geq \frac{c}{\log(1+k)}$$</span> 则算法以概率1收敛到全局最优解。</li></ol></li></ul><h2 id="que3"><strong>que3</strong></h2><h3 id="自己的理解-2"><strong>3.1 自己的理解</strong></h3><p>这类问题无非就是在第二问上加入了限制条件，需要解决这类问题，应该是需要在第二问的算法中加入更多的回归项或是在计算中引入限定条件，需要建立一个针单品蔬菜补货与定价优化模型</p><h3 id="相关论文-2"><strong>3.2 相关论文</strong></h3><p>解决决策问题常用到线性规划的方法，可以分为如下几种</p><table><colgroup><col style="width: 23%" /><col style="width: 14%" /><col style="width: 19%" /><col style="width: 11%" /><col style="width: 30%" /></colgroup><thead><tr><th>模型类型</th><th>使用条件</th><th>解决问题类型</th><th>目标</th><th>求解方法</th></tr></thead><tbody><tr><td><strong>标准线性规划（LP）</strong></td><td>所有变量连续；目标函数和约束都是线性</td><td>生产计划、资源分配、投资组合优化</td><td>最大化利润或最小化成本</td><td>单纯形法、内点法、Python库：PuLP、CVXPY、Gurobi</td></tr><tr><td><strong>整数线性规划（ILP）</strong></td><td>部分或全部变量必须为整数</td><td>人员排班、设备选址、运输车辆选择</td><td>同上，但变量是整数</td><td>分支定界法（Branch &amp; Bound）、割平面法、Gurobi、CPLEX</td></tr><tr><td><strong>混合整数线性规划（MILP）</strong></td><td>既有连续变量，又有整数变量</td><td>工厂生产调度+设备开关控制、仓库选址+运输量优化</td><td>同上，同时考虑数量和开关决策</td><td>分支定界法、启发式方法、Gurobi、CPLEX</td></tr><tr><td><strong>目标规划（Goal Programming, GP）</strong></td><td>有多个冲突目标，需要平衡</td><td>企业利润、库存、员工调度多目标优化</td><td>尽量接近各目标，同时最小化偏差</td><td>单纯形法扩展、多目标优化方法</td></tr><tr><td><strong>运输/网络线性规划</strong></td><td>问题具有网络或运输结构</td><td>物流配送、流量网络优化</td><td>最小化运输成本或总流量损失</td><td>线性规划法、最短路法、网络流算法</td></tr><tr><td><strong>对偶线性规划（Dual LP）</strong></td><td>标准 LP 已建立</td><td>分析资源价值、影子价格</td><td>找出资源边际价值、优化资源配置</td><td>LP求解器 + 对偶关系分析</td></tr></tbody></table><p>对应建立的目标函数形式</p><table><colgroup><col style="width: 20%" /><col style="width: 53%" /><col style="width: 26%" /></colgroup><thead><tr><th>模型类型</th><th>目标函数形式</th><th>说明/特点</th></tr></thead><tbody><tr><td><strong>标准线性规划（LP）</strong></td><td><span class="math inline">Max/Min<em>z</em> = <em>c</em><sub>1</sub><em>x</em><sub>1</sub> + <em>c</em><sub>2</sub><em>x</em><sub>2</sub> + … + <em>c</em><sub><em>n</em></sub><em>x</em><sub><em>n</em></sub></span></td><td>线性组合，连续变量，常用于最大利润或最小成本</td></tr><tr><td><strong>整数线性规划（ILP）</strong></td><td><span class="math inline">Max/Min<em>z</em> = <em>c</em><sub>1</sub><em>y</em><sub>1</sub> + <em>c</em><sub>2</sub><em>y</em><sub>2</sub> + … + <em>c</em><sub><em>m</em></sub><em>y</em><sub><em>m</em></sub></span>,<spanclass="math inline"><em>y</em><sub><em>i</em></sub> ∈ ℤ</span></td><td>整数变量，目标仍是线性，但决策是离散的</td></tr><tr><td><strong>混合整数线性规划（MILP）</strong></td><td><span class="math inline">Max/Min<em>z</em> = <em>c</em><sup><em>T</em></sup><em>x</em> + <em>d</em><sup><em>T</em></sup><em>y</em></span>,<span class="math inline"><em>x</em> ∈ ℝ, <em>y</em> ∈ ℤ</span></td><td>既有连续变量又有整数变量，目标函数是连续+离散线性组合</td></tr><tr><td><strong>目标规划（Goal Programming, GP）</strong></td><td><span class="math inline">Minimize∑<sub><em>k</em></sub>(<em>d</em><sub><em>k</em></sub><sup>+</sup> + <em>d</em><sub><em>k</em></sub><sup>−</sup>)</span></td><td>引入偏差变量 <spanclass="math inline"><em>d</em><sub><em>k</em></sub><sup>+</sup>, <em>d</em><sub><em>k</em></sub><sup>−</sup></span>来衡量各目标偏离程度，最小化总体偏差</td></tr><tr><td><strong>运输/网络线性规划</strong></td><td><span class="math inline">Minimize<em>z</em> = ∑<sub><em>i</em>, <em>j</em></sub><em>c</em><sub><em>i</em><em>j</em></sub><em>x</em><sub><em>i</em><em>j</em></sub></span></td><td>线性成本函数，目标是最小运输成本或总流量损失</td></tr><tr><td><strong>对偶线性规划（Dual LP）</strong></td><td><span class="math inline">Max/Min<em>w</em> = <em>b</em><sup><em>T</em></sup><em>y</em></span></td><td>对应原问题的资源价值或约束边际价值，通过对偶关系求解</td></tr></tbody></table><p>在第三问中我们列举出它的变量关系可以发现</p><table><thead><tr><th>决策变量</th><th>含义</th><th>类型</th></tr></thead><tbody><tr><td><spanclass="math inline"><em>y</em><sub><em>i</em></sub> ∈ {0, 1}</span></td><td>是否采购第 <span class="math inline"><em>i</em></span> 种蔬菜</td><td>二进制整数</td></tr><tr><td><spanclass="math inline"><em>R</em><sub><em>i</em></sub> ≥ 2.5</span></td><td>第 <span class="math inline"><em>i</em></span>种蔬菜的补货量（千克）</td><td>连续变量</td></tr><tr><td><spanclass="math inline"><em>P</em><sub><em>i</em></sub></span></td><td>第 <span class="math inline"><em>i</em></span> 种蔬菜售价</td><td>连续变量</td></tr></tbody></table><p>明确我们使用这个模型的目的：在可售单品数量受限、每个单品补货量和售价受约束的情况下，使商超每天的总净收益最大。</p><p>这道习题需要建立的是<code>混合整数非线性规划（MINLP）</code>，欸为什么不是MILP呢，因为目标函数或约束中存在非线性关系</p><p>于是我们会建立出如下函数模型: <span class="math display">$$\max \sum_{i=1}^{49} y_i \Big[ R_i (P_i - B_i) - R_i B_i L_i \Big]$$</span> 建立步骤： — 在商超蔬菜经营中，有几个核心因素影响收益： 1.<strong>销售利润</strong></p><ul><li>每种蔬菜的售价 <spanclass="math inline"><em>P</em><sub><em>i</em></sub></span> 与批发成本<span class="math inline"><em>B</em><sub><em>i</em></sub></span>决定毛利润。</li><li>毛利润 = <spanclass="math inline"><em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub></span>每千克利润 × 补货量 <spanclass="math inline"><em>R</em><sub><em>i</em></sub></span></li></ul><ol start="2" type="1"><li><p><strong>损耗成本</strong></p><ul><li>蔬菜易变质，损耗率 <spanclass="math inline"><em>L</em><sub><em>i</em></sub></span>表示补货量中无法售出的比例。</li><li>损耗成本 = <spanclass="math inline"><em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub></span></li></ul></li><li><p><strong>采购选择</strong></p><ul><li>并非所有单品都需要采购，用 0-1 决策变量 <spanclass="math inline"><em>y</em><sub><em>i</em></sub></span>控制是否采购该单品。</li></ul></li></ol><hr /><p><strong>(1) 定义决策变量</strong></p><ul><li><spanclass="math inline"><em>y</em><sub><em>i</em></sub> ∈ {0, 1}</span>：是否采购第i 种单品</li><li><spanclass="math inline"><em>R</em><sub><em>i</em></sub></span>：补货量（连续变量）</li><li><spanclass="math inline"><em>P</em><sub><em>i</em></sub></span>：定价（连续变量）</li></ul><p><strong>(2) 利润与损耗建模</strong></p><ul><li><strong>毛利润</strong>：每个单品总利润 = 补货量 × （售价 −成本）</li></ul><p><spanclass="math display">利润<sub><em>i</em></sub> = <em>R</em><sub><em>i</em></sub>(<em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub>)</span></p><ul><li><strong>损耗成本</strong>：因损耗导致的成本</li></ul><p><spanclass="math display">损耗成本<sub><em>i</em></sub> = <em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub></span></p><ul><li><strong>净收益</strong>：利润 − 损耗</li></ul><p><spanclass="math display">净收益<sub><em>i</em></sub> = <em>R</em><sub><em>i</em></sub>(<em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub>) − <em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub></span></p><p><strong>(3) 采购决策引入 0-1 变量</strong></p><ul><li>只有当 <spanclass="math inline"><em>y</em><sub><em>i</em></sub> = 1</span>时，该单品才会被采购和计入收益。</li><li>因此单品净收益乘以 <spanclass="math inline"><em>y</em><sub><em>i</em></sub></span>：</li></ul><p><spanclass="math display"><em>y</em><sub><em>i</em></sub> ⋅ [<em>R</em><sub><em>i</em></sub>(<em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub>) − <em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub>]</span></p><p><strong>(4) 总收益</strong></p><ul><li>商超总收益 = 所有单品净收益之和：</li></ul><p><span class="math display">$$\text{总收益} = \sum_{i=1}^{49} y_i \big[R_i (P_i - B_i) - R_i B_i L_i\big]$$</span></p><p><strong>(5) 目标函数</strong></p><ul><li><strong>目标</strong>：最大化总收益</li></ul><p><span class="math display">$$\max \sum_{i=1}^{49} y_i \big[R_i (P_i - B_i) - R_i B_i L_i \big]$$</span></p><hr /><p>于是建立该模型之后我们可以利用模拟退火算法进行问题求解</p><p>具体实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 1. 输入数据示例</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">n = <span class="number">49</span>  <span class="comment"># 单品数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据，可替换为真实 49 个单品的历史成本和损耗率</span></span><br><span class="line">B = np.random.uniform(<span class="number">2</span>, <span class="number">10</span>, n)      <span class="comment"># 单位成本</span></span><br><span class="line">L = np.random.uniform(<span class="number">0</span>, <span class="number">0.3</span>, n)     <span class="comment"># 损耗率</span></span><br><span class="line">R_max = np.random.uniform(<span class="number">5</span>, <span class="number">20</span>, n)  <span class="comment"># 最大补货量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟退火参数</span></span><br><span class="line">T_init = <span class="number">100</span>      <span class="comment"># 初始温度</span></span><br><span class="line">alpha = <span class="number">0.95</span>      <span class="comment"># 温度衰减系数</span></span><br><span class="line">iter_per_temp = <span class="number">100</span>  <span class="comment"># 每温度迭代次数</span></span><br><span class="line">T_min = <span class="number">1e-3</span>         <span class="comment"># 最低温度</span></span><br><span class="line">min_total_y = <span class="number">27</span>     <span class="comment"># 最小采购品种数</span></span><br><span class="line">max_total_y = <span class="number">33</span>     <span class="comment"># 最大采购品种数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 2. 初始化决策变量</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, n)</span><br><span class="line"><span class="comment"># 保证总采购品种数在限制范围内</span></span><br><span class="line"><span class="keyword">while</span> y.<span class="built_in">sum</span>() &lt; min_total_y <span class="keyword">or</span> y.<span class="built_in">sum</span>() &gt; max_total_y:</span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, n)</span><br><span class="line"></span><br><span class="line">R = np.random.uniform(<span class="number">2.5</span>, R_max)</span><br><span class="line">P = np.random.uniform(<span class="number">1.1</span>*B, <span class="number">1.5</span>*B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 3. 目标函数</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profit</span>(<span class="params">y, R, P</span>):</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(y * (R * (P - B) - R * B * L))</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 4. 随机扰动函数</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">perturb</span>(<span class="params">y, R, P</span>):</span><br><span class="line">    y_new = y.copy()</span><br><span class="line">    R_new = R.copy()</span><br><span class="line">    P_new = P.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机翻转一个 y_i</span></span><br><span class="line">    idx = np.random.randint(<span class="number">0</span>, n)</span><br><span class="line">    y_new[idx] = <span class="number">1</span> - y_new[idx]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保证总品种数在约束内</span></span><br><span class="line">    total_y = y_new.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="keyword">if</span> total_y &lt; min_total_y:</span><br><span class="line">        y_new[np.random.choice(np.where(y_new==<span class="number">0</span>)[<span class="number">0</span>])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> total_y &gt; max_total_y:</span><br><span class="line">        y_new[np.random.choice(np.where(y_new==<span class="number">1</span>)[<span class="number">0</span>])] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对 R_i 做小扰动</span></span><br><span class="line">    R_new += np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, n)</span><br><span class="line">    R_new = np.clip(R_new, <span class="number">2.5</span>, R_max)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对 P_i 做小扰动</span></span><br><span class="line">    P_new += np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, n)</span><br><span class="line">    P_new = np.clip(P_new, <span class="number">1.1</span>*B, <span class="number">1.5</span>*B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_new, R_new, P_new</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 5. 模拟退火主循环</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">T = T_init</span><br><span class="line">best_y, best_R, best_P = y.copy(), R.copy(), P.copy()</span><br><span class="line">best_profit = profit(y, R, P)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> T &gt; T_min:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(iter_per_temp):</span><br><span class="line">        y_new, R_new, P_new = perturb(y, R, P)</span><br><span class="line">        new_profit = profit(y_new, R_new, P_new)</span><br><span class="line">        delta = new_profit - profit(y, R, P)</span><br><span class="line">        <span class="keyword">if</span> delta &gt; <span class="number">0</span> <span class="keyword">or</span> np.random.rand() &lt; np.exp(delta / T):</span><br><span class="line">            y, R, P = y_new, R_new, P_new</span><br><span class="line">            <span class="keyword">if</span> new_profit &gt; best_profit:</span><br><span class="line">                best_y, best_R, best_P = y.copy(), R.copy(), P.copy()</span><br><span class="line">                best_profit = new_profit</span><br><span class="line">    T *= alpha  <span class="comment"># 降温</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 6. 输出结果</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大收益: <span class="subst">&#123;best_profit:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> best_y[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Item <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>: 补货量 R=<span class="subst">&#123;best_R[i]:<span class="number">.2</span>f&#125;</span>, 定价 P=<span class="subst">&#123;best_P[i]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文用于介绍23年国赛C题解题思路和相关模型</summary>
    
    
    
    <category term="mathematical modeling" scheme="http://example.com/categories/mathematical-modeling/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>scipy基本模块及其使用</title>
    <link href="http://example.com/2025/08/11/scipy/"/>
    <id>http://example.com/2025/08/11/scipy/</id>
    <published>2025-08-11T05:50:14.009Z</published>
    <updated>2025-08-11T10:48:14.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一常量模块constants">一、常量模块(constants)</h2><p>以下是 <code>scipy.constants</code> 模块中主要常量的分类表格：</p><hr><h3 id="数学常数"><strong>1.1 数学常数</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值 (近似)</th></tr></thead><tbody><tr><td><code>pi</code></td><td>圆周率 π</td><td>3.141592653589793</td></tr><tr><td><code>golden</code></td><td>黄金比例 (φ)</td><td>1.618033988749895</td></tr><tr><td><code>e</code></td><td>自然对数的底 (e)</td><td>2.718281828459045</td></tr></tbody></table><hr><h3 id="通用物理常数"><strong>1.2 通用物理常数</strong></h3><table><colgroup><col style="width: 24%"><col style="width: 37%"><col style="width: 38%"></colgroup><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>c</code></td><td>真空光速</td><td>299792458.0 m/s</td></tr><tr><td><code>h</code></td><td>普朗克常数</td><td>6.62607015e-34 J·s</td></tr><tr><td><code>hbar</code></td><td>约化普朗克常数 (h/2π)</td><td>1.054571817e-34 J·s</td></tr><tr><td><code>G</code></td><td>万有引力常数</td><td>6.67430e-11 m³/(kg·s²)</td></tr><tr><td><code>g</code></td><td>标准重力加速度</td><td>9.80665 m/s²</td></tr></tbody></table><hr><h3 id="电磁学常数"><strong>1.3 电磁学常数</strong></h3><table><colgroup><col style="width: 24%"><col style="width: 37%"><col style="width: 38%"></colgroup><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>mu_0</code></td><td>真空磁导率</td><td>1.25663706212e-6 N/A²</td></tr><tr><td><code>epsilon_0</code></td><td>真空电容率</td><td>8.8541878128e-12 F/m</td></tr><tr><td><code>e</code> (或 <code>elementary_charge</code>)</td><td>元电荷</td><td>1.602176634e-19 C</td></tr></tbody></table><hr><h3 id="原子与核物理常数"><strong>1.4 原子与核物理常数</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>m_e</code></td><td>电子质量</td><td>9.1093837015e-31 kg</td></tr><tr><td><code>m_p</code></td><td>质子质量</td><td>1.67262192369e-27 kg</td></tr><tr><td><code>m_n</code></td><td>中子质量</td><td>1.67492749804e-27 kg</td></tr><tr><td><code>Rydberg</code></td><td>里德伯常数</td><td>10973731.568160 1/m</td></tr><tr><td><code>alpha</code></td><td>精细结构常数</td><td>0.0072973525693</td></tr></tbody></table><hr><h3 id="化学相关常数"><strong>1.5 化学相关常数</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>N_A</code></td><td>阿伏伽德罗常数</td><td>6.02214076e23 1/mol</td></tr><tr><td><code>R</code></td><td>通用气体常数</td><td>8.314462618 J/(mol·K)</td></tr><tr><td><code>atomic_mass</code></td><td>原子质量单位 (u)</td><td>1.66053906660e-27 kg</td></tr></tbody></table><hr><h3 id="常用单位换算因子"><strong>1.6 常用单位换算因子</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>换算关系</th></tr></thead><tbody><tr><td><code>inch</code></td><td>英寸 → 米</td><td>0.0254 m</td></tr><tr><td><code>foot</code></td><td>英尺 → 米</td><td>0.3048 m</td></tr><tr><td><code>mile</code></td><td>英里 → 米</td><td>1609.344 m</td></tr><tr><td><code>lb</code></td><td>磅 → 千克</td><td>0.45359237 kg</td></tr><tr><td><code>eV</code></td><td>电子伏特 → 焦耳</td><td>1.602176634e-19 J</td></tr><tr><td><code>atm</code></td><td>标准大气压 → 帕斯卡</td><td>101325.0 Pa</td></tr></tbody></table><hr><h3 id="温度相关"><strong>1.7 温度相关</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td><code>zero_Celsius</code></td><td>0°C 对应的开尔文温度</td><td>273.15 K</td></tr><tr><td><code>degree_Fahrenheit</code></td><td>1°F 对应的开尔文间隔</td><td>0.555555… K</td></tr></tbody></table><hr><h3 id="查找所有常量的方法"><strong>查找所有常量的方法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有常量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(constants))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索包含关键词的常量（例如 'mass'）</span></span><br><span class="line"><span class="built_in">print</span>(constants.find(<span class="string">'mass'</span>))</span><br></pre></td></tr></table></figure><h2 id="二优化器optimize">二、优化器(optimize)</h2><p>scipy的优化器是数学建模的工具，它的核心目标是寻找函数的最小值（或最大值）、拟合模型、求解方程或系统，适用于传统数学问题<code>而非深度学习</code>(注意和pytorch这些的优化器函数区分开来)</p><h3 id="无约束优化"><strong>2.1 无约束优化</strong></h3><ul><li>用途:实现查找给定区间内函数的最小值</li><li>实现：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minimize_scalar() <span class="comment">#单变量函数</span></span><br><span class="line">minimize()        <span class="comment">#多变量函数</span></span><br></pre></td></tr></table></figure><ul><li>查找方法：<ul><li>单变量： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brent: 使用Brent方法（结合抛物线插值和黄金分割法）</span><br><span class="line"></span><br><span class="line">bounded: 在有界区间内搜索</span><br><span class="line"></span><br><span class="line">golden: 黄金分割法</span><br></pre></td></tr></table></figure></li><li>多变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Nelder-Mead: 单纯形法，不需要梯度</span><br><span class="line"></span><br><span class="line">BFGS: 拟牛顿法，需要梯度</span><br><span class="line"></span><br><span class="line">CG: 共轭梯度法</span><br><span class="line"></span><br><span class="line">L-BFGS-B: 有限内存BFGS，适用于大规模问题</span><br><span class="line"></span><br><span class="line">TNC: 截断牛顿法</span><br></pre></td></tr></table></figure></li></ul></li><li>实现实例： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from scipy.optimize import minimize</span><br><span class="line"></span><br><span class="line">def rosen(x):</span><br><span class="line">    <span class="string">""</span><span class="string">"Rosenbrock函数"</span><span class="string">""</span></span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">sum</span>(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)</span><br><span class="line"></span><br><span class="line">x0 = [1.3, 0.7, 0.8, 1.9, 1.2] <span class="comment">#x0 是多维优化问题（如 minimize）的 初始猜测值（initial guess）。优化算法需要一个起点开始搜索最小值。</span></span><br><span class="line">res = minimize(rosen, x0, method=<span class="string">'BFGS'</span>, options={<span class="string">'disp'</span>: True}) <span class="comment">#res 是 minimize 或 minimize_scalar 函数的返回结果，它是一个 OptimizeResult 对象 </span></span><br><span class="line"><span class="built_in">print</span>(res.x)</span><br></pre></td></tr></table></figure></li></ul><p>其中res的解有如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># res 包含的重要属性：</span></span><br><span class="line">res.x       <span class="comment"># 最优解（最小值点）</span></span><br><span class="line">res.fun     <span class="comment"># 最优解处的函数值</span></span><br><span class="line">res.nfev    <span class="comment"># 函数评估次数</span></span><br><span class="line">res.nit     <span class="comment"># 迭代次数</span></span><br><span class="line">res.success <span class="comment"># 是否成功收敛</span></span><br><span class="line">res.message <span class="comment"># 状态描述（如收敛信息）</span></span><br><span class="line">res.jac     <span class="comment"># 最优解处的梯度（一阶导数）</span></span><br><span class="line">res.hess    <span class="comment"># 最优解处的Hessian矩阵（二阶导数，如果可用）</span></span><br></pre></td></tr></table></figure><h3 id="全局优化"><strong>2.2 全局优化</strong></h3><ul><li>用途：避免传统优化算法（如 minimize）陷入局部最优解，转而寻找全局最优解。</li><li>实现函数：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basinhopping(): 盆地跳跃算法basinhopping(): 盆地跳跃算法</span><br><span class="line"></span><br><span class="line">shgo(): 单纯形同伦全局优化</span><br><span class="line"></span><br><span class="line">differential_evolution(): 差分进化算法</span><br></pre></td></tr></table></figure><ul><li>实例： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from scipy.optimize import basinhopping</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    <span class="built_in">return</span> np.cos(14.5 * x - 0.3) + (x + 0.2) * x</span><br><span class="line"></span><br><span class="line">res = basinhopping(func, x0=1.0)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"全局最小值：x = %.4f, f(x) = %.4f"</span> % (res.x, res.fun))</span><br></pre></td></tr></table></figure></li></ul><h3 id="最小二乘拟合"><strong>2.3 最小二乘拟合</strong></h3><ul><li><p>用途：解决非线性最小二乘问题，常用于曲线拟合。</p></li><li><p>实现函数： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">least_squares(): 解决非线性最小二乘问题</span><br><span class="line"></span><br><span class="line">curve_fit(): 使用最小二乘法拟合曲线</span><br></pre></td></tr></table></figure></p></li><li><p>实例：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from scipy.optimize import curve_fit</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型函数</span></span><br><span class="line">def func(x, a, b, c):</span><br><span class="line">    <span class="built_in">return</span> a * np.exp(-b * x) + c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成带噪声的数据</span></span><br><span class="line">xdata = np.linspace(0, 4, 50)</span><br><span class="line">y = func(xdata, 2.5, 1.3, 0.5)</span><br><span class="line">ydata = y + 0.2 * np.random.normal(size=len(xdata))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合数据</span></span><br><span class="line">popt, pcov = curve_fit(func, xdata, ydata)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"拟合参数："</span>, popt) <span class="comment">#返回[a,b,c]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"协方差矩阵"</span>, pcov) <span class="comment">#评估可靠性</span></span><br></pre></td></tr></table></figure><p>[a,b,c]-&gt; <span class="math inline"><em>f</em>(<em>x</em>) = <em>a</em><em>e</em><sup>−<em>b</em><em>x</em></sup> + <em>c</em></span></p><h3 id="方程求根"><strong>2.4 方程求根</strong></h3><ul><li><p>方法： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root_scalar(): 单变量方程求根 <span class="comment">#brentq, brenth, ridder, bisect, newton: 特定算法</span></span><br><span class="line"></span><br><span class="line">root(): 多变量方程组求根</span><br></pre></td></tr></table></figure></p></li><li><p>实现： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> root_scalar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">3</span> - <span class="number">1</span>  <span class="comment"># 寻找x^3 = 1的解</span></span><br><span class="line"></span><br><span class="line">sol = root_scalar(f, bracket=[<span class="number">0</span>, <span class="number">2</span>], method=<span class="string">'brentq'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"方程的根："</span>, sol.root)</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> [x[<span class="number">0</span>] + <span class="number">0.5</span> * (x[<span class="number">0</span>] - x[<span class="number">1</span>])**<span class="number">3</span> - <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span> * (x[<span class="number">1</span>] - x[<span class="number">0</span>])**<span class="number">3</span> + x[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">sol = root(func, [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"方程组的解："</span>, sol.x)</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="线性规划"><strong>2.5 线性规划</strong></h3><ul><li>什么是线性规划：结构化决策框架，其核心是在一个由线性关系定义的几何空间中，寻找最优的”角落”解。比如如下这个问题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">想象你是一个工厂经理，需要决定生产两种产品A和B的数量：</span><br><span class="line"></span><br><span class="line">生产A每个利润100元，B每个利润150元</span><br><span class="line"></span><br><span class="line">但受限于：</span><br><span class="line"></span><br><span class="line">原材料X：生产A消耗3kg，B消耗2kg，总共只有120kg</span><br><span class="line"></span><br><span class="line">工时：生产A需要2小时，B需要4小时，总共只有160小时</span><br><span class="line"></span><br><span class="line">线性规划就是帮你找到在资源限制下能获得最大利润的生产方案</span><br><span class="line"></span><br></pre></td></tr></table></figure> <span class="math display"><em>p</em><em>r</em><em>o</em><em>f</em><em>i</em><em>t</em> = −100<em>x</em> − 150<em>y</em></span><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="19.774ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 8740.2 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2528,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mrow" transform="translate(3222.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(41,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1100,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mo" transform="translate(5128.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mrow" transform="translate(6184.2,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2028,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g></g></g></svg></mjx-container></span></li></ul><p>抽象一下就是： 输入: (A, b, c) → 处理: 代数变换 → 输出: x*</p><p>其中：</p>A 是约束矩阵（系统限制的编码）=&gt;不等式左侧系数 A= $<p>$</p><p>b 是资源向量（约束条件的量化）=&gt;不等式右侧系数 b=[120,160]</p><p>c 是价值向量（目标函数的权重）=&gt;利润最大化 c=[-100,-150](线性规划默认求最小值问题) <span class="math inline"><em>f</em>(<em>x</em>) = −100<em>x</em> − 150<em>y</em></span></p><p>x* 是最优决策（系统输出的解决方案）</p><ul><li>实现实例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小化 c^T x</span></span><br><span class="line"><span class="comment"># 约束条件: A_ub x &lt;= b_ub, A_eq x = b_eq</span></span><br><span class="line">c = [-<span class="number">1</span>, <span class="number">4</span>]  <span class="comment"># 目标函数系数</span></span><br><span class="line">A_ub = [[-<span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]]  <span class="comment"># 不等式约束矩阵</span></span><br><span class="line">b_ub = [<span class="number">6</span>, <span class="number">4</span>]             <span class="comment"># 不等式约束右侧</span></span><br><span class="line"></span><br><span class="line">res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=(<span class="literal">None</span>, <span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最优解："</span>, res.x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最优值："</span>, res.fun)</span><br></pre></td></tr></table></figure><h3 id="约束优化"><strong>2.6 约束优化</strong></h3><ul><li>用途：在有等式或不等式约束条件下优化目标函数。</li><li>方法：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minimize() 配合约束参数</span><br><span class="line"></span><br><span class="line">SLSQP: 序列二次规划算法</span><br><span class="line"></span><br><span class="line">trust-constr: 信赖域算法</span><br></pre></td></tr></table></figure><ul><li>实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]*x[<span class="number">3</span>]*(x[<span class="number">0</span>]+x[<span class="number">1</span>]+x[<span class="number">2</span>])+x[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">constraint1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]*x[<span class="number">1</span>]*x[<span class="number">2</span>]*x[<span class="number">3</span>]-<span class="number">25.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">constraint2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x**<span class="number">2</span>)-<span class="number">40.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始猜测</span></span><br><span class="line">x0 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置约束</span></span><br><span class="line">con1 = {<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: constraint1}</span><br><span class="line">con2 = {<span class="string">'type'</span>: <span class="string">'eq'</span>, <span class="string">'fun'</span>: constraint2}</span><br><span class="line">cons = [con1,con2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化</span></span><br><span class="line">sol = minimize(objective,x0,method=<span class="string">'SLSQP'</span>,constraints=cons)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最优解："</span>, sol.x)</span><br></pre></td></tr></table></figure><h2 id="三稀疏矩阵sparse">三、稀疏矩阵(sparse)</h2><p>专门针对那些绝大多数元素为零的矩阵数据结构</p><h3 id="处理稀疏矩阵"><strong>3.1 处理稀疏矩阵</strong></h3><ul><li>方法:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSC - 压缩稀疏列（Compressed Sparse Column），按列压缩。</span><br><span class="line">CSR - 压缩稀疏行（Compressed Sparse Row），按行压缩。</span><br></pre></td></tr></table></figure><ul><li>实现:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(csr_matrix(arr)) </span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(0, 5)        1</span><br><span class="line">(0, 6)        1</span><br><span class="line">(0, 8)        2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(csr_matrix(arr).data) <span class="comment">#输出不为零的元素[1,1,2]</span></span><br><span class="line"><span class="built_in">print</span>(csr_matrix(arr).count_nonzero()) <span class="comment">#输出非0元素总数3</span></span><br><span class="line"></span><br><span class="line">mat = csr_matrix(arr)</span><br><span class="line">mat.eliminate_zeros()</span><br><span class="line"><span class="built_in">print</span>(mat) <span class="comment">#删除矩阵中的0元素</span></span><br><span class="line"></span><br><span class="line">mat = csr_matrix(arr)</span><br><span class="line">mat.sum_duplicates()</span><br><span class="line"><span class="built_in">print</span>(mat) <span class="comment">#删除重复项</span></span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr).tocsc() <span class="comment">#将csr转为csc</span></span><br></pre></td></tr></table></figure><h3 id="图结构sparse.csgraph"><strong>3.2图结构(sparse.csgraph)</strong></h3><ul><li><p>如何查看连接组件(连接组件是指图中所有互相连通的节点的集合)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connected_components()</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> connected_components</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(connected_components(newarr))</span><br></pre></td></tr></table></figure> 输出: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1, array([0, 0, 0], dtype=int32)) <span class="comment">#1代表一个连接组件，[0,0,0]代表每个元素属于哪个连接组件</span></span><br></pre></td></tr></table></figure></p></li><li><p>Dijkstra 算法调用(用于计算一个节点到其他所有节点的最短路径)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> dijkstra</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dijkstra(newarr, return_predecessors=<span class="literal">True</span>, indices=<span class="number">0</span>))</span><br></pre></td></tr></table></figure> 其中dijkstra的参数：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return_predecessors: 布尔值，设置 True，遍历所有路径，如果不想遍历所有路径可以设置为 False。</span><br><span class="line">indices: 元素的索引，返回该元素的所有路径。</span><br><span class="line"><span class="built_in">limit</span>: 路径的最大权重。</span><br></pre></td></tr></table></figure><ul><li><p>Floyd Warshall – 弗洛伊德算法(解决任意两点间的最短路径)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> floyd_warshall</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(floyd_warshall(newarr, return_predecessors=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>Bellman Ford – 贝尔曼-福特算法(任意两点间的最短路径)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> bellman_ford</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bellman_ford(newarr, return_predecessors=<span class="literal">True</span>, indices=<span class="number">0</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>dfs <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> depth_first_order</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(depth_first_order(newarr, <span class="number">1</span>)) <span class="comment">#传入邻接矩阵和起始遍历元素</span></span><br></pre></td></tr></table></figure></p></li><li><p>bfs <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> breadth_first_order</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(breadth_first_order(newarr, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    <summary type="html">本文介绍scipy几大基本模块及其与其相关数学原理</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="scipy" scheme="http://example.com/tags/scipy/"/>
    
  </entry>
  
  <entry>
    <title>seaborn实现统计图绘制</title>
    <link href="http://example.com/2025/08/10/seaborn/"/>
    <id>http://example.com/2025/08/10/seaborn/</id>
    <published>2025-08-10T06:50:00.000Z</published>
    <updated>2025-08-10T11:17:16.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一设置主题和样式">一、设置主题和样式</h2><p>在进行图形绘制之前先设置好主题/样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置主题/样式（可选）</span></span><br><span class="line">sns.set_theme(style=<span class="string">&quot;darkgrid&quot;</span>)  <span class="comment"># 可选风格：darkgrid, whitegrid, dark, white, ticks</span></span><br><span class="line">sns.set_palette(<span class="string">&quot;husl&quot;</span>)          <span class="comment"># 设置调色板</span></span><br><span class="line">sns.set_context(<span class="string">&quot;paper&quot;</span>)         <span class="comment"># 设置上下文（paper, notebook, talk, poster）</span></span><br></pre></td></tr></table></figure><p>以下是 <code>sns.set_theme()</code>、<code>sns.set_palette()</code>和 <code>sns.set_context()</code> 的可选参数整理成表格：</p><h3 id="sns.set_theme-的-style-参数图表风格">1.<strong><code>sns.set_theme()</code> 的 <code>style</code>参数（图表风格）</strong></h3><table><colgroup><col style="width: 16%" /><col style="width: 83%" /></colgroup><thead><tr><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td><code>"darkgrid"</code></td><td>默认值，灰色背景 + 白色网格线（适合大多数场景）</td></tr><tr><td><code>"whitegrid"</code></td><td>白色背景 + 深色网格线（适合强调数据精度）</td></tr><tr><td><code>"dark"</code></td><td>纯灰色背景，无网格线（简洁风格）</td></tr><tr><td><code>"white"</code></td><td>纯白色背景，无网格线（极简风格）</td></tr><tr><td><code>"ticks"</code></td><td>白色背景 + 坐标轴刻度（无网格线，类似 <code>"white"</code>但更清晰的刻度）</td></tr></tbody></table><hr /><h3 id="sns.set_palette-的调色板参数">2.<strong><code>sns.set_palette()</code> 的调色板参数</strong></h3><table><colgroup><col style="width: 22%" /><col style="width: 77%" /></colgroup><thead><tr><th>类型</th><th>可选值示例</th></tr></thead><tbody><tr><td><strong>Seaborn 内置名称</strong></td><td><code>"husl"</code>, <code>"deep"</code>, <code>"muted"</code>,<code>"bright"</code>, <code>"pastel"</code>, <code>"dark"</code>,<code>"colorblind"</code></td></tr><tr><td><strong>Matplotlib 色板</strong></td><td><code>"viridis"</code>, <code>"plasma"</code>, <code>"magma"</code>,<code>"cividis"</code>（需安装 Matplotlib）</td></tr><tr><td><strong>自定义颜色列表</strong></td><td><code>["#FF5733", "#33FF57", "#3357FF"]</code>（十六进制/RGB颜色列表）</td></tr><tr><td><strong>其他方法</strong></td><td><code>sns.color_palette("hls", 8)</code> 或<code>sns.husl_palette(10)</code> 生成动态调色板</td></tr></tbody></table><hr /><h3 id="sns.set_context-的-context-参数图表比例">3.<strong><code>sns.set_context()</code> 的 <code>context</code>参数（图表比例）</strong></h3><table><colgroup><col style="width: 15%" /><col style="width: 84%" /></colgroup><thead><tr><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td><code>"paper"</code></td><td>最小比例（适合论文或小图，字体和线条较细）</td></tr><tr><td><code>"notebook"</code></td><td>默认值（适合 Jupyter Notebook 或常规屏幕显示）</td></tr><tr><td><code>"talk"</code></td><td>较大比例（适合幻灯片演示，字体和线条加粗）</td></tr><tr><td><code>"poster"</code></td><td>最大比例（适合海报或大屏展示，元素显著放大）</td></tr></tbody></table><hr /><h3 id="附set_theme-的完整参数可选">附：<code>set_theme()</code>的完整参数（可选）</h3><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>style</code></td><td>str</td><td>上述风格之一（如 <code>"darkgrid"</code>）</td></tr><tr><td><code>palette</code></td><td>str/list</td><td>上述调色板之一</td></tr><tr><td><code>context</code></td><td>str/dict</td><td>上述上下文之一或自定义字典</td></tr><tr><td><code>font</code></td><td>str</td><td>字体（如 <code>"sans-serif"</code>）</td></tr><tr><td><code>font_scale</code></td><td>float</td><td>字体缩放因子（默认 1）</td></tr><tr><td><code>rc</code></td><td>dict</td><td>直接覆盖 Matplotlib 的 rcParams</td></tr></tbody></table><hr /><h3 id="示例代码">示例代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合设置</span></span><br><span class="line">sns.set_theme(</span><br><span class="line">    style=<span class="string">&quot;whitegrid&quot;</span>,      <span class="comment"># 风格</span></span><br><span class="line">    palette=<span class="string">&quot;husl&quot;</span>,         <span class="comment"># 调色板</span></span><br><span class="line">    context=<span class="string">&quot;talk&quot;</span>,         <span class="comment"># 上下文</span></span><br><span class="line">    font=<span class="string">&quot;Arial&quot;</span>,           <span class="comment"># 字体</span></span><br><span class="line">    font_scale=<span class="number">1.2</span>          <span class="comment"># 字体大小缩放</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独设置（等效于上面的 palette）</span></span><br><span class="line">sns.set_palette(<span class="string">&quot;husl&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果需要更详细的参数（如自定义 <code>rc</code>），可以进一步参考 <ahref="https://seaborn.pydata.org/generated/seaborn.set_theme.html">Seaborn官方文档</a>。</p><h2 id="二调用seaborn绘图函数">二、调用seaborn绘图函数</h2><p>Seaborn提供了多种高级绘图函数，主要分为以下几类：<strong>关系型</strong>、<strong>分布型</strong>、<strong>分类型</strong>、<strong>回归型</strong>、<strong>矩阵型</strong>和 <strong>其他辅助函数</strong>。以下是详细的分类说明和示例：</p><hr /><h3 id="关系型绘图relational-plots">1. <strong>关系型绘图（RelationalPlots）</strong></h3><p>用于展示变量之间的关系（通常用于连续数据）。</p><table><colgroup><col style="width: 10%" /><col style="width: 5%" /><col style="width: 42%" /><col style="width: 41%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.scatterplot()</code></td><td>散点图（基础）</td><td><code>sns.scatterplot(data=tips, x="total_bill", y="tip", hue="time")</code></td><td><img src="https://seaborn.pydata.org/_images/scatterplot_3_0.png"alt="scatterplot" /></td></tr><tr><td><code>sns.lineplot()</code></td><td>折线图（趋势展示）</td><td><code>sns.lineplot(data=flights, x="year", y="passengers", hue="month")</code></td><td><img src="https://seaborn.pydata.org/_images/lineplot_3_0.png"alt="lineplot" /></td></tr><tr><td><code>sns.relplot()</code></td><td>分面关系图（散点）</td><td><code>sns.relplot(data=tips, x="total_bill", y="tip", col="time", kind="scatter")</code></td><td><img src="https://seaborn.pydata.org/_images/scatterplot_29_0.png"alt="relplot scatter" /></td></tr></tbody></table><hr /><h3 id="分布型绘图distribution-plots">2.<strong>分布型绘图（Distribution Plots）</strong></h3><p>用于展示数据的分布特征。</p><table><colgroup><col style="width: 8%" /><col style="width: 6%" /><col style="width: 36%" /><col style="width: 48%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.histplot()</code></td><td>直方图（单变量分布）</td><td><code>sns.histplot(data=tips, x="total_bill", bins=20, kde=True)</code></td><td><img src="https://seaborn.pydata.org/_images/histplot_13_0.png"alt="histplot 示例" /> </td></tr><tr><td><code>sns.kdeplot()</code></td><td>核密度估计图（光滑分布）</td><td><code>sns.kdeplot(data=tips, x="total_bill", hue="time", fill=True)</code></td><td><img src="https://seaborn.pydata.org/_images/kdeplot_35_0.png"alt="kdeplot 示例" /> </td></tr><tr><td><code>sns.ecdfplot()</code></td><td>经验累积分布函数图</td><td><code>sns.ecdfplot(data=tips, x="total_bill", hue="time")</code></td><td><imgsrc="https://raw.githubusercontent.com/koen666/image/master/exp.png"alt="ecdfplot 示例" /> <em>(示意)</em> </td></tr><tr><td><code>sns.displot()</code></td><td>分面分布图（直方/KDE）</td><td><code>sns.displot(data=tips, x="total_bill", col="time", kind="hist")</code></td><td><img src="https://seaborn.pydata.org/_images/distributions_31_0.png"alt="displot 示例" /> </td></tr><tr><td><code>sns.boxplot()</code></td><td>箱线图（五数概括）</td><td><code>sns.boxplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><imgsrc="https://raw.githubusercontent.com/koen666/image/master/boxplot.png"alt="boxplot 示例" /> <em>(占位)</em> (<ahref="https://docs.kanaries.net/topics/Seaborn/sns-boxplot?utm_source=chatgpt.com"title="Seaborn Boxplot Tutorial: Create Custom Box Plots in Python">KanariesDocs</a>)</td></tr><tr><td><code>sns.violinplot()</code></td><td>小提琴图（分布+密度）</td><td><code>sns.violinplot(data=tips, x="day", y="total_bill", hue="sex", split=True)</code></td><td><img src="https://seaborn.pydata.org/_images/violinplot_5_0.png"alt="violinplot 示例" /> <em>(占位)</em> (<ahref="https://www.geeksforgeeks.org/python/violinplot-using-seaborn-in-python/?utm_source=chatgpt.com"title="Violinplot using Seaborn in Python - GeeksforGeeks">GeeksforGeeks</a>)</td></tr></tbody></table><hr /><h3 id="分类型绘图categorical-plots">3. <strong>分类型绘图（CategoricalPlots）</strong></h3><p>用于分类变量的可视化。</p><table><colgroup><col style="width: 10%" /><col style="width: 7%" /><col style="width: 43%" /><col style="width: 39%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.barplot()</code></td><td>条形图（均值/置信区间）</td><td><code>sns.barplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/barplot_9_0.png"alt="barplot" /></td></tr><tr><td><code>sns.countplot()</code></td><td>计数条形图（频次）</td><td><code>sns.countplot(data=tips, x="day", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/countplot_1_0.png"alt="countplot" /></td></tr><tr><td><code>sns.pointplot()</code></td><td>点图（均值+置信区间）</td><td><code>sns.pointplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/pointplot_6_0.png"alt="pointplot" /></td></tr><tr><td><code>sns.stripplot()</code></td><td>散点图（分类+抖动）</td><td><code>sns.stripplot(data=tips, x="day", y="total_bill", hue="sex", dodge=True)</code></td><td><img src="https://seaborn.pydata.org/_images/stripplot_8_0.png"alt="stripplot" /></td></tr><tr><td><code>sns.swarmplot()</code></td><td>蜂群图（无重叠散点）</td><td><code>sns.swarmplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/swarmplot_5_0.png"alt="swarmplot" /></td></tr><tr><td><code>sns.catplot()</code></td><td>分面绘制分类图（多功能）</td><td><code>sns.catplot(data=tips, x="day", y="total_bill", col="sex", kind="box")</code></td><td><img src="https://seaborn.pydata.org/_images/catplot_11_0.png"alt="catplot" /></td></tr></tbody></table><hr /><h3 id="回归型绘图regression-plots">4. <strong>回归型绘图（RegressionPlots）</strong></h3><p>用于展示变量间的统计关系（含回归线）。</p><table><colgroup><col style="width: 9%" /><col style="width: 7%" /><col style="width: 43%" /><col style="width: 39%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.regplot()</code></td><td>回归散点图（单次拟合）</td><td><code>sns.regplot(data=tips, x="total_bill", y="tip", ci=95)</code></td><td><img src="https://seaborn.pydata.org/_images/regplot_5_0.png"alt="regplot" /></td></tr><tr><td><code>sns.lmplot()</code></td><td>分面回归图（多功能）</td><td><code>sns.lmplot(data=tips, x="total_bill", y="tip", col="time", order=2)</code></td><td><img src="https://seaborn.pydata.org/_images/lmplot_12_0.png"alt="lmplot" /></td></tr></tbody></table><hr /><h3 id="矩阵型绘图matrix-plots">5. <strong>矩阵型绘图（MatrixPlots）</strong></h3><p>用于矩阵数据的可视化（如相关性、聚类）。</p><table><colgroup><col style="width: 11%" /><col style="width: 7%" /><col style="width: 36%" /><col style="width: 43%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.heatmap()</code></td><td>热力图（矩阵值颜色映射）</td><td><code>sns.heatmap(data.corr(), annot=True, cmap="coolwarm")</code></td><td><img src="https://seaborn.pydata.org/_images/heatmap_2_0.png"alt="heatmap" /></td></tr><tr><td><code>sns.clustermap()</code></td><td>聚类热力图（行列聚类）</td><td><code>sns.clustermap(data.corr(), method="ward", cmap="vlag")</code></td><td><img src="https://seaborn.pydata.org/_images/clustermap_1_0.png"alt="clustermap" /></td></tr></tbody></table><hr /><h3 id="其他辅助函数">6. <strong>其他辅助函数</strong></h3><table><colgroup><col style="width: 9%" /><col style="width: 7%" /><col style="width: 46%" /><col style="width: 37%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.pairplot()</code></td><td>变量两两关系矩阵</td><td><code>sns.pairplot(data=iris, hue="species", diag_kind="kde")</code></td><td><img src="https://seaborn.pydata.org/_images/pairplot_6_0.png"alt="pairplot" /></td></tr><tr><td><code>sns.jointplot()</code></td><td>双变量联合分布图</td><td><code>sns.jointplot(data=tips, x="total_bill", y="tip", kind="hex")</code></td><td><img src="https://seaborn.pydata.org/_images/jointplot_9_0.png"alt="jointplot" /></td></tr><tr><td><code>sns.FacetGrid()</code></td><td>自定义分面网格（底层控制）</td><td><code>g = sns.FacetGrid(tips, col="time"); g.map(sns.scatterplot, "total_bill", "tip")</code></td><td><img src="https://seaborn.pydata.org/_images/facetgrid_3_0.png"alt="FacetGrid" /></td></tr></tbody></table><hr /><h3 id="关键区别">关键区别：</h3><ul><li><strong>基础函数</strong>（如 <code>scatterplot</code>） vs<strong>分面函数</strong>（如 <code>relplot/catplot</code>）：<ul><li>基础函数直接绘图，分面函数通过 <code>col/row</code> 参数分面。</li></ul></li><li><strong>通用参数</strong>：<ul><li><code>data</code>：DataFrame 数据源。</li><li><code>x/y</code>：轴变量。</li><li><code>hue</code>：颜色分组。</li><li><code>style</code>：标记样式分组。</li><li><code>size</code>：大小分组。</li></ul></li></ul><hr /><h3 id="示例分面绘图catplot">示例：分面绘图（<code>catplot</code>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分面绘制箱线图（按 day 分组，按 sex 分面）</span></span><br><span class="line">sns.catplot(</span><br><span class="line">    data=tips, </span><br><span class="line">    x=<span class="string">&quot;day&quot;</span>, </span><br><span class="line">    y=<span class="string">&quot;total_bill&quot;</span>,  </span><br><span class="line">    col=<span class="string">&quot;sex&quot;</span>, </span><br><span class="line">    kind=<span class="string">&quot;box&quot;</span>,</span><br><span class="line">    height=<span class="number">4</span>, </span><br><span class="line">    aspect=<span class="number">0.7</span></span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="三结合-matplotlib-细化">三、结合 Matplotlib 细化</h2><p>Seaborn 虽然提供了简洁的高级 API，但底层仍基于 Matplotlib。通过<code>matplotlib.pyplot</code>（通常缩写为 <code>plt</code>）可以对Seaborn 生成的图表进行精细化调整。以下是详细分类说明和实用技巧：</p><hr /><h3 id="基础调整">3.1<strong>基础调整</strong></h3><h4 id="标题与坐标轴标签">3.1.1 <strong>标题与坐标轴标签</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">sns.boxplot(data=tips, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&quot;Daily Bill Distribution&quot;</span>, fontsize=<span class="number">14</span>, pad=<span class="number">20</span>)  <span class="comment"># pad 控制标题距离</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Day of Week&quot;</span>, fontsize=<span class="number">12</span>)                    <span class="comment"># X轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Bill ($)&quot;</span>, fontsize=<span class="number">12</span>)                 <span class="comment"># Y轴标签</span></span><br></pre></td></tr></table></figure><h4 id="刻度调整">3.1.2 <strong>刻度调整</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 旋转刻度标签（解决重叠问题）</span></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>, ha=<span class="string">&quot;right&quot;</span>)  <span class="comment"># ha: 旋转后对齐方式（right/center）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度范围和密度</span></span><br><span class="line">plt.yticks(ticks=[<span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>], fontsize=<span class="number">10</span>)  <span class="comment"># 自定义Y轴刻度</span></span><br><span class="line">plt.xlim(-<span class="number">0.5</span>, <span class="number">3.5</span>)                             <span class="comment"># 设置X轴范围</span></span><br></pre></td></tr></table></figure><hr /><h3 id="图例与颜色">3.2 <strong>图例与颜色</strong></h3><h4 id="图例控制">3.2.1 <strong>图例控制</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sns.scatterplot(data=tips, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整图例</span></span><br><span class="line">plt.legend(</span><br><span class="line">    title=<span class="string">&quot;Meal Time&quot;</span>,           <span class="comment"># 修改图例标题</span></span><br><span class="line">    loc=<span class="string">&quot;upper right&quot;</span>,           <span class="comment"># 位置（best, upper right, lower left等）</span></span><br><span class="line">    bbox_to_anchor=(<span class="number">1.3</span>, <span class="number">1</span>),     <span class="comment"># 将图例移到图外（右侧）</span></span><br><span class="line">    frameon=<span class="literal">False</span>                <span class="comment"># 去掉图例边框</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="颜色与样式">3.2.2 <strong>颜色与样式</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改单个元素的颜色（通过Matplotlib）</span></span><br><span class="line">plt.setp(plt.gca().get_xticklabels(), color=<span class="string">&quot;red&quot;</span>)  <span class="comment"># 设置X轴刻度为红色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改所有文本颜色（全局）</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;text.color&quot;</span>] = <span class="string">&quot;blue&quot;</span>  <span class="comment"># 影响标题、标签等</span></span><br></pre></td></tr></table></figure><hr /><h3 id="布局与子图">3.3 <strong>布局与子图</strong></h3><h4 id="调整边距与布局">3.3.1 <strong>调整边距与布局</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.tight_layout(pad=<span class="number">2</span>)  <span class="comment"># 自动调整子图间距（防止标签重叠）</span></span><br><span class="line">plt.subplots_adjust(</span><br><span class="line">    left=<span class="number">0.1</span>,            <span class="comment"># 左边距</span></span><br><span class="line">    right=<span class="number">0.9</span>,           <span class="comment"># 右边距</span></span><br><span class="line">    top=<span class="number">0.9</span>,             <span class="comment"># 上边距</span></span><br><span class="line">    bottom=<span class="number">0.2</span>           <span class="comment"># 下边距</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="与matplotlib子图结合">3.3.2<strong>与Matplotlib子图结合</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))  <span class="comment"># 创建1行2列的子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第一个子图绘制</span></span><br><span class="line">sns.histplot(data=tips, x=<span class="string">&quot;total_bill&quot;</span>, ax=axes[<span class="number">0</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&quot;Total Bill Distribution&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第二个子图绘制</span></span><br><span class="line">sns.boxplot(data=tips, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, ax=axes[<span class="number">1</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_xticklabels([<span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>])  <span class="comment"># 自定义刻度标签</span></span><br></pre></td></tr></table></figure><hr /><h3 id="高级定制">3.4 <strong>高级定制</strong></h3><h4 id="网格线与背景">3.4.1 <strong>网格线与背景</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;--&quot;</span>, alpha=<span class="number">0.6</span>)  <span class="comment"># 显示网格线（虚线，半透明）</span></span><br><span class="line">plt.gca().set_facecolor(<span class="string">&quot;#f5f5f5&quot;</span>)         <span class="comment"># 设置图表背景色（灰色）</span></span><br></pre></td></tr></table></figure><h4 id="注释与箭头">3.4.2 <strong>注释与箭头</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文本注释</span></span><br><span class="line">plt.text(</span><br><span class="line">    x=<span class="number">30</span>, y=<span class="number">10</span>,                           <span class="comment"># 坐标位置</span></span><br><span class="line">    s=<span class="string">&quot;Outlier Point&quot;</span>,                     <span class="comment"># 文本内容</span></span><br><span class="line">    fontsize=<span class="number">12</span>, </span><br><span class="line">    color=<span class="string">&quot;red&quot;</span>,</span><br><span class="line">    bbox=<span class="built_in">dict</span>(facecolor=<span class="string">&quot;white&quot;</span>, alpha=<span class="number">0.8</span>) <span class="comment"># 文本框样式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加箭头</span></span><br><span class="line">plt.annotate(</span><br><span class="line">    <span class="string">&quot;High Tip&quot;</span>, </span><br><span class="line">    xy=(<span class="number">40</span>, <span class="number">10</span>),                          <span class="comment"># 箭头指向的点</span></span><br><span class="line">    xytext=(<span class="number">35</span>, <span class="number">15</span>),                      <span class="comment"># 文本起始位置</span></span><br><span class="line">    arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&quot;-&gt;&quot;</span>, color=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr /><h3 id="保存图表">3.5 <strong>保存图表</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(</span><br><span class="line">    <span class="string">&quot;plot.png&quot;</span>, </span><br><span class="line">    dpi=<span class="number">300</span>,                   <span class="comment"># 分辨率</span></span><br><span class="line">    bbox_inches=<span class="string">&quot;tight&quot;</span>,       <span class="comment"># 去除白边</span></span><br><span class="line">    transparent=<span class="literal">True</span>           <span class="comment"># 透明背景（适合PPT）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr /><h3 id="调试技巧">3.6 <strong>调试技巧</strong></h3><ol type="1"><li><p><strong>获取当前Axes对象</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.gca()  <span class="comment"># 获取当前Axes</span></span><br><span class="line">ax.spines[<span class="string">&quot;top&quot;</span>].set_visible(<span class="literal">False</span>)  <span class="comment"># 隐藏顶部边框线</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>批量设置样式</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;axes.labelsize&quot;</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="string">&quot;xtick.labelsize&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">&quot;ytick.labelsize&quot;</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line">plt.rcParams.update(params)  <span class="comment"># 全局生效</span></span><br></pre></td></tr></table></figure></p></li></ol><hr /><h3 id="完整示例">完整示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 绘制基础图表</span></span><br><span class="line">sns.boxplot(data=tips, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, hue=<span class="string">&quot;sex&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用Matplotlib调整</span></span><br><span class="line">plt.title(<span class="string">&quot;Bill Distribution by Day and Gender&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Day&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Bill (USD)&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">15</span>)</span><br><span class="line">plt.legend(title=<span class="string">&quot;Gender&quot;</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 调整布局</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 保存或显示</span></span><br><span class="line">plt.savefig(<span class="string">&quot;boxplot.png&quot;</span>, dpi=<span class="number">200</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="四显示或者保存图表格">四、显示或者保存图表格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br><span class="line">plt.savefig(<span class="string">&quot;plot.png&quot;</span>, dpi=300, bbox_inches=<span class="string">&quot;tight&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍如何利用seaborn库实现统计图的绘制功能</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="saaborn" scheme="http://example.com/tags/saaborn/"/>
    
  </entry>
  
</feed>
