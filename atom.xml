<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木语</title>
  
  <subtitle>技术是逻辑，木是自然，语是表达</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-08-27T08:04:33.278Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>koen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Koa 框架使用</title>
    <link href="http://example.com/2025/08/25/Koa/"/>
    <id>http://example.com/2025/08/25/Koa/</id>
    <published>2025-08-25T05:20:00.000Z</published>
    <updated>2025-08-27T08:04:33.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作">0. 准备工作</h2><h3 id="安装-node.js建议-node-18">0.1 安装 Node.js（建议 Node 18+）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="comment"># v18.x 或更高</span></span><br></pre></td></tr></table></figure><h3 id="新建项目目录并初始化">0.2 新建项目目录并初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> koa-step-by-step</span><br><span class="line"><span class="built_in">cd</span> koa-step-by-step</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="esm-设置强烈建议">0.3 ESM 设置（强烈建议）</h3><p>在 <code>package.json</code> 顶层加入： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"module"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure> &gt; 作用：让Node 默认使用 ES模块语法（<code>import</code>/<code>export</code>），并支持<code>.mjs</code> 文件。</p><h3 id="推荐本地开发脚本可热重载">0.4 推荐本地开发脚本（可热重载）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D nodemon</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 里加入： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"scripts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"dev"</span><span class="punctuation">:</span> <span class="string">"nodemon --ext mjs,js,json --watch . app.mjs"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"start"</span><span class="punctuation">:</span> <span class="string">"node app.mjs"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure> &gt; 以后<code>npm run dev</code> 就会自动重启，开发体验更好。</p><hr><h2 id="阶段-a最小可运行的-koa无路由无中间件栈">1. 阶段 A：最小可运行的Koa（无路由、无中间件栈）</h2><h3 id="安装-koa">1.1 安装 Koa</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa</span><br></pre></td></tr></table></figure><h3 id="新建-app.mjs">1.2 新建 <code>app.mjs</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段A）</span></span><br><span class="line"><span class="comment">// 目标：</span></span><br><span class="line"><span class="comment">// 1）启动一个最简单的 Koa 服务器</span></span><br><span class="line"><span class="comment">// 2）所有请求都返回 "Hello Koa" 文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;   <span class="comment">// 引入 Koa 主类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();   <span class="comment">// 创建 Koa 实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use() 注册一个中间件函数（每个请求都会走这里）</span></span><br><span class="line"><span class="comment">// 这是最简单的中间件：设置响应体即可</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="comment">// ctx 是“上下文对象”，封装了 Request 和 Response 等常用属性</span></span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">'Hello Koa'</span>; <span class="comment">// 返回纯文本</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTP 服务，监听端口 3000</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：A（最小可运行服务）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h3 id="运行">1.3 运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>浏览器打开 http://localhost:3000 ，能看到 <strong>HelloKoa</strong>。</p><hr><h2 id="阶段-b引入路由koa-router让不同路径走不同逻辑">2. 阶段B：引入路由（koa-router），让不同路径走不同逻辑</h2><h3 id="安装路由中间件">2.1 安装路由中间件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-router</span><br></pre></td></tr></table></figure><h3 id="新建-routesindex.mjs">2.2 新建<code>routes/index.mjs</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段B）</span></span><br><span class="line"><span class="comment">// 目标：为不同 URL 配置不同处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例，并统一加上前缀（可选）</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/hello -&gt; 返回简单文本</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/hello'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">'Hello from /api/hello'</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/user/:id -&gt; 返回路径参数</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/user/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="comment">// 通过 ctx.params 获取 :id 的值</span></span><br><span class="line">  <span class="keyword">const</span> { id } = ctx.<span class="property">params</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">message</span>: <span class="string">`你请求的用户ID是 <span class="subst">${id}</span>`</span> };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="修改-app.mjs-使用路由">2.3 修改 <code>app.mjs</code>使用路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段B）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>; <span class="comment">// 引入路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由注册到应用（注意两步：routes + allowedMethods）</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：B（已加入路由）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p>此时访问： - GET <code>http://localhost:3000/api/hello</code> - GET<code>http://localhost:3000/api/user/123</code></p><hr><h2 id="阶段-c解析请求体koa-bodyparser并实现第一个-post-api">3. 阶段C：解析请求体（koa-bodyparser）并实现第一个 POST API</h2><h3 id="安装-body-解析中间件">3.1 安装 body 解析中间件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-bodyparser</span><br></pre></td></tr></table></figure><h3 id="在-app.mjs-启用-bodyparser">3.2 在 <code>app.mjs</code> 启用bodyParser</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段C）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 JSON / x-www-form-urlencoded 请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：C（支持解析请求体 &amp; POST 请求）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h3 id="在路由里加一个-post-示例">3.3 在路由里加一个 POST 示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段C，新增 POST 路由）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/hello'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">'Hello from /api/hello'</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/user/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { id } = ctx.<span class="property">params</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">message</span>: <span class="string">`你请求的用户ID是 <span class="subst">${id}</span>`</span> };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /api/echo -&gt; 回显请求体</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/echo'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="comment">// 通过 ctx.request.body 获取 JSON 或表单提交的数据</span></span><br><span class="line">  <span class="keyword">const</span> body = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = {</span><br><span class="line">    <span class="attr">received</span>: body,  <span class="comment">// 回显你发过来的数据</span></span><br><span class="line">    <span class="attr">tip</span>: <span class="string">'你已成功通过 POST 发送数据到 Koa 服务端'</span></span><br><span class="line">  };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p><strong>测试 POST：</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac/Linux</span></span><br><span class="line">curl -X POST http://localhost:3000/api/echo \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'{"name":"Alice","age":20}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows PowerShell（注意引号）</span></span><br><span class="line">curl -X POST http://localhost:3000/api/echo `</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> `</span><br><span class="line">  -d <span class="string">"{"</span><span class="string">"name"</span><span class="string">":"</span><span class="string">"Alice"</span><span class="string">","</span><span class="string">"age"</span><span class="string">":20}"</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="阶段-d全局错误处理-日志打印理解洋葱模型">4. 阶段 D：全局错误处理+ 日志打印（理解“洋葱模型”）</h2><h3 id="在-app.mjs-添加错误捕获中间件">4.1 在 <code>app.mjs</code>添加错误捕获中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段D）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① 全局错误处理中间件（最外层）：try/catch 所有下游中间件的异常</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 统计耗时</span></span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();           <span class="comment">// 交给下一个中间件</span></span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    <span class="comment">// 统一错误响应格式</span></span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">    <span class="comment">// 打印到控制台方便定位</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'❌ Error:'</span>, err);</span><br><span class="line">  } <span class="keyword">finally</span> {</span><br><span class="line">    <span class="keyword">const</span> ms = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">    <span class="comment">// 记录访问日志</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${ctx.method}</span> <span class="subst">${ctx.url}</span> - <span class="subst">${ctx.status || <span class="number">200</span>}</span> <span class="subst">${ms}</span>ms`</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② 解析请求体</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③ 注册业务路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：D（全局错误处理 &amp; 访问日志）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p><strong>理解洋葱模型</strong>：最外层中间件先进入，<code>await next()</code>后进入下一层；当下一层返回时，回到上一层继续执行 <code>finally</code>等收尾逻辑。</p><h3 id="在路由里人为抛错试试看">4.2 在路由里人为抛错试试看</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段D，增加一个错误示例）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/boom'</span>, <span class="title function_">async</span> () =&gt; {</span><br><span class="line">  <span class="comment">// 主动抛出一个错误，观察上文错误处理中间件如何工作</span></span><br><span class="line">  <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'模拟服务端异常：/api/boom'</span>);</span><br><span class="line">  err.<span class="property">status</span> = <span class="number">418</span>; <span class="comment">// 仅演示，418是Teapot彩蛋状态码</span></span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>访问 <code>GET /api/boom</code>，你会看到结构化的错误响应 +控制台日志。</p><hr><h2 id="阶段-e静态资源与-favicon避免多次计数404">5. 阶段 E：静态资源与favicon（避免多次计数/404）</h2><h3 id="安装-koa-static">5.1 安装 koa-static</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-static</span><br></pre></td></tr></table></figure><h3 id="在项目根目录建-public">5.2 在项目根目录建<code>public/</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ routes/</span><br><span class="line">│  └─ index.mjs</span><br><span class="line">└─ public/</span><br><span class="line">   ├─ index.html</span><br><span class="line">   └─ favicon.ico (可选)</span><br></pre></td></tr></table></figure><p>简单写一个 <code>public/index.html</code>： <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Koa Static<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Static<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是 public/index.html 静态页面。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="修改-app.mjs-启用静态资源">5.3 修改 <code>app.mjs</code>启用静态资源</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段E）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> { fileURLToPath } <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'❌ Error:'</span>, err);</span><br><span class="line">  } <span class="keyword">finally</span> {</span><br><span class="line">    <span class="keyword">const</span> ms = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${ctx.method}</span> <span class="subst">${ctx.url}</span> - <span class="subst">${ctx.status || <span class="number">200</span>}</span> <span class="subst">${ms}</span>ms`</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放 public 目录为静态资源根目录：访问 / 即可打开 public/index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：E（支持静态资源与 favicon）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p>现在访问 <code>http://localhost:3000/</code> 就能看到静态页面。</p><blockquote><p><strong>提示</strong>：许多浏览器会自动请求<code>/favicon.ico</code>。如果没有图标，偶尔会触发两次访问等“小惊喜”。把<code>favicon.ico</code> 放到 <code>public/</code>里，可以避免这类困扰。</p></blockquote><hr><h2 id="阶段-f可选模板渲染服务器端渲染一个简单页面">6. 阶段F（可选）：模板渲染（服务器端渲染一个简单页面）</h2><blockquote><p>如果你的服务只做 API，可跳过本节。这里展示如何用 <strong>EJS</strong>渲染模板。</p></blockquote><h3 id="安装依赖">6.1 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-views ejs</span><br></pre></td></tr></table></figure><h3 id="目录结构新增-views">6.2 目录结构新增 <code>views/</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ routes/</span><br><span class="line">│  └─ index.mjs</span><br><span class="line">├─ public/</span><br><span class="line">│  └─ index.html</span><br><span class="line">└─ views/</span><br><span class="line">   └─ home.ejs</span><br></pre></td></tr></table></figure><p><code>views/home.ejs</code>： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;EJS Demo&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;服务器时间：&lt;%= now %&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="在-app.mjs-配置视图中间件">6.3 在 <code>app.mjs</code>配置视图中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段F）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> views <span class="keyword">from</span> <span class="string">'koa-views'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> { fileURLToPath } <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">try</span> { <span class="keyword">await</span> <span class="title function_">next</span>(); } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置视图目录与模板引擎</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">views</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'views'</span>), { <span class="attr">extension</span>: <span class="string">'ejs'</span> }));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：F（支持 EJS 模板渲染）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><h3 id="在路由中渲染一个页面">6.4 在路由中渲染一个页面</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.mjs（阶段F，新增 SSR 路由）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...前面的接口保留</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /page/home -&gt; 渲染 EJS 模板（注意：此路由无 /api 前缀更合适，这里仅演示）</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/page/home'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">'home'</span>, {</span><br><span class="line">    <span class="attr">title</span>: <span class="string">'EJS 模板渲染示例'</span>,</span><br><span class="line">    <span class="attr">now</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">  });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><hr><h2 id="阶段-g逐步rest-化-用内存数组先做-crud">7. 阶段 G：逐步“REST 化”—— 用内存数组先做 CRUD</h2><blockquote><p>先<strong>不接数据库</strong>，用内存数组模拟数据源，把一套用户资源的CRUD 接口打通，理解 REST 的路径与方法约定。</p></blockquote><h3 id="新建-routesusers.mjs">7.1 新建<code>routes/users.mjs</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/users.mjs（阶段G）</span></span><br><span class="line"><span class="comment">// 目标：实现 RESTful 风格的用户资源接口（内存模拟数据库）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api/users'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个内存数组模拟“数据库表”</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Alice'</span>, <span class="attr">age</span>: <span class="number">20</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bob'</span>,   <span class="attr">age</span>: <span class="number">22</span> }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具：生成新ID（简单起见）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">nextId</span> = (<span class="params"></span>) =&gt; (users.<span class="property">length</span> ? users[users.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users  -&gt; 列表</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: users };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users/:id  -&gt; 详情</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (!user) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  }</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: user };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /api/users  -&gt; 新增</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">const</span> newUser = { <span class="attr">id</span>: <span class="title function_">nextId</span>(), name, age };</span><br><span class="line">  users.<span class="title function_">push</span>(newUser);</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">201</span>; <span class="comment">// 201：已创建</span></span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">201</span>, <span class="attr">data</span>: newUser };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PUT /api/users/:id  -&gt; 全量更新</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name 与 age'</span>);</span><br><span class="line">  users[idx] = { id, name, age };</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: users[idx] };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PATCH /api/users/:id -&gt; 部分更新（可选）</span></span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> patch = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (!user) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(user, patch);</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: user };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE /api/users/:id -&gt; 删除</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  <span class="keyword">const</span> deleted = users.<span class="title function_">splice</span>(idx, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: deleted };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h3 id="在-app.mjs-中注册新路由文件">7.2 在 <code>app.mjs</code>中注册新路由文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.mjs（阶段G）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'koa-static'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> { fileURLToPath } <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> baseRouter <span class="keyword">from</span> <span class="string">'./routes/index.mjs'</span>;</span><br><span class="line"><span class="keyword">import</span> usersRouter <span class="keyword">from</span> <span class="string">'./routes/users.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; {</span><br><span class="line">  <span class="keyword">try</span> { <span class="keyword">await</span> <span class="title function_">next</span>(); } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: ctx.<span class="property">status</span>, <span class="attr">message</span>: err.<span class="property">message</span> || <span class="string">'Server Error'</span> };</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册多个路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(baseRouter.<span class="title function_">routes</span>()).<span class="title function_">use</span>(baseRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line">app.<span class="title function_">use</span>(usersRouter.<span class="title function_">routes</span>()).<span class="title function_">use</span>(usersRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'✅ Server running at http://localhost:3000'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'   当前阶段：G（RESTful 内存版 users 资源）'</span>);</span><br><span class="line">});</span><br></pre></td></tr></table></figure><p><strong>测试：</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">curl http://localhost:3000/api/users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 详情</span></span><br><span class="line">curl http://localhost:3000/api/users/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">curl -X POST http://localhost:3000/api/users \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'{"name":"Carol","age":28}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">curl -X PUT http://localhost:3000/api/users/1 \</span><br><span class="line">  -H <span class="string">"Content-Type: application/json"</span> \</span><br><span class="line">  -d <span class="string">'{"name":"Alice Updated","age":21}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">curl -X DELETE http://localhost:3000/api/users/2</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>补充：CORS</strong> 若前端与后端不在同一域名/端口，需开启CORS： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/cors</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">'@koa/cors'</span>;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="如何实现数据库的增删改查cura">7.3如何实现数据库的增删改查(CURA)</h3><p>数据库的四个基本功能</p><table><thead><tr><th>方法</th><th>描述</th><th>对应 SQL</th></tr></thead><tbody><tr><td>Create</td><td>新增一条记录</td><td>INSERT</td></tr><tr><td>Read</td><td>查询记录</td><td>SELECT</td></tr><tr><td>Update</td><td>更新记录</td><td>UPDATE</td></tr><tr><td>Delete</td><td>删除记录</td><td>DELETE</td></tr></tbody></table><p>在 RESTful API 中，常用 HTTP 方法对应 CRUD：</p><table><thead><tr><th>HTTP 方法</th><th>路径</th><th>CRUD</th></tr></thead><tbody><tr><td>GET</td><td>/api/users</td><td>查询所有用户</td></tr><tr><td>GET</td><td>/api/users/:id</td><td>查询单个用户</td></tr><tr><td>POST</td><td>/api/users</td><td>新增用户</td></tr><tr><td>PUT</td><td>/api/users/:id</td><td>全量更新用户</td></tr><tr><td>PATCH</td><td>/api/users/:id</td><td>部分更新用户</td></tr><tr><td>DELETE</td><td>/api/users/:id</td><td>删除用户</td></tr></tbody></table><p>首先在根目录创建<code>.env</code>文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DB_HOST</span>=localhost</span><br><span class="line"><span class="attr">DB_USER</span>=root</span><br><span class="line"><span class="attr">DB_PASSWORD</span>=<span class="number">123456</span></span><br><span class="line"><span class="attr">DB_NAME</span>=testdb</span><br></pre></td></tr></table></figure><p>创建数据库模块<code>database/mysqldb.mjs</code>:</p><h2 id="section"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql <span class="keyword">from</span> <span class="string">'mysql2/promise'</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">'dotenv'</span>;</span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>({</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">user</span>: process.<span class="property">env</span>.<span class="property">DB_USER</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">queueLimit</span>: <span class="number">0</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用 SQL 查询函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">sql, params</span>) {</span><br><span class="line">  <span class="keyword">const</span> [results] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, params);</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------- 用户增删改查 -----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAllUsers</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT * FROM users'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 ID 获取用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUserById</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT * FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">return</span> results[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">name, age</span>) {</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'INSERT INTO users (name, age) VALUES (?, ?)'</span>, [name, age]);</span><br><span class="line">  <span class="keyword">return</span> { <span class="attr">id</span>: result.<span class="property">insertId</span>, name, age };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateUser</span>(<span class="params">id, name, age</span>) {</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'UPDATE users SET name = ?, age = ? WHERE id = ?'</span>, [name, age, id]);</span><br><span class="line">  <span class="keyword">return</span> { id, name, age };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteUser</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'DELETE FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">return</span> result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><h2 id="阶段-h重构为-mvcmodel-view-controller分层">8. 阶段 H：重构为MVC（Model-View-Controller）分层</h2><blockquote><p>现在把“路由里写业务”的代码拆分：<strong>路由仅负责匹配路径</strong>、<strong>Controller负责接入/出参与校验</strong>、<strong>Service负责业务</strong>、<strong>Model负责数据存储</strong>（此处先用内存/假数据，下一步再换 MySQL）。</p></blockquote><h3 id="目录调整">8.1 目录调整</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ routes/</span><br><span class="line">│  ├─ index.mjs</span><br><span class="line">│  └─ users.mjs       # 现在只保留路径定义和与 controller 的绑定</span><br><span class="line">├─ controllers/</span><br><span class="line">│  └─ userController.mjs</span><br><span class="line">├─ services/</span><br><span class="line">│  └─ userService.mjs</span><br><span class="line">├─ models/</span><br><span class="line">│  └─ userModel.mjs   # 此阶段仍用内存数组模拟 DB</span><br><span class="line">└─ public/</span><br></pre></td></tr></table></figure><h3 id="modelsusermodel.mjs数据访问层">8.2<code>models/userModel.mjs</code>（数据访问层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/userModel.mjs（阶段H - Model 层）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此处仍然用内存数组模拟数据库。</span></span><br><span class="line"><span class="comment"> * 下一阶段会把这里的实现换成 MySQL 版本，但对外暴露的方法名尽量保持一致，</span></span><br><span class="line"><span class="comment"> * 这样 Controller/Service 基本不用改动，实现“可替换的数据层”。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Alice'</span>, <span class="attr">age</span>: <span class="number">20</span> },</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bob'</span>,   <span class="attr">age</span>: <span class="number">22</span> }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">nextId</span> = (<span class="params"></span>) =&gt; (users.<span class="property">length</span> ? users[users.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findAll</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> users;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findById</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id) || <span class="literal">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">{ name, age }</span>) {</span><br><span class="line">  <span class="keyword">const</span> user = { <span class="attr">id</span>: <span class="title function_">nextId</span>(), name, age };</span><br><span class="line">  users.<span class="title function_">push</span>(user);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">id, { name, age }</span>) {</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  users[idx] = { id, name, age };</span><br><span class="line">  <span class="keyword">return</span> users[idx];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">id, patchObj</span>) {</span><br><span class="line">  <span class="keyword">const</span> user = users.<span class="title function_">find</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(user, patchObj);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> idx = users.<span class="title function_">findIndex</span>(<span class="function"><span class="params">u</span> =&gt;</span> u.<span class="property">id</span> === id);</span><br><span class="line">  <span class="keyword">if</span> (idx === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">splice</span>(idx, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>直接调用数据库增删改查函数，但保持原来的 RESTful API 路由结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/users.mjs（阶段G -&gt; 数据库版）</span></span><br><span class="line"><span class="comment">// 目标：实现 RESTful 风格的用户资源接口，直接操作 MySQL 数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="comment">// 从 mysqldb.mjs 导入封装好的增删改查函数</span></span><br><span class="line"><span class="keyword">import</span> { getAllUsers, getUserById, createUser, updateUser, deleteUser } <span class="keyword">from</span> <span class="string">'../database/mysqldb.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api/users'</span> });</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------- RESTful 路由 -----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users  -&gt; 获取用户列表</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title function_">getAllUsers</span>(); <span class="comment">// 调用数据库查询所有用户</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: users };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET /api/users/:id  -&gt; 根据 ID 获取用户详情</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">getUserById</span>(id); <span class="comment">// 调用数据库查询单个用户</span></span><br><span class="line">    <span class="keyword">if</span> (!user) {</span><br><span class="line">      ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    }</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: user };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST /api/users  -&gt; 新增用户</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="keyword">await</span> <span class="title function_">createUser</span>(name, age); <span class="comment">// 调用数据库新增用户</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">201</span>; <span class="comment">// 201：已创建</span></span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">201</span>, <span class="attr">data</span>: newUser };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PUT /api/users/:id  -&gt; 全量更新用户</span></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>, <span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> <span class="title function_">updateUser</span>(id, name, age); <span class="comment">// 调用数据库更新</span></span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: updatedUser };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// PATCH /api/users/:id  -&gt; 部分更新用户</span></span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> patch = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> existingUser = <span class="keyword">await</span> <span class="title function_">getUserById</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (!existingUser) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并已有数据与更新数据</span></span><br><span class="line">    <span class="keyword">const</span> updatedUser = <span class="keyword">await</span> <span class="title function_">updateUser</span>(id, patch.<span class="property">name</span> ?? existingUser.<span class="property">name</span>, patch.<span class="property">age</span> ?? existingUser.<span class="property">age</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: updatedUser };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE /api/users/:id  -&gt; 删除用户</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">'/:id'</span>, <span class="title function_">async</span> (ctx) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">const</span> success = <span class="keyword">await</span> <span class="title function_">deleteUser</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (!success) ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">`用户 <span class="subst">${id}</span> 已删除`</span> };</span><br><span class="line">  } <span class="keyword">catch</span> (err) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">500</span>, err.<span class="property">message</span>);</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="servicesuserservice.mjs业务层">8.3<code>services/userService.mjs</code>（业务层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/userService.mjs（阶段H - Service 层）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层：进行业务规则校验（示例简单化），</span></span><br><span class="line"><span class="comment"> * 将 Controller 的输入转为 Model 层所需格式；</span></span><br><span class="line"><span class="comment"> * 对 Model 输出进行二次处理（如脱敏、聚合等）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">'../models/userModel.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">listUsers</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findAll</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findById</span>(id);</span><br><span class="line">  <span class="keyword">return</span> user; <span class="comment">// 可添加“脱敏”等处理</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">{ name, age }</span>) {</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'参数不合法：需要 name(string) 与 age(number)'</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">create</span>({ name, age });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateUser</span>(<span class="params">id, { name, age }</span>) {</span><br><span class="line">  <span class="keyword">if</span> (!name || <span class="keyword">typeof</span> age !== <span class="string">'number'</span>) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'参数不合法：需要 name 与 age'</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">const</span> updated = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">update</span>(id, { name, age });</span><br><span class="line">  <span class="keyword">if</span> (!updated) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> updated;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patchUser</span>(<span class="params">id, patchObj</span>) {</span><br><span class="line">  <span class="keyword">const</span> updated = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">patch</span>(id, patchObj);</span><br><span class="line">  <span class="keyword">if</span> (!updated) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> updated;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">removeUser</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> deleted = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">remove</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (!deleted) {</span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> deleted;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="controllersusercontroller.mjs控制器层">8.4<code>controllers/userController.mjs</code>（控制器层）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controllers/userController.mjs（阶段H - Controller 层）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器：仅负责与 Koa 的 ctx 交互（取参、设响应、设状态码）。</span></span><br><span class="line"><span class="comment"> * 真正的业务逻辑不写在这里，全部委托给 Service。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">UserService</span> <span class="keyword">from</span> <span class="string">'../services/userService.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">list</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">listUsers</span>();</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">detail</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">getUser</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (!data) {</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">404</span>, <span class="string">`用户 <span class="subst">${id}</span> 不存在`</span>);</span><br><span class="line">  }</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">createUser</span>({ name, age });</span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">201</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">201</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> { name, age } = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">updateUser</span>(id, { name, age });</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> patchObj = ctx.<span class="property">request</span>.<span class="property">body</span> || {};</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">patchUser</span>(id, patchObj);</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">ctx</span>) {</span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title class_">UserService</span>.<span class="title function_">removeUser</span>(id);</span><br><span class="line">  ctx.<span class="property">body</span> = { <span class="attr">code</span>: <span class="number">200</span>, data };</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="routesusers.mjs只负责绑定路径到-controller">8.5<code>routes/users.mjs</code>（只负责绑定路径到 Controller）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/users.mjs（阶段H）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">UserController</span> <span class="keyword">from</span> <span class="string">'../controllers/userController.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>({ <span class="attr">prefix</span>: <span class="string">'/api/users'</span> });</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/'</span>,     <span class="title class_">UserController</span>.<span class="property">list</span>);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">'/:id'</span>,  <span class="title class_">UserController</span>.<span class="property">detail</span>);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">'/'</span>,    <span class="title class_">UserController</span>.<span class="property">create</span>);</span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">'/:id'</span>,  <span class="title class_">UserController</span>.<span class="property">update</span>);</span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">'/:id'</span>,<span class="title class_">UserController</span>.<span class="property">patch</span>);</span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">'/:id'</span>, <span class="title class_">UserController</span>.<span class="property">remove</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>至此，已经是一个<strong>结构清晰</strong>的 REST +MVC（无数据库版）。</p></blockquote><hr><h2 id="阶段-i把-model-换成-mysqlmysql2promise-连接池">9. 阶段 I：把Model 换成 MySQL（mysql2/promise + 连接池）</h2><h3 id="安装依赖-1">9.1 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql2 dotenv</span><br></pre></td></tr></table></figure><h3 id="新增-databasemysql.mjs连接池与-query-封装">9.2 新增<code>database/mysql.mjs</code>（连接池与 query 封装）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// database/mysql.mjs（阶段I - 数据库基础封装）</span></span><br><span class="line"><span class="keyword">import</span> mysql <span class="keyword">from</span> <span class="string">'mysql2/promise'</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">'dotenv'</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>(); <span class="comment">// 读取 .env</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池（推荐生产环境使用连接池，而非单连接）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>({</span><br><span class="line">  <span class="attr">host</span>:     process.<span class="property">env</span>.<span class="property">DB_HOST</span> || <span class="string">'localhost'</span>,</span><br><span class="line">  <span class="attr">user</span>:     process.<span class="property">env</span>.<span class="property">DB_USER</span> || <span class="string">'root'</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span> || <span class="string">'123456'</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span> || <span class="string">'testdb'</span>,</span><br><span class="line">  <span class="attr">port</span>:     <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span> || <span class="number">3306</span>),</span><br><span class="line">  <span class="attr">waitForConnections</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">queueLimit</span>: <span class="number">0</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的 SQL 执行函数：自动格式化参数，返回 rows</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">sql, params = []</span>) {</span><br><span class="line">  <span class="keyword">const</span> [rows] = <span class="keyword">await</span> pool.<span class="title function_">execute</span>(sql, params);</span><br><span class="line">  <span class="keyword">return</span> rows;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="在项目根目录创建-.env">9.3 在项目根目录创建<code>.env</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB_HOST=localhost</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASSWORD=123456</span><br><span class="line">DB_NAME=testdb</span><br></pre></td></tr></table></figure><h3 id="初始化数据表一次性">9.4 初始化数据表（一次性）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> users (</span><br><span class="line">  id   <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  age  <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="重写-modelsusermodel.mjs-为-mysql-实现">9.5 重写<code>models/userModel.mjs</code> 为 MySQL 实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/userModel.mjs（阶段I - MySQL 版本 Model 层）</span></span><br><span class="line"><span class="keyword">import</span> { query } <span class="keyword">from</span> <span class="string">'../database/mysql.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findAll</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 返回全部用户</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT id, name, age, created_at FROM users ORDER BY id ASC'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findById</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> rows = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'SELECT id, name, age, created_at FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">return</span> rows[<span class="number">0</span>] || <span class="literal">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">{ name, age }</span>) {</span><br><span class="line">  <span class="comment">// 使用 ? 占位符防止 SQL 注入</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'INSERT INTO users (name, age) VALUES (?, ?)'</span>, [name, age]);</span><br><span class="line">  <span class="comment">// 插入成功后返回新记录</span></span><br><span class="line">  <span class="keyword">const</span> inserted = <span class="keyword">await</span> <span class="title function_">findById</span>(result.<span class="property">insertId</span>);</span><br><span class="line">  <span class="keyword">return</span> inserted;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">id, { name, age }</span>) {</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'UPDATE users SET name = ?, age = ? WHERE id = ?'</span>, [name, age, id]);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">affectedRows</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">findById</span>(id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">id, patchObj</span>) {</span><br><span class="line">  <span class="comment">// 动态拼接字段（示例简化，仅允许 name/age）</span></span><br><span class="line">  <span class="keyword">const</span> fields = [];</span><br><span class="line">  <span class="keyword">const</span> params = [];</span><br><span class="line">  <span class="keyword">if</span> (patchObj.<span class="property">name</span> !== <span class="literal">undefined</span>) { fields.<span class="title function_">push</span>(<span class="string">'name = ?'</span>); params.<span class="title function_">push</span>(patchObj.<span class="property">name</span>); }</span><br><span class="line">  <span class="keyword">if</span> (patchObj.<span class="property">age</span> !== <span class="literal">undefined</span>)  { fields.<span class="title function_">push</span>(<span class="string">'age = ?'</span>);  params.<span class="title function_">push</span>(patchObj.<span class="property">age</span>); }</span><br><span class="line">  <span class="keyword">if</span> (fields.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">findById</span>(id); <span class="comment">// 无变化</span></span><br><span class="line">  params.<span class="title function_">push</span>(id);</span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">`UPDATE users SET <span class="subst">${fields.join(<span class="string">', '</span>)}</span> WHERE id = ?`</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql, params);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">affectedRows</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">findById</span>(id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">id</span>) {</span><br><span class="line">  <span class="keyword">const</span> toDelete = <span class="keyword">await</span> <span class="title function_">findById</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (!toDelete) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(<span class="string">'DELETE FROM users WHERE id = ?'</span>, [id]);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">affectedRows</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> toDelete;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><blockquote><p><strong>无感替换数据层</strong>：我们没有改 Controller/Service的代码，因为它们的调用接口未变。这就是解耦的好处。</p></blockquote><h3 id="运行与测试">9.6 运行与测试</h3><ol type="1"><li>确认本机 MySQL 已启动，并在 <code>.env</code> 中配置正确；</li><li>执行上面的建表 SQL；</li><li>启动服务：<code>npm run dev</code>；</li><li>使用前文的 <code>curl</code> 测试 CRUD 接口；现在数据真实写入MySQL！</li></ol><hr><h2 id="阶段-j额外增强可选但常用">10. 阶段J：额外增强（可选但常用）</h2><h3 id="cors跨域">10.1 CORS（跨域）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @koa/cors</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">'@koa/cors'</span>;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>({ <span class="attr">origin</span>: <span class="string">'*'</span> })); <span class="comment">// 生产建议更精细控制</span></span><br></pre></td></tr></table></figure><h3 id="请求参数校验轻量示例">10.2 请求参数校验（轻量示例）</h3><blockquote><p>在 Service 层已经有简单校验；进一步可以使用 <code>zod</code>,<code>joi</code>, <code>yup</code> 等库统一校验。</p></blockquote><h3 id="分页-模糊查询以-mysql-为例改造-model">10.3 分页 &amp;模糊查询（以 MySQL 为例，改造 Model）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：分页查询（page 从 1 开始）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">findPaged</span>(<span class="params">{ page = <span class="number">1</span>, pageSize = <span class="number">10</span>, keyword = <span class="string">''</span> }</span>) {</span><br><span class="line">  <span class="keyword">const</span> offset = (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">  <span class="keyword">const</span> where  = keyword ? <span class="string">'WHERE name LIKE ?'</span> : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> params = keyword ? [<span class="string">`%<span class="subst">${keyword}</span>%`</span>, pageSize, offset] : [pageSize, offset];</span><br><span class="line">  <span class="keyword">const</span> rows   = <span class="keyword">await</span> <span class="title function_">query</span>(</span><br><span class="line">    <span class="string">`SELECT id, name, age, created_at FROM users <span class="subst">${where}</span> ORDER BY id ASC LIMIT ? OFFSET ?`</span>,</span><br><span class="line">    params</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> totalRows = <span class="keyword">await</span> <span class="title function_">query</span>(</span><br><span class="line">    <span class="string">`SELECT COUNT(*) AS c FROM users <span class="subst">${keyword ? <span class="string">'WHERE name LIKE ?'</span> : <span class="string">''</span>}</span>`</span>,</span><br><span class="line">    keyword ? [<span class="string">`%<span class="subst">${keyword}</span>%`</span>] : []</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> { <span class="attr">list</span>: rows, <span class="attr">total</span>: totalRows[<span class="number">0</span>].<span class="property">c</span>, page, pageSize };</span><br><span class="line">}</span><br></pre></td></tr></table></figure><hr><h2 id="常见坑位排查faq">11. 常见坑位排查（FAQ）</h2><ul><li><strong><code>SyntaxError: Cannot use import statement outside a module</code></strong><ul><li><code>package.json</code> 是否含<code>"type":"module"</code>？或者文件是否使用 <code>.mjs</code>？</li></ul></li><li><strong><code>Error: Cannot find module 'xxx'</code></strong><ul><li>依赖没装或装在了错误目录：执行<code>npm i xxx</code>，确保命令行的当前目录正确。</li></ul></li><li><strong><code>ctx.request.body</code> 是<code>undefined</code></strong><ul><li>是否 <code>app.use(bodyParser())</code>放在了路由前面？是否设置了正确的 <code>Content-Type</code>？</li></ul></li><li><strong>中文乱码</strong><ul><li>前端/客户端请求与响应头编码问题；确保响应头<code>Content-Type</code> 与实际内容一致（Koa 会自动根据<code>ctx.body</code> 设定）。</li></ul></li><li><strong>MySQL 连接失败</strong><ul><li>检查 <code>.env</code>配置、数据库是否启动、端口是否被占用、防火墙、权限是否允许远程连接。</li></ul></li></ul><hr><h2 id="最终项目结构参考到阶段-i-为止">12. 最终项目结构参考（到阶段 I为止）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">koa-step-by-step/</span><br><span class="line">├─ app.mjs</span><br><span class="line">├─ public/</span><br><span class="line">│  └─ index.html</span><br><span class="line">├─ views/                # 若使用模板渲染</span><br><span class="line">│  └─ home.ejs</span><br><span class="line">├─ routes/</span><br><span class="line">│  ├─ index.mjs</span><br><span class="line">│  ├─ users.mjs</span><br><span class="line">├─ controllers/</span><br><span class="line">│  └─ userController.mjs</span><br><span class="line">├─ services/</span><br><span class="line">│  └─ userService.mjs</span><br><span class="line">├─ models/</span><br><span class="line">│  └─ userModel.mjs      # 阶段H：内存; 阶段I：MySQL</span><br><span class="line">├─ database/</span><br><span class="line">│  └─ mysql.mjs</span><br><span class="line">├─ .env</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure><hr><h2 id="一句话回顾每个阶段">13. 一句话回顾每个阶段</h2><ul><li><strong>A</strong>：只有一个文件的“Hello Koa”</li><li><strong>B</strong>：加上<code>koa-router</code>，不同路径返回不同内容</li><li><strong>C</strong>：解析请求体，拥有第一个 POST 接口</li><li><strong>D</strong>：全局错误处理 + 访问日志，理解“洋葱模型”</li><li><strong>E</strong>：静态资源与 favicon</li><li><strong>F</strong>：（可选）EJS 模板渲染</li><li><strong>G</strong>：RESTful 内存版 users 资源（CRUD）</li><li><strong>H</strong>：重构为 MVC（Controller/Service/Model 分层）</li><li><strong>I</strong>：替换 Model → MySQL（真实落库）</li><li><strong>J</strong>：加强：CORS、校验、分页等</li></ul>]]></content>
    
    
    <summary type="html">本文介绍Koa框架的基本使用</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="Koa" scheme="http://example.com/tags/Koa/"/>
    
    <category term="backen" scheme="http://example.com/tags/backen/"/>
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Latex全语法使用</title>
    <link href="http://example.com/2025/08/18/latex_2/"/>
    <id>http://example.com/2025/08/18/latex_2/</id>
    <published>2025-08-18T09:20:00.000Z</published>
    <updated>2025-08-25T04:58:28.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="latex-文档基本格式">1. LaTeX 文档基本格式</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}   <span class="comment">% 文档类型：article, report, book, beamer 等</span></span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]{inputenc} <span class="comment">% 支持中文时建议用 ctex 包</span></span><br><span class="line"><span class="keyword">\usepackage</span>{amsmath, amssymb} <span class="comment">% 数学符号扩展</span></span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx} <span class="comment">% 插入图片</span></span><br><span class="line"><span class="keyword">\usepackage</span>{listings} <span class="comment">% 插入代码</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}   <span class="comment">% 代码高亮需要颜色</span></span><br><span class="line"><span class="keyword">\usepackage</span>{hyperref} <span class="comment">% 超链接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>{LaTeX 学习示例}</span><br><span class="line"><span class="keyword">\author</span>{你的名字}</span><br><span class="line"><span class="keyword">\date</span>{<span class="keyword">\today</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}  <span class="comment">% 正文开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\maketitle</span>  <span class="comment">% 输出标题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{引言}</span><br><span class="line">这是 LaTeX 的一个简单示例。</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：</p></blockquote><ul><li><code>\documentclass{article}</code> 定义了文档类型。</li><li><code>\usepackage{}</code> 用来导入扩展包。</li><li><code>\section{}</code> 表示章节。</li><li><code>\maketitle</code> 会根据上面<code>\title</code>、<code>\author</code>、<code>\date</code>生成标题页。</li></ul><hr><h2 id="数学公式">2. 数学公式</h2><p>LaTeX 在数学公式排版方面很强大。</p><h3 id="行内公式">2.1 行内公式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个行内公式：<span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>。</span><br></pre></td></tr></table></figure><h3 id="独立公式">2.2 独立公式</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\[</span></span><br><span class="line">E = mc<span class="built_in">^</span>2</span><br><span class="line"><span class="keyword">\]</span></span><br></pre></td></tr></table></figure><h3 id="多行公式-amsmath-提供">2.3 多行公式 (amsmath 提供)</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{align}</span><br><span class="line">a<span class="built_in">^</span>2 + b<span class="built_in">^</span>2 <span class="built_in">&amp;</span>= c<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line">e<span class="built_in">^</span>{i<span class="keyword">\pi</span>} + 1 <span class="built_in">&amp;</span>= 0</span><br><span class="line"><span class="keyword">\end</span>{align}</span><br></pre></td></tr></table></figure><hr><h2 id="插入图片">3. 插入图片</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{figure}[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\textwidth</span>]{example.png}</span><br><span class="line">    <span class="keyword">\caption</span>{这是一个示例图片}</span><br><span class="line">    <span class="keyword">\label</span>{fig:example}</span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：</p></blockquote><ul><li><code>example.png</code> 必须和 <code>.tex</code>文件在同一目录。</li><li><code>width=0.5\textwidth</code> 控制大小。</li><li><code>\caption</code> 是图注，<code>\label</code> 用来引用。</li><li>之后可用 <code>见图~\ref{fig:example}</code> 来自动编号。</li></ul><hr><h2 id="插入代码">4. 插入代码</h2><p>LaTeX 用 <code>listings</code> 包来展示代码：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{lstlisting}[language=Python, caption=Python 示例, label={lst:py}]</span><br><span class="line">def hello():</span><br><span class="line">    print("Hello, LaTeX!")</span><br><span class="line"><span class="keyword">\end</span>{lstlisting}</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：</p></blockquote><ul><li><code>language=Python</code> 可以换成 <code>C</code>,<code>C++</code>, <code>Java</code> 等。</li><li><code>caption</code> 给代码块加标题，<code>label</code>方便引用。</li></ul><p>还可以加颜色主题：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\lstset</span>{</span><br><span class="line">  basicstyle=<span class="keyword">\ttfamily</span><span class="keyword">\small</span>,</span><br><span class="line">  keywordstyle=<span class="keyword">\color</span>{blue},</span><br><span class="line">  commentstyle=<span class="keyword">\color</span>{green!50!black},</span><br><span class="line">  stringstyle=<span class="keyword">\color</span>{red},</span><br><span class="line">  numbers=left,</span><br><span class="line">  numberstyle=<span class="keyword">\tiny</span>,</span><br><span class="line">  frame=single,</span><br><span class="line">  breaklines=true</span><br><span class="line">}</span><br></pre></td></tr></table></figure><hr><h2 id="表格">5. 表格</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{table}[h]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>{tabular}{|c|c|c|}</span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        姓名 <span class="built_in">&amp;</span> 年龄 <span class="built_in">&amp;</span> 成绩 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        张三 <span class="built_in">&amp;</span> 18 <span class="built_in">&amp;</span> 95 <span class="keyword">\\</span></span><br><span class="line">        李四 <span class="built_in">&amp;</span> 19 <span class="built_in">&amp;</span> 88 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>{tabular}</span><br><span class="line">    <span class="keyword">\caption</span>{学生信息表}</span><br><span class="line">    <span class="keyword">\label</span>{tab:student}</span><br><span class="line"><span class="keyword">\end</span>{table}</span><br></pre></td></tr></table></figure><hr><h2 id="超链接">6. 超链接</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\href</span>{<span class="link">https://www.latex-project.org</span>}{LaTeX 官网}</span><br></pre></td></tr></table></figure><hr><h2 id="中文支持">7. 中文支持</h2><p>如果你写中文文档，建议用 <code>ctex</code> 包：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}  <span class="comment">% 代替 article，更好支持中文</span></span><br></pre></td></tr></table></figure><p>这样就能直接写中文了。</p><hr><h2 id="有序列表和无序列表">8.有序列表和无序列表</h2><h3 id="无序列表itemize">8.1 无序列表（itemize）</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{itemize}</span><br><span class="line">    <span class="keyword">\item</span> 这是第一点</span><br><span class="line">    <span class="keyword">\item</span> 这是第二点</span><br><span class="line">    <span class="keyword">\item</span> 这是第三点</span><br><span class="line"><span class="keyword">\end</span>{itemize}</span><br></pre></td></tr></table></figure><p>默认显示为黑色小圆点：</p><ul><li>这是第一点</li><li>这是第二点</li><li>这是第三点</li></ul><h3 id="有序列表enumerate">8.2 有序列表（enumerate）</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{enumerate}</span><br><span class="line">    <span class="keyword">\item</span> 这是第一点</span><br><span class="line">    <span class="keyword">\item</span> 这是第二点</span><br><span class="line">    <span class="keyword">\item</span> 这是第三点</span><br><span class="line"><span class="keyword">\end</span>{enumerate}</span><br></pre></td></tr></table></figure><p>默认显示为数字编号：</p><ol type="1"><li>这是第一点</li><li>这是第二点</li><li>这是第三点</li></ol><h3 id="自定义编号样式">8.3 自定义编号样式</h3><p>借助 <code>enumitem</code> 包可以更灵活：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{enumitem}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{enumerate}[label=<span class="keyword">\roman</span>*.]  <span class="comment">% 罗马数字</span></span><br><span class="line">    <span class="keyword">\item</span> 第一条</span><br><span class="line">    <span class="keyword">\item</span> 第二条</span><br><span class="line"><span class="keyword">\end</span>{enumerate}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{enumerate}[label=(<span class="keyword">\alph</span>*)]  <span class="comment">% 小写字母</span></span><br><span class="line">    <span class="keyword">\item</span> 第一条</span><br><span class="line">    <span class="keyword">\item</span> 第二条</span><br><span class="line"><span class="keyword">\end</span>{enumerate}</span><br></pre></td></tr></table></figure><p>结果会变成：</p><ul><li>(i), (ii), (iii)…</li><li>(a), (b), (c)…</li></ul><h3 id="无编号列表只换行没有点数字">8.4无编号列表（只换行，没有点/数字）</h3><p>如果你只是想 <strong>逐行列出</strong>，但不要前面的符号，可以用<code>description</code> 或者自定义环境：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{itemize}[label={}] <span class="comment">% label={} 表示不要符号</span></span><br><span class="line">    <span class="keyword">\item</span> 第一行</span><br><span class="line">    <span class="keyword">\item</span> 第二行</span><br><span class="line">    <span class="keyword">\item</span> 第三行</span><br><span class="line"><span class="keyword">\end</span>{itemize}</span><br></pre></td></tr></table></figure><p>或者更简单：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一点 <span class="keyword">\\</span></span><br><span class="line">第二点 <span class="keyword">\\</span></span><br><span class="line">第三点</span><br></pre></td></tr></table></figure><p>（这里 <code>\\</code> 表示换行）</p><h2 id="bibtex-使用">9. BibTeX 使用</h2><p>在学术写作中，<strong>参考文献管理</strong>是必不可少的。LaTeX 提供了<code>BibTeX</code> 来管理参考文献，它的好处是：</p><ul><li>文献集中存放在一个 <code>.bib</code> 文件里，方便复用；</li><li>可以自动格式化（APA, IEEE, GB/T 7714 等）；</li><li>引用时只需 <code>\cite{}</code> 即可，省去手动编号。</li></ul><h3 id="建立-.bib-文件">9.1 建立 <code>.bib</code> 文件</h3><p>新建一个 <code>refs.bib</code>文件，里面存放参考文献信息。常见条目类型有：</p><ul><li><code>@article</code>：期刊文章</li><li><code>@book</code>：书籍</li><li><code>@inproceedings</code>：会议论文</li><li><code>@misc</code>：其他（网页、报JavaScript (ES6) codesnippets告等）</li></ul><p><strong>示例：refs.bib</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@article{einstein1905,</span><br><span class="line">  author    = {Albert Einstein},</span><br><span class="line">  title     = {Zur Elektrodynamik bewegter Körper},</span><br><span class="line">  journal   = {Annalen der Physik},</span><br><span class="line">  volume    = {17},</span><br><span class="line">  number    = {10},</span><br><span class="line">  pages     = {891--921},</span><br><span class="line">  year      = {1905},</span><br><span class="line">  publisher = {Wiley}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@book{knuth1984,</span><br><span class="line">  author    = {Donald E. Knuth},</span><br><span class="line">  title     = {The TeXbook},</span><br><span class="line">  year      = {1984},</span><br><span class="line">  publisher = {Addison-Wesley}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@misc{latexproject,</span><br><span class="line">  author    = {LaTeX Project},</span><br><span class="line">  title     = {LaTeX Project Website},</span><br><span class="line">  year      = {2025},</span><br><span class="line">  url       = {https://www.latex-project.org/}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="在主-.tex-文件中引用">9.2 在主 <code>.tex</code> 文件中引用</h3><p>在你的 <code>main.tex</code> 中：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"><span class="keyword">\usepackage</span>[utf8]{inputenc}</span><br><span class="line"><span class="keyword">\usepackage</span>{cite}   <span class="comment">% 文献引用宏包</span></span><br><span class="line"><span class="keyword">\usepackage</span>{hyperref} <span class="comment">% 让文献引用可点击</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line">爱因斯坦的相对论论文发表于1905年~<span class="keyword">\cite</span>{einstein1905}。</span><br><span class="line"><span class="keyword">\LaTeX</span> 的官方文档在~<span class="keyword">\cite</span>{latexproject} 可以找到。</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成参考文献</span></span><br><span class="line"><span class="keyword">\bibliographystyle</span>{plain}   <span class="comment">% 参考文献格式：plain, unsrt, abbrv, ieeetr 等</span></span><br><span class="line"><span class="keyword">\bibliography</span>{refs}         <span class="comment">% refs.bib 文件名，不要写扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></table></figure><h3 id="编译流程">9.3 编译流程</h3><p>和普通 <code>.tex</code> 不同，使用 <code>bibtex</code>时要多一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pdflatex main.tex</span><br><span class="line">bibtex main</span><br><span class="line">pdflatex main.tex</span><br><span class="line">pdflatex main.tex</span><br></pre></td></tr></table></figure><p>解释：</p><ol type="1"><li>第一次 <code>pdflatex</code> 会扫描引用并生成 <code>.aux</code>文件；</li><li><code>bibtex main</code> 会读取 <code>.aux</code> 文件，从<code>refs.bib</code> 抽取对应条目生成 <code>.bbl</code> 文件；</li><li>再跑两次 <code>pdflatex</code> 让引用编号和文献列表都正确显示。</li></ol><h3 id="常见参考文献样式">9.4 常见参考文献样式</h3><ul><li><code>plain</code>：作者字母顺序，数字编号</li><li><code>unsrt</code>：按引用顺序编号</li><li><code>abbrv</code>：作者名缩写</li><li><code>ieeetr</code>：IEEE 风格</li><li><code>apalike</code>：APA 风格</li></ul><p>例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>{ieeetr}</span><br></pre></td></tr></table></figure><h3 id="中文参考文献">9.5 中文参考文献</h3><p>中文参考文献推荐用 <strong>GB/T 7714 样式</strong>（国标）：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[backend=bibtex,style=gb7714-2015]{biblatex}</span><br><span class="line"><span class="keyword">\bibliography</span>{refs}</span><br></pre></td></tr></table></figure><p>然后在 <code>.bib</code> 文件里可以写中文，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@book{li2020,</span><br><span class="line">  author    = {李四 and 张三},</span><br><span class="line">  title     = {深度学习导论},</span><br><span class="line">  year      = {2020},</span><br><span class="line">  publisher = {清华大学出版社}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这样就能自动生成符合国标的中文参考文献。</p>]]></content>
    
    
    <summary type="html">本文介绍常见的Latex基本语法使用</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="latex" scheme="http://example.com/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>23年数学建模国赛</title>
    <link href="http://example.com/2025/08/12/23%E5%B9%B4%E5%9B%BD%E8%B5%9B/"/>
    <id>http://example.com/2025/08/12/23%E5%B9%B4%E5%9B%BD%E8%B5%9B/</id>
    <published>2025-08-12T07:00:00.000Z</published>
    <updated>2025-08-15T06:31:56.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干理解解读"><strong>题干理解解读</strong></h2><p>(从题干出发的想法)存在变量，keyword：历史销售，需求情况，蔬菜品种，进货价格，“成本加成定价”，商品品相，<spanclass="math inline"><em>s</em><em>a</em><em>l</em><em>e</em> = <em>f</em>(<em>t</em>)</span>(需求侧出发)</p><p>que1:菜类商品不同品类或不同单品之间可能存在一定的关联关系，请分析蔬菜各品类及单品销售量的分布规律及相互关系。</p><p>que2：考虑商超以品类为单位做补货计划，请分析各蔬菜品类的销售总量与成本加成定价的关系，并给出各蔬菜品类未来一周(2023年 7 月 1-7 日)的日补货总量和定价策略，使得商超收益最大</p><p>que3:因蔬菜类商品的销售空间有限，商超希望进一步制定单品的补货计划，要求可售单品总数控制在27-33 个，且各单品订购量满足最小陈列量 2.5 千克的要求。根据 2023年 6 月24-30 日的可售品种，给出 7 月 1日的单品补货量和定价策略，在尽量满足市场对各品类蔬菜商品需求的前提下，使得商超收益最大</p><h2 id="que1"><strong>que1</strong></h2><h3 id="自己的理解"><strong>1.1自己的理解</strong></h3><blockquote><p>看题目的意思应该是要去找到某个类似与矩阵的东西，里面填充各种单品之间的相关系数去得到不同单品之间的相关关系，然后写出不同单品之的分布规律</p></blockquote><ul><li><p>分布规律:按照商品编号进行分类统计，对销售进行求和，绘制出<code>分布型绘图</code>描述销售量关系</p></li><li><p>单品之间的相关关系：这里我考虑是用<code>皮尔逊相关系数矩阵</code>进行解决问题,然后需要去权衡哪些数值对他们的相关系数产生影响呢?</p></li></ul><h3 id="相关论文"><strong>1.2相关论文</strong></h3><ul><li><p>行文特点：</p><ul><li>摘要：首先进行XX算法，算出了XX，得到了XX，然后进行XX(图形绘制数据可视化……)操作，结论</li><li>正文： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先进行数据预处理，剔除无效数据（如退货导致的负销量数据）；然后计算描述性统计量（偏度系数、峰度系数、均值、中位数、标准差等），从数字特征层面分析分布规律；接着通过绘制柱状图、折线图等可视化图表，直观展示销售数据的分布趋势；之后运用相关系数分析（如 Spearman 相关系数）探究品类及单品间的关联关系；最后采用聚类算法（如 K-means++）对单品进行分类，进一步分析不同类别单品的销售特征及关联。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据处理相关：考量分布规律可选取如下数据<code>偏度系数</code>，<code>峰度系数</code>,<code>最小值，最大值，均值，中位数，标准差等常见统计学指标</code></p><p>同时分析规律可以从多角度出发，总销量/日销量等等</p></li><li><p>算法使用：</p><ul><li><p>Spearman相关系数</p><p>正如我之前的想法还挺正确，然后我找到了如下对比</p><table><colgroup><col style="width: 20%" /><col style="width: 39%" /><col style="width: 39%" /></colgroup><thead><tr><th>特征</th><th>Pearson相关系数矩阵</th><th>Spearman相关系数矩阵</th></tr></thead><tbody><tr><td>相关性类型</td><td>线性相关</td><td>单调相关（线性或非线性）</td></tr><tr><td>数据要求</td><td>要求数据正态分布</td><td>无分布要求，非参数方法</td></tr><tr><td>计算基础</td><td>原始数据值</td><td>数据的秩次</td></tr><tr><td>异常值敏感性</td><td>高度敏感</td><td>相对稳健</td></tr><tr><td>适用场景</td><td>线性关系明显的连续变量</td><td>非线性但单调的关系或有序变量</td></tr></tbody></table><p>同时他们两个的公式:</p><p><span class="math display">$$r_{XY} = \frac{\sum_{i=1}^n (X_i - \bar{X})(Y_i -\bar{Y})}{\sqrt{\sum_{i=1}^n (X_i - \bar{X})^2} \sqrt{\sum_{i=1}^n (Y_i- \bar{Y})^2}}$$</span></p><p><span class="math display">$$\rho = 1 - \frac{6 \sum_{i=1}^n d_i^2}{n(n^2 - 1)}$$</span></p><p>实现方法(多组数据得到spearman矩阵):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> spearmanr</span><br><span class="line"></span><br><span class="line">data = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">106</span>, <span class="number">86</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">113</span>, <span class="number">112</span>, <span class="number">110</span>],</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: [<span class="number">7</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">50</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">17</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">corr_matrix, p_matrix = spearmanr(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Spearman 相关系数矩阵：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(pd.DataFrame(corr_matrix, index=data.columns, columns=data.columns))</span><br></pre></td></tr></table></figure></li><li><p>Kmeans++聚类算法</p><p>Kmeans++算法相较于传统的Kmeans聚类算法优化了聚类中心的选取</p><p>实现方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 确定好分成几类</span><br><span class="line">2. 确定好影响变量</span><br><span class="line">3. 丢进spss即可自动聚类生成表单</span><br></pre></td></tr></table></figure></li><li><p>自相关函数ACF(探究分布规律) &gt;通过计算不同滞后阶段的自相关系数，绘制 ACF图，判定销售量时间序列的周期性。例如，发现总销量存在年周期（滞后 12个月处相关性显著）、周周期（滞后 7 天处相关性显著）和日周期（滞后 13小时处相关性显著）。</p><p>自相关系数计算公式: <span class="math display">$$\hat{\rho}(k) =\frac{\frac{1}{T-k} \sum_{t=k+1}^T (y_t - \bar{y})(y_{t-k} -\bar{y})}{\frac{1}{T} \sum_{t=1}^T (y_t - \bar{y})^2}$$</span></p><p>实现方法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据（示例：AR(1)过程）</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">y = np.random.normal(size=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    y[t] = <span class="number">0.7</span> * y[t-<span class="number">1</span>] + np.random.normal(<span class="number">0</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制ACF</span></span><br><span class="line">plot_acf(y, lags=<span class="number">20</span>, alpha=<span class="number">0.05</span>)  <span class="comment"># 95%置信区间</span></span><br><span class="line">plt.title(<span class="string">&quot;样本自相关函数（ACF）&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p></li><li><p>时间序列分解模型(探究分布规律):</p><p>首先明确分解是如何分解的<spanclass="math inline"><em>Y</em><sub><em>t</em></sub> = <em>T</em><sub><em>t</em></sub> × <em>S</em><sub><em>t</em></sub> × <em>C</em><sub><em>t</em></sub> × <em>E</em><sub><em>t</em></sub></span>,其中<spanclass="math inline"><em>Y</em><sub><em>t</em></sub></span>为观测值<spanclass="math inline"><em>T</em><sub><em>t</em></sub></span>为趋势成分<spanclass="math inline"><em>S</em><sub><em>T</em></sub></span>为季节性成分<spanclass="math inline"><em>C</em><sub><em>t</em></sub></span>为周期性成分<spanclass="math inline"><em>E</em><sub><em>t</em></sub></span>为随机噪声</p><p>作用:乘法时间序列分解的作用主要是挖掘蔬菜销售量在时间维度上的分布规律。通过将销售量时间序列拆解为趋势、季节性、周期性和随机噪声等成分，能够清晰呈现不同时间颗粒（如年、周、日）下销量的波动特征和变化趋势</p><p>实现方法: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from statsmodels.tsa.seasonal import seasonal_decompose</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备时间序列数据（索引为datetime类型，值为销量）</span></span><br><span class="line"><span class="built_in">df</span> = pd.read_csv(<span class="string">&#x27;销量数据.csv&#x27;</span>, parse_dates=[<span class="string">&#x27;销售日期&#x27;</span>], index_col=<span class="string">&#x27;销售日期&#x27;</span>)</span><br><span class="line">series = <span class="built_in">df</span>[<span class="string">&#x27;销量(千克)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法时间序列分解（以周周期为例，period=7）</span></span><br><span class="line">result = seasonal_decompose(series, model=<span class="string">&#x27;multiplicative&#x27;</span>, period=7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取各成分</span></span><br><span class="line">trend = result.trend  <span class="comment"># 趋势成分</span></span><br><span class="line">seasonal = result.seasonal  <span class="comment"># 季节性成分</span></span><br><span class="line">residual = result.resid  <span class="comment"># 残差（随机噪声）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化分解结果</span></span><br><span class="line">fig = result.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <imgsrc="https://raw.githubusercontent.com/koen666/image/master/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E8%A7%A3%E6%A8%A1%E5%9E%8B.png"alt="实现效果图" /></p></li><li><p>FP-Growth关联挖掘算法</p><p>这个算法常常用来从大量交易数据中发现频繁项集</p><p>ex:假设有如下交易</p><table><thead><tr><th>交易ID</th><th>购买物品</th></tr></thead><tbody><tr><td>T1</td><td>牛奶，面包，尿布</td></tr><tr><td>T2</td><td>可乐，面包，尿布</td></tr><tr><td>T3</td><td>牛奶，尿布</td></tr><tr><td>T4</td><td>牛奶，可乐，尿布</td></tr><tr><td>T5</td><td>可乐，面包</td></tr></tbody></table><p>设置最小支持度阈值为2 FP-Growth会构建FP-tree，发现频繁项集，比如{尿布}、{牛奶, 尿布}、{面包, 尿布} 等。</p><p>实现方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mlxtend.preprocessing <span class="keyword">import</span> TransactionEncoder</span><br><span class="line"><span class="keyword">from</span> mlxtend.frequent_patterns <span class="keyword">import</span> fpgrowth, association_rules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交易数据</span></span><br><span class="line">transactions = [</span><br><span class="line">    [<span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;cola&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;cola&#x27;</span>, <span class="string">&#x27;diaper&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;cola&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 编码成布尔矩阵</span></span><br><span class="line">te = TransactionEncoder()</span><br><span class="line">te_ary = te.fit(transactions).transform(transactions)</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(te_ary, columns=te.columns_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 挖掘频繁项集，设最小支持度为0.4</span></span><br><span class="line">freq_itemsets = fpgrowth(df, min_support=<span class="number">0.4</span>, use_colnames=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;频繁项集：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(freq_itemsets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 挖掘关联规则（最小置信度0.7）</span></span><br><span class="line">rules = association_rules(freq_itemsets, metric=<span class="string">&quot;confidence&quot;</span>, min_threshold=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n关联规则：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rules[[<span class="string">&#x27;antecedents&#x27;</span>, <span class="string">&#x27;consequents&#x27;</span>, <span class="string">&#x27;support&#x27;</span>, <span class="string">&#x27;confidence&#x27;</span>, <span class="string">&#x27;lift&#x27;</span>]])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="que2"><strong>que2</strong></h2><h3 id="自己的理解-1"><strong>2.1 自己的理解</strong></h3><p>首先题目要求<code>求解各蔬菜品类的销售总量与成本加成定价的关系</code>，肯定是需要用归化算法去拟合出个函数关系，其次并<code>给出各蔬菜品类未来一周(2023 年 7 月 1-7 日)的日补货总量和定价策略，使得商超收益最大</code>我觉得可以联系ACF值和上述求解得到的函数关系进行定义/利用归化算法解决决策问题</p><h3 id="相关论文-1"><strong>2.2 相关论文</strong></h3><ul><li><p>成本加成定价法</p><p>首先要考虑成本加成定价法和各蔬菜品类的销售总量，我们得先知道什么是成本加成定价法<imgsrc="https://raw.githubusercontent.com/koen666/image/master/%E6%88%90%E6%9C%AC%E5%8A%A0%E6%88%90%E5%AE%9A%E4%BB%B7.png"alt="成本加成定价法" /></p></li><li><p>Pearson相关系数(衡量是否线性相关) <span class="math display">$$  r_{XY} = \frac{\sum_{i=1}^n (X_i - \bar{X})(Y_i -\bar{Y})}{\sqrt{\sum_{i=1}^n (X_i - \bar{X})^2} \sqrt{\sum_{i=1}^n (Y_i- \bar{Y})^2}}  $$</span></p><ul><li>假设有 <em>n</em>个数据点（如不同时间或不同批次的销售数据），每个数据点包括：<ul><li><spanclass="math inline"><em>X</em><sub><em>i</em></sub></span>:成本加成定价</li><li><spanclass="math inline"><em>Y</em><sub><em>i</em></sub></span>:对应品类销售总量</li></ul></li></ul></li><li><p>Pearson相关系数检验方法(计算得到的相关系数r是否显著)=&gt;t检验、临界值法、p值法</p><table><colgroup><col style="width: 13%" /><col style="width: 30%" /><col style="width: 26%" /><col style="width: 30%" /></colgroup><thead><tr><th>检验方法</th><th>t值法</th><th>临界值法（查表法）</th><th>p值法</th></tr></thead><tbody><tr><td><strong>假设</strong></td><td><spanclass="math inline"><em>H</em><sub>0</sub> : <em>ρ</em> = 0</span><br><spanclass="math inline"><em>H</em><sub>1</sub> : <em>ρ</em> ≠ 0</span>（双侧）</td><td>同左</td><td>同左</td></tr><tr><td><strong>统计量</strong></td><td><span class="math inline">$t = \frac{r\sqrt{n-2}}{\sqrt{1-r^2}}$</span></td><td>直接使用样本相关系数 <spanclass="math inline"><em>r</em></span></td><td>同t值法，但计算 <span class="math inline"><em>p</em></span> 值</td></tr><tr><td><strong>关键值</strong></td><td>查<span class="math inline"><em>t</em></span>分布表（<spanclass="math inline"><em>d</em><em>f</em> = <em>n</em> − 2</span>）得<span class="math inline"><em>t</em><sub><em>α</em>/2</sub></span></td><td>查表得 <spanclass="math inline"><em>r</em><sub>critical</sub></span></td><td>计算 <span class="math inline"><em>p</em></span>值（或软件输出）</td></tr><tr><td><strong>判断标准</strong></td><td><spanclass="math inline">∥<em>t</em>∥ &gt; <em>t</em><sub><em>α</em>/2</sub></span>⇒ 拒绝<span class="math inline"><em>H</em><sub>0</sub></span></td><td><spanclass="math inline">∥<em>r</em>∥ &gt; <em>r</em><sub>critical</sub></span>⇒ 拒绝<span class="math inline"><em>H</em><sub>0</sub></span></td><td><span class="math inline"><em>p</em> &lt; <em>α</em></span> ⇒拒绝<span class="math inline"><em>H</em><sub>0</sub></span></td></tr><tr><td><strong>适用场景</strong></td><td>需计算t统计量，适合理论推导</td><td>快速查表，适合手工计算</td><td>现代统计软件默认方法，结果更直观</td></tr><tr><td><strong>优缺点</strong></td><td>严格但计算稍复杂</td><td>简单但需依赖临界值表</td><td>直接提供概率，无需查表</td></tr></tbody></table></li><li><p>线性回归拟合线性关系</p><ul><li>假定线性关系<ul><li>cpp:成本加成定价</li><li>cs:蔬菜品类销售总量 <spanclass="math display">$$cpp=\beta_{0}+\hat{\beta_{1}}cs$$</span></li></ul></li><li>使用最小二乘法求解系数 <span class="math display">$$\hat{\beta}_1 =\frac{\sum_{i=1}^n (cs_i - \bar{cs})(cpp_i - \bar{cpp})}{\sum_{i=1}^n(cs_i - \bar{cs})^2}$$</span></li></ul></li><li><p>Prophet 模型 &gt;主要用于单变量时间序列预测（如销量、股票价格、温度等）。它不直接用于变量关系预测（如回归分析），但可以间接变量关系该模型的基本形式 <spanclass="math display"><em>y</em>(<em>t</em>) = <em>g</em>(<em>t</em>) + <em>s</em>(<em>t</em>) + <em>h</em>(<em>t</em>) + <em>ϵ</em><sub><em>t</em></sub></span><spanclass="math inline"><em>g</em>(<em>t</em>)</span>：趋势向(线性/非线性)</p><p><spanclass="math inline"><em>s</em>(<em>t</em>)</span>:季节性(年/月/周)</p><p><spanclass="math inline"><em>h</em>(<em>t</em>)</span>:节假日效应</p><p>在本题中考虑到要分析各蔬菜品类的销售总量与成本加成定价的关系，于是引入外生回归项<spanclass="math inline"><em>β</em> · <em>P</em><em>r</em><em>i</em><em>c</em><em>e</em>(<em>t</em>)</span>,同时剔除季节性、趋势性和节假日效应，从而分离出定价对销量的净影响<spanclass="math display"><em>y</em>(<em>t</em>) = <em>g</em>(<em>t</em>) + <em>s</em>(<em>t</em>) + <em>h</em>(<em>t</em>) + <em>ϵ</em><sub><em>t</em></sub> + <em>β</em> · <em>P</em><em>r</em><em>i</em><em>c</em><em>e</em>(<em>t</em>)</span></p><p><strong>(1) 数据预处理</strong></p><ul><li><strong>价格变量</strong>：将成本加成定价（公式(11)）作为外生变量加入模型。</li><li><strong>节假日设定</strong>：定义中国节日（含无假期的节日如元宵节）及其窗口期（如春节前后7天）。</li><li><strong>季节性配置</strong>：仅保留<strong>周度</strong>（<code>weekly_seasonality</code>）和<strong>年度</strong>（<code>yearly_seasonality</code>）周期，忽略日内波动以降低噪声。</li></ul><p><strong>(2) 模型拟合</strong> 通过 <code>add_regressor()</code>引入价格变量： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> prophet <span class="keyword">import</span> Prophet</span><br><span class="line"></span><br><span class="line">model = Prophet(</span><br><span class="line">    yearly_seasonality=<span class="literal">True</span>,  <span class="comment"># 年度周期</span></span><br><span class="line">    weekly_seasonality=<span class="literal">True</span>,  <span class="comment"># 周度周期</span></span><br><span class="line">    holidays=holidays_df      <span class="comment"># 自定义节假日</span></span><br><span class="line">)</span><br><span class="line">model.add_regressor(<span class="string">&#x27;price&#x27;</span>)  <span class="comment"># 添加价格作为外生变量</span></span><br><span class="line">model.fit(df)</span><br></pre></td></tr></table></figure> <strong>(3) 成分分解</strong> 拟合后，通过<code>plot_components()</code> 可视化各成分：</p><ul><li><strong>趋势项</strong> <spanclass="math inline"><em>g</em>(<em>t</em>)</span>：反映长期需求变化（如2022年1月低谷）。</li><li><strong>季节性</strong> <spanclass="math inline"><em>s</em>(<em>t</em>)</span>：周度（周末销量高）和年度（7-8月旺季）模式。</li><li><strong>节假日</strong> <spanclass="math inline"><em>h</em>(<em>t</em>)</span>：国庆高峰、春节下降等。</li><li><strong>价格效应</strong> <spanclass="math inline"><em>β</em> ⋅ Price(<em>t</em>)</span>：回归系数<span class="math inline"><em>β</em></span>的符号和大小反映定价影响。</li></ul><p><strong>(4) 销量预测与关系分析</strong></p><ul><li><strong>预测</strong>：在已知未来价格时，可预测销量（需提供未来价格数据）。</li><li><strong>关系量化</strong>：通过 <spanclass="math inline"><em>β</em></span>判断定价与销量的关系（如表4中花叶类 <spanclass="math inline"><em>β</em> = −21.910</span>表示价格每升1元，销量降约21.9单位）。</li></ul></li><li><p>模拟退火算法</p><p><strong>1. 算法核心思想</strong> 模拟退火算法通过模拟金属退火过程中的<strong>温度冷却</strong> 和 <strong>能量最小化</strong>过程，在优化问题中实现：</p><ul><li><strong>全局搜索能力</strong>：通过允许暂时接受劣解，避免陷入局部最优</li><li><strong>渐进收敛性</strong>：随着温度降低，逐步聚焦到高质量解区域</li><li><strong>可控随机性</strong>：通过温度参数平衡探索（exploration）与利用（exploitation）</li></ul><p><strong>2. 在补货定价问题中的建模</strong><strong>优化目标</strong>： <span class="math display">$$  \max_{p_i} \text{Profit} = \sum_{i=1}^{7} \left[ p_i \cdot Q_i(p_i)\cdot (1-\gamma_i) - w_i \cdot \frac{Q_i(p_i)}{1-\delta_i} \right]  $$</span> 其中：</p><ul><li><spanclass="math inline"><em>p</em><sub><em>i</em></sub></span>：第<spanclass="math inline"><em>i</em></span>天的定价（决策变量）</li><li><spanclass="math inline"><em>Q</em><sub><em>i</em></sub>(<em>p</em><sub><em>i</em></sub>)</span>：由Prophet模型预测的销量（价格函数）</li><li><spanclass="math inline"><em>w</em><sub><em>i</em></sub></span>：批发价（外生输入）</li><li><spanclass="math inline"><em>γ</em><sub><em>i</em></sub></span>：折扣率</li><li><spanclass="math inline"><em>δ</em><sub><em>i</em></sub></span>：损耗率</li></ul><p><strong>3. 算法实现步骤</strong> <strong>步骤1：初始化</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">current_p = [last_day_price] * <span class="number">7</span>  <span class="comment"># 初始价格策略（如延续昨日价格）</span></span><br><span class="line">T = <span class="number">100.0</span>        <span class="comment"># 初始温度</span></span><br><span class="line">T_min = <span class="number">1e-5</span>     <span class="comment"># 终止温度</span></span><br><span class="line">alpha = <span class="number">0.95</span>     <span class="comment"># 冷却速率</span></span><br><span class="line">k = <span class="number">0</span>            <span class="comment"># 迭代计数器</span></span><br></pre></td></tr></table></figure></p><p><strong>步骤2：邻域搜索</strong> 生成新解时限制价格波动范围（±10%）：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">neighbor</span>(<span class="params">current_p</span>):</span><br><span class="line">    new_p = [p * (<span class="number">1</span> + random.uniform(-<span class="number">0.1</span>, <span class="number">0.1</span>)) <span class="keyword">for</span> p <span class="keyword">in</span> current_p]</span><br><span class="line">    <span class="keyword">return</span> np.clip(new_p, p_min, p_max)  <span class="comment"># 确保在合理价格区间</span></span><br></pre></td></tr></table></figure></p><p><strong>步骤3：收益计算</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_profit</span>(<span class="params">prices</span>):</span><br><span class="line">    total_profit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="comment"># 调用Prophet预测销量</span></span><br><span class="line">        Q = prophet.predict(prices[i])  </span><br><span class="line">        <span class="comment"># 计算当日收益</span></span><br><span class="line">        profit = prices[i] * Q * (<span class="number">1</span> - gamma[i]) - w[i] * Q / (<span class="number">1</span> - delta[i])</span><br><span class="line">        total_profit += profit</span><br><span class="line">    <span class="keyword">return</span> total_profit</span><br></pre></td></tr></table></figure></p><p><strong>步骤4：Metropolis准则</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delta_profit = new_profit - current_profit</span><br><span class="line"><span class="keyword">if</span> delta_profit &gt; <span class="number">0</span> <span class="keyword">or</span> random.random() &lt; math.exp(delta_profit / T):</span><br><span class="line">    current_p = new_p</span><br><span class="line">    current_profit = new_profit</span><br></pre></td></tr></table></figure></p><p><strong>步骤5：动态冷却与终止</strong> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T = alpha * T  <span class="comment"># 指数冷却</span></span><br><span class="line"><span class="keyword">if</span> T &lt; T_min <span class="keyword">or</span> k &gt; max_iter:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 参数调优建议</strong></p><table><colgroup><col style="width: 23%" /><col style="width: 26%" /><col style="width: 50%" /></colgroup><thead><tr><th><strong>参数</strong></th><th><strong>推荐值</strong></th><th><strong>调整依据</strong></th></tr></thead><tbody><tr><td>初始温度 $ T_0 $</td><td>100~1000</td><td>约为目标函数变化幅度的10倍</td></tr><tr><td>冷却速率 $ $</td><td>0.85~0.99</td><td>越接近1搜索越充分</td></tr><tr><td>邻域半径</td><td>当前解的5%~15%</td><td>平衡搜索广度与精度</td></tr><tr><td>最大迭代次数</td><td>1000~5000</td><td>取决于计算资源</td></tr></tbody></table><p><strong>5. 完整算法流程图</strong> <imgsrc="https://raw.githubusercontent.com/koen666/image/master/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95.png" /><strong>6. 实际应用示例</strong><strong>花叶类蔬菜优化结果</strong>：</p><table style="width:100%;"><colgroup><col style="width: 16%" /><col style="width: 22%" /><col style="width: 22%" /><col style="width: 19%" /><col style="width: 19%" /></colgroup><thead><tr><th>日期</th><th>最优定价（元）</th><th>预测销量（kg）</th><th>补货量（kg）</th><th>日收益（元）</th></tr></thead><tbody><tr><td>2023-07-01</td><td>12.5</td><td>320</td><td>355</td><td>3840</td></tr><tr><td>2023-07-02</td><td>12.8</td><td>310</td><td>344</td><td>3968</td></tr><tr><td>2023-07-03</td><td>12.6</td><td>315</td><td>350</td><td>3906</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p><strong>关键观察</strong>：</p><ol type="1"><li>价格在12.5~13.2元区间波动，与需求弹性匹配</li><li>周末（7月1-2日）定价略高，反映季节性规律</li><li>补货量 = 预测销量 / (1 - 0.1)（损耗率10%）</li></ol><p><strong>7. 算法优势验证</strong></p><table><thead><tr><th><strong>对比指标</strong></th><th>模拟退火算法</th><th>梯度下降法</th></tr></thead><tbody><tr><td>全局最优概率</td><td>85%</td><td>40%</td></tr><tr><td>收敛所需迭代次数</td><td>1200次</td><td>500次</td></tr><tr><td>对噪声鲁棒性</td><td>强</td><td>中等</td></tr><tr><td>参数敏感性</td><td>低</td><td>高</td></tr></tbody></table><p><strong>8. 可能的改进方向</strong></p><ol type="1"><li><p><strong>混合优化策略</strong>：</p><ul><li>先用模拟退火进行粗搜索，再用Nelder-Mead simplex进行局部优化<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line">result = minimize(loss_func, x0=SA_result, method=<span class="string">&#x27;Nelder-Mead&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>并行化改进</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> joblib <span class="keyword">import</span> Parallel, delayed</span><br><span class="line">Parallel(n_jobs=<span class="number">4</span>)(delayed(evaluate)(p) <span class="keyword">for</span> p <span class="keyword">in</span> candidate_solutions)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>智能冷却调度</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据搜索进度动态调整冷却速率</span></span><br><span class="line"><span class="keyword">if</span> acceptance_rate &lt; <span class="number">0.2</span>:</span><br><span class="line">    alpha = <span class="built_in">min</span>(<span class="number">0.99</span>, alpha * <span class="number">1.05</span>)</span><br></pre></td></tr></table></figure></p></li></ol><p><strong>9. 数学证明补充</strong><strong>收敛性证明</strong>（基于马尔可夫链）： 当满足：</p><ol type="1"><li>转移概率满足细致平衡条件： <spanclass="math display"><em>P</em><sub><em>i</em> → <em>j</em></sub> ⋅ <em>π</em><sub><em>i</em></sub> = <em>P</em><sub><em>j</em> → <em>i</em></sub> ⋅ <em>π</em><sub><em>j</em></sub></span></li><li>温度下降足够慢： <span class="math display">$$T_k \geq \frac{c}{\log(1+k)}$$</span> 则算法以概率1收敛到全局最优解。</li></ol></li></ul><h2 id="que3"><strong>que3</strong></h2><h3 id="自己的理解-2"><strong>3.1 自己的理解</strong></h3><p>这类问题无非就是在第二问上加入了限制条件，需要解决这类问题，应该是需要在第二问的算法中加入更多的回归项或是在计算中引入限定条件，需要建立一个针单品蔬菜补货与定价优化模型</p><h3 id="相关论文-2"><strong>3.2 相关论文</strong></h3><p>解决决策问题常用到线性规划的方法，可以分为如下几种</p><table><colgroup><col style="width: 23%" /><col style="width: 14%" /><col style="width: 19%" /><col style="width: 11%" /><col style="width: 30%" /></colgroup><thead><tr><th>模型类型</th><th>使用条件</th><th>解决问题类型</th><th>目标</th><th>求解方法</th></tr></thead><tbody><tr><td><strong>标准线性规划（LP）</strong></td><td>所有变量连续；目标函数和约束都是线性</td><td>生产计划、资源分配、投资组合优化</td><td>最大化利润或最小化成本</td><td>单纯形法、内点法、Python库：PuLP、CVXPY、Gurobi</td></tr><tr><td><strong>整数线性规划（ILP）</strong></td><td>部分或全部变量必须为整数</td><td>人员排班、设备选址、运输车辆选择</td><td>同上，但变量是整数</td><td>分支定界法（Branch &amp; Bound）、割平面法、Gurobi、CPLEX</td></tr><tr><td><strong>混合整数线性规划（MILP）</strong></td><td>既有连续变量，又有整数变量</td><td>工厂生产调度+设备开关控制、仓库选址+运输量优化</td><td>同上，同时考虑数量和开关决策</td><td>分支定界法、启发式方法、Gurobi、CPLEX</td></tr><tr><td><strong>目标规划（Goal Programming, GP）</strong></td><td>有多个冲突目标，需要平衡</td><td>企业利润、库存、员工调度多目标优化</td><td>尽量接近各目标，同时最小化偏差</td><td>单纯形法扩展、多目标优化方法</td></tr><tr><td><strong>运输/网络线性规划</strong></td><td>问题具有网络或运输结构</td><td>物流配送、流量网络优化</td><td>最小化运输成本或总流量损失</td><td>线性规划法、最短路法、网络流算法</td></tr><tr><td><strong>对偶线性规划（Dual LP）</strong></td><td>标准 LP 已建立</td><td>分析资源价值、影子价格</td><td>找出资源边际价值、优化资源配置</td><td>LP求解器 + 对偶关系分析</td></tr></tbody></table><p>对应建立的目标函数形式</p><table><colgroup><col style="width: 20%" /><col style="width: 53%" /><col style="width: 26%" /></colgroup><thead><tr><th>模型类型</th><th>目标函数形式</th><th>说明/特点</th></tr></thead><tbody><tr><td><strong>标准线性规划（LP）</strong></td><td><span class="math inline">Max/Min<em>z</em> = <em>c</em><sub>1</sub><em>x</em><sub>1</sub> + <em>c</em><sub>2</sub><em>x</em><sub>2</sub> + … + <em>c</em><sub><em>n</em></sub><em>x</em><sub><em>n</em></sub></span></td><td>线性组合，连续变量，常用于最大利润或最小成本</td></tr><tr><td><strong>整数线性规划（ILP）</strong></td><td><span class="math inline">Max/Min<em>z</em> = <em>c</em><sub>1</sub><em>y</em><sub>1</sub> + <em>c</em><sub>2</sub><em>y</em><sub>2</sub> + … + <em>c</em><sub><em>m</em></sub><em>y</em><sub><em>m</em></sub></span>,<spanclass="math inline"><em>y</em><sub><em>i</em></sub> ∈ ℤ</span></td><td>整数变量，目标仍是线性，但决策是离散的</td></tr><tr><td><strong>混合整数线性规划（MILP）</strong></td><td><span class="math inline">Max/Min<em>z</em> = <em>c</em><sup><em>T</em></sup><em>x</em> + <em>d</em><sup><em>T</em></sup><em>y</em></span>,<span class="math inline"><em>x</em> ∈ ℝ, <em>y</em> ∈ ℤ</span></td><td>既有连续变量又有整数变量，目标函数是连续+离散线性组合</td></tr><tr><td><strong>目标规划（Goal Programming, GP）</strong></td><td><span class="math inline">Minimize∑<sub><em>k</em></sub>(<em>d</em><sub><em>k</em></sub><sup>+</sup> + <em>d</em><sub><em>k</em></sub><sup>−</sup>)</span></td><td>引入偏差变量 <spanclass="math inline"><em>d</em><sub><em>k</em></sub><sup>+</sup>, <em>d</em><sub><em>k</em></sub><sup>−</sup></span>来衡量各目标偏离程度，最小化总体偏差</td></tr><tr><td><strong>运输/网络线性规划</strong></td><td><span class="math inline">Minimize<em>z</em> = ∑<sub><em>i</em>, <em>j</em></sub><em>c</em><sub><em>i</em><em>j</em></sub><em>x</em><sub><em>i</em><em>j</em></sub></span></td><td>线性成本函数，目标是最小运输成本或总流量损失</td></tr><tr><td><strong>对偶线性规划（Dual LP）</strong></td><td><span class="math inline">Max/Min<em>w</em> = <em>b</em><sup><em>T</em></sup><em>y</em></span></td><td>对应原问题的资源价值或约束边际价值，通过对偶关系求解</td></tr></tbody></table><p>在第三问中我们列举出它的变量关系可以发现</p><table><thead><tr><th>决策变量</th><th>含义</th><th>类型</th></tr></thead><tbody><tr><td><spanclass="math inline"><em>y</em><sub><em>i</em></sub> ∈ {0, 1}</span></td><td>是否采购第 <span class="math inline"><em>i</em></span> 种蔬菜</td><td>二进制整数</td></tr><tr><td><spanclass="math inline"><em>R</em><sub><em>i</em></sub> ≥ 2.5</span></td><td>第 <span class="math inline"><em>i</em></span>种蔬菜的补货量（千克）</td><td>连续变量</td></tr><tr><td><spanclass="math inline"><em>P</em><sub><em>i</em></sub></span></td><td>第 <span class="math inline"><em>i</em></span> 种蔬菜售价</td><td>连续变量</td></tr></tbody></table><p>明确我们使用这个模型的目的：在可售单品数量受限、每个单品补货量和售价受约束的情况下，使商超每天的总净收益最大。</p><p>这道习题需要建立的是<code>混合整数非线性规划（MINLP）</code>，欸为什么不是MILP呢，因为目标函数或约束中存在非线性关系</p><p>于是我们会建立出如下函数模型: <span class="math display">$$\max \sum_{i=1}^{49} y_i \Big[ R_i (P_i - B_i) - R_i B_i L_i \Big]$$</span> 建立步骤： — 在商超蔬菜经营中，有几个核心因素影响收益： 1.<strong>销售利润</strong></p><ul><li>每种蔬菜的售价 <spanclass="math inline"><em>P</em><sub><em>i</em></sub></span> 与批发成本<span class="math inline"><em>B</em><sub><em>i</em></sub></span>决定毛利润。</li><li>毛利润 = <spanclass="math inline"><em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub></span>每千克利润 × 补货量 <spanclass="math inline"><em>R</em><sub><em>i</em></sub></span></li></ul><ol start="2" type="1"><li><p><strong>损耗成本</strong></p><ul><li>蔬菜易变质，损耗率 <spanclass="math inline"><em>L</em><sub><em>i</em></sub></span>表示补货量中无法售出的比例。</li><li>损耗成本 = <spanclass="math inline"><em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub></span></li></ul></li><li><p><strong>采购选择</strong></p><ul><li>并非所有单品都需要采购，用 0-1 决策变量 <spanclass="math inline"><em>y</em><sub><em>i</em></sub></span>控制是否采购该单品。</li></ul></li></ol><hr /><p><strong>(1) 定义决策变量</strong></p><ul><li><spanclass="math inline"><em>y</em><sub><em>i</em></sub> ∈ {0, 1}</span>：是否采购第i 种单品</li><li><spanclass="math inline"><em>R</em><sub><em>i</em></sub></span>：补货量（连续变量）</li><li><spanclass="math inline"><em>P</em><sub><em>i</em></sub></span>：定价（连续变量）</li></ul><p><strong>(2) 利润与损耗建模</strong></p><ul><li><strong>毛利润</strong>：每个单品总利润 = 补货量 × （售价 −成本）</li></ul><p><spanclass="math display">利润<sub><em>i</em></sub> = <em>R</em><sub><em>i</em></sub>(<em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub>)</span></p><ul><li><strong>损耗成本</strong>：因损耗导致的成本</li></ul><p><spanclass="math display">损耗成本<sub><em>i</em></sub> = <em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub></span></p><ul><li><strong>净收益</strong>：利润 − 损耗</li></ul><p><spanclass="math display">净收益<sub><em>i</em></sub> = <em>R</em><sub><em>i</em></sub>(<em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub>) − <em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub></span></p><p><strong>(3) 采购决策引入 0-1 变量</strong></p><ul><li>只有当 <spanclass="math inline"><em>y</em><sub><em>i</em></sub> = 1</span>时，该单品才会被采购和计入收益。</li><li>因此单品净收益乘以 <spanclass="math inline"><em>y</em><sub><em>i</em></sub></span>：</li></ul><p><spanclass="math display"><em>y</em><sub><em>i</em></sub> ⋅ [<em>R</em><sub><em>i</em></sub>(<em>P</em><sub><em>i</em></sub> − <em>B</em><sub><em>i</em></sub>) − <em>R</em><sub><em>i</em></sub><em>B</em><sub><em>i</em></sub><em>L</em><sub><em>i</em></sub>]</span></p><p><strong>(4) 总收益</strong></p><ul><li>商超总收益 = 所有单品净收益之和：</li></ul><p><span class="math display">$$\text{总收益} = \sum_{i=1}^{49} y_i \big[R_i (P_i - B_i) - R_i B_i L_i\big]$$</span></p><p><strong>(5) 目标函数</strong></p><ul><li><strong>目标</strong>：最大化总收益</li></ul><p><span class="math display">$$\max \sum_{i=1}^{49} y_i \big[R_i (P_i - B_i) - R_i B_i L_i \big]$$</span></p><hr /><p>于是建立该模型之后我们可以利用模拟退火算法进行问题求解</p><p>具体实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 1. 输入数据示例</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">n = <span class="number">49</span>  <span class="comment"># 单品数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据，可替换为真实 49 个单品的历史成本和损耗率</span></span><br><span class="line">B = np.random.uniform(<span class="number">2</span>, <span class="number">10</span>, n)      <span class="comment"># 单位成本</span></span><br><span class="line">L = np.random.uniform(<span class="number">0</span>, <span class="number">0.3</span>, n)     <span class="comment"># 损耗率</span></span><br><span class="line">R_max = np.random.uniform(<span class="number">5</span>, <span class="number">20</span>, n)  <span class="comment"># 最大补货量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟退火参数</span></span><br><span class="line">T_init = <span class="number">100</span>      <span class="comment"># 初始温度</span></span><br><span class="line">alpha = <span class="number">0.95</span>      <span class="comment"># 温度衰减系数</span></span><br><span class="line">iter_per_temp = <span class="number">100</span>  <span class="comment"># 每温度迭代次数</span></span><br><span class="line">T_min = <span class="number">1e-3</span>         <span class="comment"># 最低温度</span></span><br><span class="line">min_total_y = <span class="number">27</span>     <span class="comment"># 最小采购品种数</span></span><br><span class="line">max_total_y = <span class="number">33</span>     <span class="comment"># 最大采购品种数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 2. 初始化决策变量</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, n)</span><br><span class="line"><span class="comment"># 保证总采购品种数在限制范围内</span></span><br><span class="line"><span class="keyword">while</span> y.<span class="built_in">sum</span>() &lt; min_total_y <span class="keyword">or</span> y.<span class="built_in">sum</span>() &gt; max_total_y:</span><br><span class="line">    y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, n)</span><br><span class="line"></span><br><span class="line">R = np.random.uniform(<span class="number">2.5</span>, R_max)</span><br><span class="line">P = np.random.uniform(<span class="number">1.1</span>*B, <span class="number">1.5</span>*B)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 3. 目标函数</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profit</span>(<span class="params">y, R, P</span>):</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(y * (R * (P - B) - R * B * L))</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 4. 随机扰动函数</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">perturb</span>(<span class="params">y, R, P</span>):</span><br><span class="line">    y_new = y.copy()</span><br><span class="line">    R_new = R.copy()</span><br><span class="line">    P_new = P.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机翻转一个 y_i</span></span><br><span class="line">    idx = np.random.randint(<span class="number">0</span>, n)</span><br><span class="line">    y_new[idx] = <span class="number">1</span> - y_new[idx]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保证总品种数在约束内</span></span><br><span class="line">    total_y = y_new.<span class="built_in">sum</span>()</span><br><span class="line">    <span class="keyword">if</span> total_y &lt; min_total_y:</span><br><span class="line">        y_new[np.random.choice(np.where(y_new==<span class="number">0</span>)[<span class="number">0</span>])] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> total_y &gt; max_total_y:</span><br><span class="line">        y_new[np.random.choice(np.where(y_new==<span class="number">1</span>)[<span class="number">0</span>])] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对 R_i 做小扰动</span></span><br><span class="line">    R_new += np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, n)</span><br><span class="line">    R_new = np.clip(R_new, <span class="number">2.5</span>, R_max)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对 P_i 做小扰动</span></span><br><span class="line">    P_new += np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, n)</span><br><span class="line">    P_new = np.clip(P_new, <span class="number">1.1</span>*B, <span class="number">1.5</span>*B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_new, R_new, P_new</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 5. 模拟退火主循环</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line">T = T_init</span><br><span class="line">best_y, best_R, best_P = y.copy(), R.copy(), P.copy()</span><br><span class="line">best_profit = profit(y, R, P)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> T &gt; T_min:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(iter_per_temp):</span><br><span class="line">        y_new, R_new, P_new = perturb(y, R, P)</span><br><span class="line">        new_profit = profit(y_new, R_new, P_new)</span><br><span class="line">        delta = new_profit - profit(y, R, P)</span><br><span class="line">        <span class="keyword">if</span> delta &gt; <span class="number">0</span> <span class="keyword">or</span> np.random.rand() &lt; np.exp(delta / T):</span><br><span class="line">            y, R, P = y_new, R_new, P_new</span><br><span class="line">            <span class="keyword">if</span> new_profit &gt; best_profit:</span><br><span class="line">                best_y, best_R, best_P = y.copy(), R.copy(), P.copy()</span><br><span class="line">                best_profit = new_profit</span><br><span class="line">    T *= alpha  <span class="comment"># 降温</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="comment"># 6. 输出结果</span></span><br><span class="line"><span class="comment"># -------------------------</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大收益: <span class="subst">&#123;best_profit:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> best_y[i] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Item <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>: 补货量 R=<span class="subst">&#123;best_R[i]:<span class="number">.2</span>f&#125;</span>, 定价 P=<span class="subst">&#123;best_P[i]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文用于介绍23年国赛C题解题思路和相关模型</summary>
    
    
    
    <category term="mathematical modeling" scheme="http://example.com/categories/mathematical-modeling/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>scipy基本模块及其使用</title>
    <link href="http://example.com/2025/08/11/scipy/"/>
    <id>http://example.com/2025/08/11/scipy/</id>
    <published>2025-08-11T05:50:14.009Z</published>
    <updated>2025-08-11T10:48:14.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一常量模块constants">一、常量模块(constants)</h2><p>以下是 <code>scipy.constants</code> 模块中主要常量的分类表格：</p><hr><h3 id="数学常数"><strong>1.1 数学常数</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值 (近似)</th></tr></thead><tbody><tr><td><code>pi</code></td><td>圆周率 π</td><td>3.141592653589793</td></tr><tr><td><code>golden</code></td><td>黄金比例 (φ)</td><td>1.618033988749895</td></tr><tr><td><code>e</code></td><td>自然对数的底 (e)</td><td>2.718281828459045</td></tr></tbody></table><hr><h3 id="通用物理常数"><strong>1.2 通用物理常数</strong></h3><table><colgroup><col style="width: 24%"><col style="width: 37%"><col style="width: 38%"></colgroup><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>c</code></td><td>真空光速</td><td>299792458.0 m/s</td></tr><tr><td><code>h</code></td><td>普朗克常数</td><td>6.62607015e-34 J·s</td></tr><tr><td><code>hbar</code></td><td>约化普朗克常数 (h/2π)</td><td>1.054571817e-34 J·s</td></tr><tr><td><code>G</code></td><td>万有引力常数</td><td>6.67430e-11 m³/(kg·s²)</td></tr><tr><td><code>g</code></td><td>标准重力加速度</td><td>9.80665 m/s²</td></tr></tbody></table><hr><h3 id="电磁学常数"><strong>1.3 电磁学常数</strong></h3><table><colgroup><col style="width: 24%"><col style="width: 37%"><col style="width: 38%"></colgroup><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>mu_0</code></td><td>真空磁导率</td><td>1.25663706212e-6 N/A²</td></tr><tr><td><code>epsilon_0</code></td><td>真空电容率</td><td>8.8541878128e-12 F/m</td></tr><tr><td><code>e</code> (或 <code>elementary_charge</code>)</td><td>元电荷</td><td>1.602176634e-19 C</td></tr></tbody></table><hr><h3 id="原子与核物理常数"><strong>1.4 原子与核物理常数</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>m_e</code></td><td>电子质量</td><td>9.1093837015e-31 kg</td></tr><tr><td><code>m_p</code></td><td>质子质量</td><td>1.67262192369e-27 kg</td></tr><tr><td><code>m_n</code></td><td>中子质量</td><td>1.67492749804e-27 kg</td></tr><tr><td><code>Rydberg</code></td><td>里德伯常数</td><td>10973731.568160 1/m</td></tr><tr><td><code>alpha</code></td><td>精细结构常数</td><td>0.0072973525693</td></tr></tbody></table><hr><h3 id="化学相关常数"><strong>1.5 化学相关常数</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值 (单位)</th></tr></thead><tbody><tr><td><code>N_A</code></td><td>阿伏伽德罗常数</td><td>6.02214076e23 1/mol</td></tr><tr><td><code>R</code></td><td>通用气体常数</td><td>8.314462618 J/(mol·K)</td></tr><tr><td><code>atomic_mass</code></td><td>原子质量单位 (u)</td><td>1.66053906660e-27 kg</td></tr></tbody></table><hr><h3 id="常用单位换算因子"><strong>1.6 常用单位换算因子</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>换算关系</th></tr></thead><tbody><tr><td><code>inch</code></td><td>英寸 → 米</td><td>0.0254 m</td></tr><tr><td><code>foot</code></td><td>英尺 → 米</td><td>0.3048 m</td></tr><tr><td><code>mile</code></td><td>英里 → 米</td><td>1609.344 m</td></tr><tr><td><code>lb</code></td><td>磅 → 千克</td><td>0.45359237 kg</td></tr><tr><td><code>eV</code></td><td>电子伏特 → 焦耳</td><td>1.602176634e-19 J</td></tr><tr><td><code>atm</code></td><td>标准大气压 → 帕斯卡</td><td>101325.0 Pa</td></tr></tbody></table><hr><h3 id="温度相关"><strong>1.7 温度相关</strong></h3><table><thead><tr><th>常量名</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td><code>zero_Celsius</code></td><td>0°C 对应的开尔文温度</td><td>273.15 K</td></tr><tr><td><code>degree_Fahrenheit</code></td><td>1°F 对应的开尔文间隔</td><td>0.555555… K</td></tr></tbody></table><hr><h3 id="查找所有常量的方法"><strong>查找所有常量的方法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有常量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(constants))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索包含关键词的常量（例如 'mass'）</span></span><br><span class="line"><span class="built_in">print</span>(constants.find(<span class="string">'mass'</span>))</span><br></pre></td></tr></table></figure><h2 id="二优化器optimize">二、优化器(optimize)</h2><p>scipy的优化器是数学建模的工具，它的核心目标是寻找函数的最小值（或最大值）、拟合模型、求解方程或系统，适用于传统数学问题<code>而非深度学习</code>(注意和pytorch这些的优化器函数区分开来)</p><h3 id="无约束优化"><strong>2.1 无约束优化</strong></h3><ul><li>用途:实现查找给定区间内函数的最小值</li><li>实现：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minimize_scalar() <span class="comment">#单变量函数</span></span><br><span class="line">minimize()        <span class="comment">#多变量函数</span></span><br></pre></td></tr></table></figure><ul><li>查找方法：<ul><li>单变量： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brent: 使用Brent方法（结合抛物线插值和黄金分割法）</span><br><span class="line"></span><br><span class="line">bounded: 在有界区间内搜索</span><br><span class="line"></span><br><span class="line">golden: 黄金分割法</span><br></pre></td></tr></table></figure></li><li>多变量 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Nelder-Mead: 单纯形法，不需要梯度</span><br><span class="line"></span><br><span class="line">BFGS: 拟牛顿法，需要梯度</span><br><span class="line"></span><br><span class="line">CG: 共轭梯度法</span><br><span class="line"></span><br><span class="line">L-BFGS-B: 有限内存BFGS，适用于大规模问题</span><br><span class="line"></span><br><span class="line">TNC: 截断牛顿法</span><br></pre></td></tr></table></figure></li></ul></li><li>实现实例： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from scipy.optimize import minimize</span><br><span class="line"></span><br><span class="line">def rosen(x):</span><br><span class="line">    <span class="string">""</span><span class="string">"Rosenbrock函数"</span><span class="string">""</span></span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">sum</span>(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)</span><br><span class="line"></span><br><span class="line">x0 = [1.3, 0.7, 0.8, 1.9, 1.2] <span class="comment">#x0 是多维优化问题（如 minimize）的 初始猜测值（initial guess）。优化算法需要一个起点开始搜索最小值。</span></span><br><span class="line">res = minimize(rosen, x0, method=<span class="string">'BFGS'</span>, options={<span class="string">'disp'</span>: True}) <span class="comment">#res 是 minimize 或 minimize_scalar 函数的返回结果，它是一个 OptimizeResult 对象 </span></span><br><span class="line"><span class="built_in">print</span>(res.x)</span><br></pre></td></tr></table></figure></li></ul><p>其中res的解有如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># res 包含的重要属性：</span></span><br><span class="line">res.x       <span class="comment"># 最优解（最小值点）</span></span><br><span class="line">res.fun     <span class="comment"># 最优解处的函数值</span></span><br><span class="line">res.nfev    <span class="comment"># 函数评估次数</span></span><br><span class="line">res.nit     <span class="comment"># 迭代次数</span></span><br><span class="line">res.success <span class="comment"># 是否成功收敛</span></span><br><span class="line">res.message <span class="comment"># 状态描述（如收敛信息）</span></span><br><span class="line">res.jac     <span class="comment"># 最优解处的梯度（一阶导数）</span></span><br><span class="line">res.hess    <span class="comment"># 最优解处的Hessian矩阵（二阶导数，如果可用）</span></span><br></pre></td></tr></table></figure><h3 id="全局优化"><strong>2.2 全局优化</strong></h3><ul><li>用途：避免传统优化算法（如 minimize）陷入局部最优解，转而寻找全局最优解。</li><li>实现函数：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basinhopping(): 盆地跳跃算法basinhopping(): 盆地跳跃算法</span><br><span class="line"></span><br><span class="line">shgo(): 单纯形同伦全局优化</span><br><span class="line"></span><br><span class="line">differential_evolution(): 差分进化算法</span><br></pre></td></tr></table></figure><ul><li>实例： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from scipy.optimize import basinhopping</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    <span class="built_in">return</span> np.cos(14.5 * x - 0.3) + (x + 0.2) * x</span><br><span class="line"></span><br><span class="line">res = basinhopping(func, x0=1.0)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"全局最小值：x = %.4f, f(x) = %.4f"</span> % (res.x, res.fun))</span><br></pre></td></tr></table></figure></li></ul><h3 id="最小二乘拟合"><strong>2.3 最小二乘拟合</strong></h3><ul><li><p>用途：解决非线性最小二乘问题，常用于曲线拟合。</p></li><li><p>实现函数： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">least_squares(): 解决非线性最小二乘问题</span><br><span class="line"></span><br><span class="line">curve_fit(): 使用最小二乘法拟合曲线</span><br></pre></td></tr></table></figure></p></li><li><p>实例：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from scipy.optimize import curve_fit</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型函数</span></span><br><span class="line">def func(x, a, b, c):</span><br><span class="line">    <span class="built_in">return</span> a * np.exp(-b * x) + c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成带噪声的数据</span></span><br><span class="line">xdata = np.linspace(0, 4, 50)</span><br><span class="line">y = func(xdata, 2.5, 1.3, 0.5)</span><br><span class="line">ydata = y + 0.2 * np.random.normal(size=len(xdata))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合数据</span></span><br><span class="line">popt, pcov = curve_fit(func, xdata, ydata)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"拟合参数："</span>, popt) <span class="comment">#返回[a,b,c]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"协方差矩阵"</span>, pcov) <span class="comment">#评估可靠性</span></span><br></pre></td></tr></table></figure><p>[a,b,c]-&gt; <span class="math inline"><em>f</em>(<em>x</em>) = <em>a</em><em>e</em><sup>−<em>b</em><em>x</em></sup> + <em>c</em></span></p><h3 id="方程求根"><strong>2.4 方程求根</strong></h3><ul><li><p>方法： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root_scalar(): 单变量方程求根 <span class="comment">#brentq, brenth, ridder, bisect, newton: 特定算法</span></span><br><span class="line"></span><br><span class="line">root(): 多变量方程组求根</span><br></pre></td></tr></table></figure></p></li><li><p>实现： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> root_scalar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">3</span> - <span class="number">1</span>  <span class="comment"># 寻找x^3 = 1的解</span></span><br><span class="line"></span><br><span class="line">sol = root_scalar(f, bracket=[<span class="number">0</span>, <span class="number">2</span>], method=<span class="string">'brentq'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"方程的根："</span>, sol.root)</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> root</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> [x[<span class="number">0</span>] + <span class="number">0.5</span> * (x[<span class="number">0</span>] - x[<span class="number">1</span>])**<span class="number">3</span> - <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span> * (x[<span class="number">1</span>] - x[<span class="number">0</span>])**<span class="number">3</span> + x[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">sol = root(func, [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"方程组的解："</span>, sol.x)</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="线性规划"><strong>2.5 线性规划</strong></h3><ul><li>什么是线性规划：结构化决策框架，其核心是在一个由线性关系定义的几何空间中，寻找最优的”角落”解。比如如下这个问题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">想象你是一个工厂经理，需要决定生产两种产品A和B的数量：</span><br><span class="line"></span><br><span class="line">生产A每个利润100元，B每个利润150元</span><br><span class="line"></span><br><span class="line">但受限于：</span><br><span class="line"></span><br><span class="line">原材料X：生产A消耗3kg，B消耗2kg，总共只有120kg</span><br><span class="line"></span><br><span class="line">工时：生产A需要2小时，B需要4小时，总共只有160小时</span><br><span class="line"></span><br><span class="line">线性规划就是帮你找到在资源限制下能获得最大利润的生产方案</span><br><span class="line"></span><br></pre></td></tr></table></figure> <span class="math display"><em>p</em><em>r</em><em>o</em><em>f</em><em>i</em><em>t</em> = −100<em>x</em> − 150<em>y</em></span><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="19.774ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 8740.2 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2528,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mrow" transform="translate(3222.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(41,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1100,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mo" transform="translate(5128.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mrow" transform="translate(6184.2,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2028,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g></g></g></svg></mjx-container></span></li></ul><p>抽象一下就是： 输入: (A, b, c) → 处理: 代数变换 → 输出: x*</p><p>其中：</p>A 是约束矩阵（系统限制的编码）=&gt;不等式左侧系数 A= $<p>$</p><p>b 是资源向量（约束条件的量化）=&gt;不等式右侧系数 b=[120,160]</p><p>c 是价值向量（目标函数的权重）=&gt;利润最大化 c=[-100,-150](线性规划默认求最小值问题) <span class="math inline"><em>f</em>(<em>x</em>) = −100<em>x</em> − 150<em>y</em></span></p><p>x* 是最优决策（系统输出的解决方案）</p><ul><li>实现实例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> linprog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小化 c^T x</span></span><br><span class="line"><span class="comment"># 约束条件: A_ub x &lt;= b_ub, A_eq x = b_eq</span></span><br><span class="line">c = [-<span class="number">1</span>, <span class="number">4</span>]  <span class="comment"># 目标函数系数</span></span><br><span class="line">A_ub = [[-<span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>]]  <span class="comment"># 不等式约束矩阵</span></span><br><span class="line">b_ub = [<span class="number">6</span>, <span class="number">4</span>]             <span class="comment"># 不等式约束右侧</span></span><br><span class="line"></span><br><span class="line">res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=(<span class="literal">None</span>, <span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最优解："</span>, res.x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最优值："</span>, res.fun)</span><br></pre></td></tr></table></figure><h3 id="约束优化"><strong>2.6 约束优化</strong></h3><ul><li>用途：在有等式或不等式约束条件下优化目标函数。</li><li>方法：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minimize() 配合约束参数</span><br><span class="line"></span><br><span class="line">SLSQP: 序列二次规划算法</span><br><span class="line"></span><br><span class="line">trust-constr: 信赖域算法</span><br></pre></td></tr></table></figure><ul><li>实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]*x[<span class="number">3</span>]*(x[<span class="number">0</span>]+x[<span class="number">1</span>]+x[<span class="number">2</span>])+x[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">constraint1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]*x[<span class="number">1</span>]*x[<span class="number">2</span>]*x[<span class="number">3</span>]-<span class="number">25.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">constraint2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x**<span class="number">2</span>)-<span class="number">40.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始猜测</span></span><br><span class="line">x0 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置约束</span></span><br><span class="line">con1 = {<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: constraint1}</span><br><span class="line">con2 = {<span class="string">'type'</span>: <span class="string">'eq'</span>, <span class="string">'fun'</span>: constraint2}</span><br><span class="line">cons = [con1,con2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化</span></span><br><span class="line">sol = minimize(objective,x0,method=<span class="string">'SLSQP'</span>,constraints=cons)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最优解："</span>, sol.x)</span><br></pre></td></tr></table></figure><h2 id="三稀疏矩阵sparse">三、稀疏矩阵(sparse)</h2><p>专门针对那些绝大多数元素为零的矩阵数据结构</p><h3 id="处理稀疏矩阵"><strong>3.1 处理稀疏矩阵</strong></h3><ul><li>方法:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSC - 压缩稀疏列（Compressed Sparse Column），按列压缩。</span><br><span class="line">CSR - 压缩稀疏行（Compressed Sparse Row），按行压缩。</span><br></pre></td></tr></table></figure><ul><li>实现:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(csr_matrix(arr)) </span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(0, 5)        1</span><br><span class="line">(0, 6)        1</span><br><span class="line">(0, 8)        2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(csr_matrix(arr).data) <span class="comment">#输出不为零的元素[1,1,2]</span></span><br><span class="line"><span class="built_in">print</span>(csr_matrix(arr).count_nonzero()) <span class="comment">#输出非0元素总数3</span></span><br><span class="line"></span><br><span class="line">mat = csr_matrix(arr)</span><br><span class="line">mat.eliminate_zeros()</span><br><span class="line"><span class="built_in">print</span>(mat) <span class="comment">#删除矩阵中的0元素</span></span><br><span class="line"></span><br><span class="line">mat = csr_matrix(arr)</span><br><span class="line">mat.sum_duplicates()</span><br><span class="line"><span class="built_in">print</span>(mat) <span class="comment">#删除重复项</span></span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr).tocsc() <span class="comment">#将csr转为csc</span></span><br></pre></td></tr></table></figure><h3 id="图结构sparse.csgraph"><strong>3.2图结构(sparse.csgraph)</strong></h3><ul><li><p>如何查看连接组件(连接组件是指图中所有互相连通的节点的集合)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connected_components()</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> connected_components</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(connected_components(newarr))</span><br></pre></td></tr></table></figure> 输出: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1, array([0, 0, 0], dtype=int32)) <span class="comment">#1代表一个连接组件，[0,0,0]代表每个元素属于哪个连接组件</span></span><br></pre></td></tr></table></figure></p></li><li><p>Dijkstra 算法调用(用于计算一个节点到其他所有节点的最短路径)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> dijkstra</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dijkstra(newarr, return_predecessors=<span class="literal">True</span>, indices=<span class="number">0</span>))</span><br></pre></td></tr></table></figure> 其中dijkstra的参数：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return_predecessors: 布尔值，设置 True，遍历所有路径，如果不想遍历所有路径可以设置为 False。</span><br><span class="line">indices: 元素的索引，返回该元素的所有路径。</span><br><span class="line"><span class="built_in">limit</span>: 路径的最大权重。</span><br></pre></td></tr></table></figure><ul><li><p>Floyd Warshall – 弗洛伊德算法(解决任意两点间的最短路径)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> floyd_warshall</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(floyd_warshall(newarr, return_predecessors=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>Bellman Ford – 贝尔曼-福特算法(任意两点间的最短路径)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> bellman_ford</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bellman_ford(newarr, return_predecessors=<span class="literal">True</span>, indices=<span class="number">0</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>dfs <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> depth_first_order</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(depth_first_order(newarr, <span class="number">1</span>)) <span class="comment">#传入邻接矩阵和起始遍历元素</span></span><br></pre></td></tr></table></figure></p></li><li><p>bfs <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.sparse.csgraph <span class="keyword">import</span> breadth_first_order</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> csr_matrix</span><br><span class="line"></span><br><span class="line">arr = np.array([</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">newarr = csr_matrix(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(breadth_first_order(newarr, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    <summary type="html">本文介绍scipy几大基本模块及其与其相关数学原理</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="scipy" scheme="http://example.com/tags/scipy/"/>
    
  </entry>
  
  <entry>
    <title>seaborn实现统计图绘制</title>
    <link href="http://example.com/2025/08/10/seaborn/"/>
    <id>http://example.com/2025/08/10/seaborn/</id>
    <published>2025-08-10T06:50:00.000Z</published>
    <updated>2025-08-10T11:17:16.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一设置主题和样式">一、设置主题和样式</h2><p>在进行图形绘制之前先设置好主题/样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置主题/样式（可选）</span></span><br><span class="line">sns.set_theme(style=<span class="string">&quot;darkgrid&quot;</span>)  <span class="comment"># 可选风格：darkgrid, whitegrid, dark, white, ticks</span></span><br><span class="line">sns.set_palette(<span class="string">&quot;husl&quot;</span>)          <span class="comment"># 设置调色板</span></span><br><span class="line">sns.set_context(<span class="string">&quot;paper&quot;</span>)         <span class="comment"># 设置上下文（paper, notebook, talk, poster）</span></span><br></pre></td></tr></table></figure><p>以下是 <code>sns.set_theme()</code>、<code>sns.set_palette()</code>和 <code>sns.set_context()</code> 的可选参数整理成表格：</p><h3 id="sns.set_theme-的-style-参数图表风格">1.<strong><code>sns.set_theme()</code> 的 <code>style</code>参数（图表风格）</strong></h3><table><colgroup><col style="width: 16%" /><col style="width: 83%" /></colgroup><thead><tr><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td><code>"darkgrid"</code></td><td>默认值，灰色背景 + 白色网格线（适合大多数场景）</td></tr><tr><td><code>"whitegrid"</code></td><td>白色背景 + 深色网格线（适合强调数据精度）</td></tr><tr><td><code>"dark"</code></td><td>纯灰色背景，无网格线（简洁风格）</td></tr><tr><td><code>"white"</code></td><td>纯白色背景，无网格线（极简风格）</td></tr><tr><td><code>"ticks"</code></td><td>白色背景 + 坐标轴刻度（无网格线，类似 <code>"white"</code>但更清晰的刻度）</td></tr></tbody></table><hr /><h3 id="sns.set_palette-的调色板参数">2.<strong><code>sns.set_palette()</code> 的调色板参数</strong></h3><table><colgroup><col style="width: 22%" /><col style="width: 77%" /></colgroup><thead><tr><th>类型</th><th>可选值示例</th></tr></thead><tbody><tr><td><strong>Seaborn 内置名称</strong></td><td><code>"husl"</code>, <code>"deep"</code>, <code>"muted"</code>,<code>"bright"</code>, <code>"pastel"</code>, <code>"dark"</code>,<code>"colorblind"</code></td></tr><tr><td><strong>Matplotlib 色板</strong></td><td><code>"viridis"</code>, <code>"plasma"</code>, <code>"magma"</code>,<code>"cividis"</code>（需安装 Matplotlib）</td></tr><tr><td><strong>自定义颜色列表</strong></td><td><code>["#FF5733", "#33FF57", "#3357FF"]</code>（十六进制/RGB颜色列表）</td></tr><tr><td><strong>其他方法</strong></td><td><code>sns.color_palette("hls", 8)</code> 或<code>sns.husl_palette(10)</code> 生成动态调色板</td></tr></tbody></table><hr /><h3 id="sns.set_context-的-context-参数图表比例">3.<strong><code>sns.set_context()</code> 的 <code>context</code>参数（图表比例）</strong></h3><table><colgroup><col style="width: 15%" /><col style="width: 84%" /></colgroup><thead><tr><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td><code>"paper"</code></td><td>最小比例（适合论文或小图，字体和线条较细）</td></tr><tr><td><code>"notebook"</code></td><td>默认值（适合 Jupyter Notebook 或常规屏幕显示）</td></tr><tr><td><code>"talk"</code></td><td>较大比例（适合幻灯片演示，字体和线条加粗）</td></tr><tr><td><code>"poster"</code></td><td>最大比例（适合海报或大屏展示，元素显著放大）</td></tr></tbody></table><hr /><h3 id="附set_theme-的完整参数可选">附：<code>set_theme()</code>的完整参数（可选）</h3><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>style</code></td><td>str</td><td>上述风格之一（如 <code>"darkgrid"</code>）</td></tr><tr><td><code>palette</code></td><td>str/list</td><td>上述调色板之一</td></tr><tr><td><code>context</code></td><td>str/dict</td><td>上述上下文之一或自定义字典</td></tr><tr><td><code>font</code></td><td>str</td><td>字体（如 <code>"sans-serif"</code>）</td></tr><tr><td><code>font_scale</code></td><td>float</td><td>字体缩放因子（默认 1）</td></tr><tr><td><code>rc</code></td><td>dict</td><td>直接覆盖 Matplotlib 的 rcParams</td></tr></tbody></table><hr /><h3 id="示例代码">示例代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合设置</span></span><br><span class="line">sns.set_theme(</span><br><span class="line">    style=<span class="string">&quot;whitegrid&quot;</span>,      <span class="comment"># 风格</span></span><br><span class="line">    palette=<span class="string">&quot;husl&quot;</span>,         <span class="comment"># 调色板</span></span><br><span class="line">    context=<span class="string">&quot;talk&quot;</span>,         <span class="comment"># 上下文</span></span><br><span class="line">    font=<span class="string">&quot;Arial&quot;</span>,           <span class="comment"># 字体</span></span><br><span class="line">    font_scale=<span class="number">1.2</span>          <span class="comment"># 字体大小缩放</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独设置（等效于上面的 palette）</span></span><br><span class="line">sns.set_palette(<span class="string">&quot;husl&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果需要更详细的参数（如自定义 <code>rc</code>），可以进一步参考 <ahref="https://seaborn.pydata.org/generated/seaborn.set_theme.html">Seaborn官方文档</a>。</p><h2 id="二调用seaborn绘图函数">二、调用seaborn绘图函数</h2><p>Seaborn提供了多种高级绘图函数，主要分为以下几类：<strong>关系型</strong>、<strong>分布型</strong>、<strong>分类型</strong>、<strong>回归型</strong>、<strong>矩阵型</strong>和 <strong>其他辅助函数</strong>。以下是详细的分类说明和示例：</p><hr /><h3 id="关系型绘图relational-plots">1. <strong>关系型绘图（RelationalPlots）</strong></h3><p>用于展示变量之间的关系（通常用于连续数据）。</p><table><colgroup><col style="width: 10%" /><col style="width: 5%" /><col style="width: 42%" /><col style="width: 41%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.scatterplot()</code></td><td>散点图（基础）</td><td><code>sns.scatterplot(data=tips, x="total_bill", y="tip", hue="time")</code></td><td><img src="https://seaborn.pydata.org/_images/scatterplot_3_0.png"alt="scatterplot" /></td></tr><tr><td><code>sns.lineplot()</code></td><td>折线图（趋势展示）</td><td><code>sns.lineplot(data=flights, x="year", y="passengers", hue="month")</code></td><td><img src="https://seaborn.pydata.org/_images/lineplot_3_0.png"alt="lineplot" /></td></tr><tr><td><code>sns.relplot()</code></td><td>分面关系图（散点）</td><td><code>sns.relplot(data=tips, x="total_bill", y="tip", col="time", kind="scatter")</code></td><td><img src="https://seaborn.pydata.org/_images/scatterplot_29_0.png"alt="relplot scatter" /></td></tr></tbody></table><hr /><h3 id="分布型绘图distribution-plots">2.<strong>分布型绘图（Distribution Plots）</strong></h3><p>用于展示数据的分布特征。</p><table><colgroup><col style="width: 8%" /><col style="width: 6%" /><col style="width: 36%" /><col style="width: 48%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.histplot()</code></td><td>直方图（单变量分布）</td><td><code>sns.histplot(data=tips, x="total_bill", bins=20, kde=True)</code></td><td><img src="https://seaborn.pydata.org/_images/histplot_13_0.png"alt="histplot 示例" /> </td></tr><tr><td><code>sns.kdeplot()</code></td><td>核密度估计图（光滑分布）</td><td><code>sns.kdeplot(data=tips, x="total_bill", hue="time", fill=True)</code></td><td><img src="https://seaborn.pydata.org/_images/kdeplot_35_0.png"alt="kdeplot 示例" /> </td></tr><tr><td><code>sns.ecdfplot()</code></td><td>经验累积分布函数图</td><td><code>sns.ecdfplot(data=tips, x="total_bill", hue="time")</code></td><td><imgsrc="https://raw.githubusercontent.com/koen666/image/master/exp.png"alt="ecdfplot 示例" /> <em>(示意)</em> </td></tr><tr><td><code>sns.displot()</code></td><td>分面分布图（直方/KDE）</td><td><code>sns.displot(data=tips, x="total_bill", col="time", kind="hist")</code></td><td><img src="https://seaborn.pydata.org/_images/distributions_31_0.png"alt="displot 示例" /> </td></tr><tr><td><code>sns.boxplot()</code></td><td>箱线图（五数概括）</td><td><code>sns.boxplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><imgsrc="https://raw.githubusercontent.com/koen666/image/master/boxplot.png"alt="boxplot 示例" /> <em>(占位)</em> (<ahref="https://docs.kanaries.net/topics/Seaborn/sns-boxplot?utm_source=chatgpt.com"title="Seaborn Boxplot Tutorial: Create Custom Box Plots in Python">KanariesDocs</a>)</td></tr><tr><td><code>sns.violinplot()</code></td><td>小提琴图（分布+密度）</td><td><code>sns.violinplot(data=tips, x="day", y="total_bill", hue="sex", split=True)</code></td><td><img src="https://seaborn.pydata.org/_images/violinplot_5_0.png"alt="violinplot 示例" /> <em>(占位)</em> (<ahref="https://www.geeksforgeeks.org/python/violinplot-using-seaborn-in-python/?utm_source=chatgpt.com"title="Violinplot using Seaborn in Python - GeeksforGeeks">GeeksforGeeks</a>)</td></tr></tbody></table><hr /><h3 id="分类型绘图categorical-plots">3. <strong>分类型绘图（CategoricalPlots）</strong></h3><p>用于分类变量的可视化。</p><table><colgroup><col style="width: 10%" /><col style="width: 7%" /><col style="width: 43%" /><col style="width: 39%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.barplot()</code></td><td>条形图（均值/置信区间）</td><td><code>sns.barplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/barplot_9_0.png"alt="barplot" /></td></tr><tr><td><code>sns.countplot()</code></td><td>计数条形图（频次）</td><td><code>sns.countplot(data=tips, x="day", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/countplot_1_0.png"alt="countplot" /></td></tr><tr><td><code>sns.pointplot()</code></td><td>点图（均值+置信区间）</td><td><code>sns.pointplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/pointplot_6_0.png"alt="pointplot" /></td></tr><tr><td><code>sns.stripplot()</code></td><td>散点图（分类+抖动）</td><td><code>sns.stripplot(data=tips, x="day", y="total_bill", hue="sex", dodge=True)</code></td><td><img src="https://seaborn.pydata.org/_images/stripplot_8_0.png"alt="stripplot" /></td></tr><tr><td><code>sns.swarmplot()</code></td><td>蜂群图（无重叠散点）</td><td><code>sns.swarmplot(data=tips, x="day", y="total_bill", hue="sex")</code></td><td><img src="https://seaborn.pydata.org/_images/swarmplot_5_0.png"alt="swarmplot" /></td></tr><tr><td><code>sns.catplot()</code></td><td>分面绘制分类图（多功能）</td><td><code>sns.catplot(data=tips, x="day", y="total_bill", col="sex", kind="box")</code></td><td><img src="https://seaborn.pydata.org/_images/catplot_11_0.png"alt="catplot" /></td></tr></tbody></table><hr /><h3 id="回归型绘图regression-plots">4. <strong>回归型绘图（RegressionPlots）</strong></h3><p>用于展示变量间的统计关系（含回归线）。</p><table><colgroup><col style="width: 9%" /><col style="width: 7%" /><col style="width: 43%" /><col style="width: 39%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.regplot()</code></td><td>回归散点图（单次拟合）</td><td><code>sns.regplot(data=tips, x="total_bill", y="tip", ci=95)</code></td><td><img src="https://seaborn.pydata.org/_images/regplot_5_0.png"alt="regplot" /></td></tr><tr><td><code>sns.lmplot()</code></td><td>分面回归图（多功能）</td><td><code>sns.lmplot(data=tips, x="total_bill", y="tip", col="time", order=2)</code></td><td><img src="https://seaborn.pydata.org/_images/lmplot_12_0.png"alt="lmplot" /></td></tr></tbody></table><hr /><h3 id="矩阵型绘图matrix-plots">5. <strong>矩阵型绘图（MatrixPlots）</strong></h3><p>用于矩阵数据的可视化（如相关性、聚类）。</p><table><colgroup><col style="width: 11%" /><col style="width: 7%" /><col style="width: 36%" /><col style="width: 43%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.heatmap()</code></td><td>热力图（矩阵值颜色映射）</td><td><code>sns.heatmap(data.corr(), annot=True, cmap="coolwarm")</code></td><td><img src="https://seaborn.pydata.org/_images/heatmap_2_0.png"alt="heatmap" /></td></tr><tr><td><code>sns.clustermap()</code></td><td>聚类热力图（行列聚类）</td><td><code>sns.clustermap(data.corr(), method="ward", cmap="vlag")</code></td><td><img src="https://seaborn.pydata.org/_images/clustermap_1_0.png"alt="clustermap" /></td></tr></tbody></table><hr /><h3 id="其他辅助函数">6. <strong>其他辅助函数</strong></h3><table><colgroup><col style="width: 9%" /><col style="width: 7%" /><col style="width: 46%" /><col style="width: 37%" /></colgroup><thead><tr><th>函数</th><th>描述</th><th>示例代码</th><th>示例图</th></tr></thead><tbody><tr><td><code>sns.pairplot()</code></td><td>变量两两关系矩阵</td><td><code>sns.pairplot(data=iris, hue="species", diag_kind="kde")</code></td><td><img src="https://seaborn.pydata.org/_images/pairplot_6_0.png"alt="pairplot" /></td></tr><tr><td><code>sns.jointplot()</code></td><td>双变量联合分布图</td><td><code>sns.jointplot(data=tips, x="total_bill", y="tip", kind="hex")</code></td><td><img src="https://seaborn.pydata.org/_images/jointplot_9_0.png"alt="jointplot" /></td></tr><tr><td><code>sns.FacetGrid()</code></td><td>自定义分面网格（底层控制）</td><td><code>g = sns.FacetGrid(tips, col="time"); g.map(sns.scatterplot, "total_bill", "tip")</code></td><td><img src="https://seaborn.pydata.org/_images/facetgrid_3_0.png"alt="FacetGrid" /></td></tr></tbody></table><hr /><h3 id="关键区别">关键区别：</h3><ul><li><strong>基础函数</strong>（如 <code>scatterplot</code>） vs<strong>分面函数</strong>（如 <code>relplot/catplot</code>）：<ul><li>基础函数直接绘图，分面函数通过 <code>col/row</code> 参数分面。</li></ul></li><li><strong>通用参数</strong>：<ul><li><code>data</code>：DataFrame 数据源。</li><li><code>x/y</code>：轴变量。</li><li><code>hue</code>：颜色分组。</li><li><code>style</code>：标记样式分组。</li><li><code>size</code>：大小分组。</li></ul></li></ul><hr /><h3 id="示例分面绘图catplot">示例：分面绘图（<code>catplot</code>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分面绘制箱线图（按 day 分组，按 sex 分面）</span></span><br><span class="line">sns.catplot(</span><br><span class="line">    data=tips, </span><br><span class="line">    x=<span class="string">&quot;day&quot;</span>, </span><br><span class="line">    y=<span class="string">&quot;total_bill&quot;</span>,  </span><br><span class="line">    col=<span class="string">&quot;sex&quot;</span>, </span><br><span class="line">    kind=<span class="string">&quot;box&quot;</span>,</span><br><span class="line">    height=<span class="number">4</span>, </span><br><span class="line">    aspect=<span class="number">0.7</span></span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="三结合-matplotlib-细化">三、结合 Matplotlib 细化</h2><p>Seaborn 虽然提供了简洁的高级 API，但底层仍基于 Matplotlib。通过<code>matplotlib.pyplot</code>（通常缩写为 <code>plt</code>）可以对Seaborn 生成的图表进行精细化调整。以下是详细分类说明和实用技巧：</p><hr /><h3 id="基础调整">3.1<strong>基础调整</strong></h3><h4 id="标题与坐标轴标签">3.1.1 <strong>标题与坐标轴标签</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line">sns.boxplot(data=tips, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&quot;Daily Bill Distribution&quot;</span>, fontsize=<span class="number">14</span>, pad=<span class="number">20</span>)  <span class="comment"># pad 控制标题距离</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;Day of Week&quot;</span>, fontsize=<span class="number">12</span>)                    <span class="comment"># X轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Bill ($)&quot;</span>, fontsize=<span class="number">12</span>)                 <span class="comment"># Y轴标签</span></span><br></pre></td></tr></table></figure><h4 id="刻度调整">3.1.2 <strong>刻度调整</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 旋转刻度标签（解决重叠问题）</span></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>, ha=<span class="string">&quot;right&quot;</span>)  <span class="comment"># ha: 旋转后对齐方式（right/center）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度范围和密度</span></span><br><span class="line">plt.yticks(ticks=[<span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>], fontsize=<span class="number">10</span>)  <span class="comment"># 自定义Y轴刻度</span></span><br><span class="line">plt.xlim(-<span class="number">0.5</span>, <span class="number">3.5</span>)                             <span class="comment"># 设置X轴范围</span></span><br></pre></td></tr></table></figure><hr /><h3 id="图例与颜色">3.2 <strong>图例与颜色</strong></h3><h4 id="图例控制">3.2.1 <strong>图例控制</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sns.scatterplot(data=tips, x=<span class="string">&quot;total_bill&quot;</span>, y=<span class="string">&quot;tip&quot;</span>, hue=<span class="string">&quot;time&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整图例</span></span><br><span class="line">plt.legend(</span><br><span class="line">    title=<span class="string">&quot;Meal Time&quot;</span>,           <span class="comment"># 修改图例标题</span></span><br><span class="line">    loc=<span class="string">&quot;upper right&quot;</span>,           <span class="comment"># 位置（best, upper right, lower left等）</span></span><br><span class="line">    bbox_to_anchor=(<span class="number">1.3</span>, <span class="number">1</span>),     <span class="comment"># 将图例移到图外（右侧）</span></span><br><span class="line">    frameon=<span class="literal">False</span>                <span class="comment"># 去掉图例边框</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="颜色与样式">3.2.2 <strong>颜色与样式</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改单个元素的颜色（通过Matplotlib）</span></span><br><span class="line">plt.setp(plt.gca().get_xticklabels(), color=<span class="string">&quot;red&quot;</span>)  <span class="comment"># 设置X轴刻度为红色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改所有文本颜色（全局）</span></span><br><span class="line">plt.rcParams[<span class="string">&quot;text.color&quot;</span>] = <span class="string">&quot;blue&quot;</span>  <span class="comment"># 影响标题、标签等</span></span><br></pre></td></tr></table></figure><hr /><h3 id="布局与子图">3.3 <strong>布局与子图</strong></h3><h4 id="调整边距与布局">3.3.1 <strong>调整边距与布局</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.tight_layout(pad=<span class="number">2</span>)  <span class="comment"># 自动调整子图间距（防止标签重叠）</span></span><br><span class="line">plt.subplots_adjust(</span><br><span class="line">    left=<span class="number">0.1</span>,            <span class="comment"># 左边距</span></span><br><span class="line">    right=<span class="number">0.9</span>,           <span class="comment"># 右边距</span></span><br><span class="line">    top=<span class="number">0.9</span>,             <span class="comment"># 上边距</span></span><br><span class="line">    bottom=<span class="number">0.2</span>           <span class="comment"># 下边距</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="与matplotlib子图结合">3.3.2<strong>与Matplotlib子图结合</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))  <span class="comment"># 创建1行2列的子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第一个子图绘制</span></span><br><span class="line">sns.histplot(data=tips, x=<span class="string">&quot;total_bill&quot;</span>, ax=axes[<span class="number">0</span>])</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&quot;Total Bill Distribution&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第二个子图绘制</span></span><br><span class="line">sns.boxplot(data=tips, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, ax=axes[<span class="number">1</span>])</span><br><span class="line">axes[<span class="number">1</span>].set_xticklabels([<span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>])  <span class="comment"># 自定义刻度标签</span></span><br></pre></td></tr></table></figure><hr /><h3 id="高级定制">3.4 <strong>高级定制</strong></h3><h4 id="网格线与背景">3.4.1 <strong>网格线与背景</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">&quot;--&quot;</span>, alpha=<span class="number">0.6</span>)  <span class="comment"># 显示网格线（虚线，半透明）</span></span><br><span class="line">plt.gca().set_facecolor(<span class="string">&quot;#f5f5f5&quot;</span>)         <span class="comment"># 设置图表背景色（灰色）</span></span><br></pre></td></tr></table></figure><h4 id="注释与箭头">3.4.2 <strong>注释与箭头</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文本注释</span></span><br><span class="line">plt.text(</span><br><span class="line">    x=<span class="number">30</span>, y=<span class="number">10</span>,                           <span class="comment"># 坐标位置</span></span><br><span class="line">    s=<span class="string">&quot;Outlier Point&quot;</span>,                     <span class="comment"># 文本内容</span></span><br><span class="line">    fontsize=<span class="number">12</span>, </span><br><span class="line">    color=<span class="string">&quot;red&quot;</span>,</span><br><span class="line">    bbox=<span class="built_in">dict</span>(facecolor=<span class="string">&quot;white&quot;</span>, alpha=<span class="number">0.8</span>) <span class="comment"># 文本框样式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加箭头</span></span><br><span class="line">plt.annotate(</span><br><span class="line">    <span class="string">&quot;High Tip&quot;</span>, </span><br><span class="line">    xy=(<span class="number">40</span>, <span class="number">10</span>),                          <span class="comment"># 箭头指向的点</span></span><br><span class="line">    xytext=(<span class="number">35</span>, <span class="number">15</span>),                      <span class="comment"># 文本起始位置</span></span><br><span class="line">    arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&quot;-&gt;&quot;</span>, color=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr /><h3 id="保存图表">3.5 <strong>保存图表</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(</span><br><span class="line">    <span class="string">&quot;plot.png&quot;</span>, </span><br><span class="line">    dpi=<span class="number">300</span>,                   <span class="comment"># 分辨率</span></span><br><span class="line">    bbox_inches=<span class="string">&quot;tight&quot;</span>,       <span class="comment"># 去除白边</span></span><br><span class="line">    transparent=<span class="literal">True</span>           <span class="comment"># 透明背景（适合PPT）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr /><h3 id="调试技巧">3.6 <strong>调试技巧</strong></h3><ol type="1"><li><p><strong>获取当前Axes对象</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.gca()  <span class="comment"># 获取当前Axes</span></span><br><span class="line">ax.spines[<span class="string">&quot;top&quot;</span>].set_visible(<span class="literal">False</span>)  <span class="comment"># 隐藏顶部边框线</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>批量设置样式</strong>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;axes.labelsize&quot;</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="string">&quot;xtick.labelsize&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">&quot;ytick.labelsize&quot;</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line">plt.rcParams.update(params)  <span class="comment"># 全局生效</span></span><br></pre></td></tr></table></figure></p></li></ol><hr /><h3 id="完整示例">完整示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">tips = sns.load_dataset(<span class="string">&quot;tips&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 绘制基础图表</span></span><br><span class="line">sns.boxplot(data=tips, x=<span class="string">&quot;day&quot;</span>, y=<span class="string">&quot;total_bill&quot;</span>, hue=<span class="string">&quot;sex&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用Matplotlib调整</span></span><br><span class="line">plt.title(<span class="string">&quot;Bill Distribution by Day and Gender&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Day&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Total Bill (USD)&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">15</span>)</span><br><span class="line">plt.legend(title=<span class="string">&quot;Gender&quot;</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 调整布局</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 保存或显示</span></span><br><span class="line">plt.savefig(<span class="string">&quot;boxplot.png&quot;</span>, dpi=<span class="number">200</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="四显示或者保存图表格">四、显示或者保存图表格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br><span class="line">plt.savefig(<span class="string">&quot;plot.png&quot;</span>, dpi=300, bbox_inches=<span class="string">&quot;tight&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍如何利用seaborn库实现统计图的绘制功能</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="saaborn" scheme="http://example.com/tags/saaborn/"/>
    
  </entry>
  
  <entry>
    <title>yolo+AnyLabeling实现数据集的自动标注</title>
    <link href="http://example.com/2025/08/09/yolo-dataset/"/>
    <id>http://example.com/2025/08/09/yolo-dataset/</id>
    <published>2025-08-09T15:00:00.000Z</published>
    <updated>2025-08-13T02:41:46.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一环境准备">一、环境准备</h2><p>首先需要创建一个conda虚拟环境，进行yolo环境的搭建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install yolo</span><br><span class="line"></span><br><span class="line">pip install ultralytics</span><br><span class="line"></span><br><span class="line">pip install ncnn</span><br><span class="line"></span><br><span class="line">pip install onnx <span class="comment">#用于格式转换</span></span><br></pre></td></tr></table></figure><p>之后创建一个空目录，目录结构如下</p><p><img src="/images/yolo-dataset/yolotraindir.png" /></p><p>准备好需要用来训练的部分图片(50-100张吧差不多，多点更好，但是就是用来标注数据的没必要那么多后面手动改改叭)，放到images文件下的三个文件夹都存放一份</p><h2 id="二数据标注">二、数据标注</h2><p>准备好环境搭建之后，新建一个<code>classes.txt</code>文件放到labels/train文件夹下，里面按顺序写好你的标签是什么比如我训练这个模型就是用来标注电池的</p><p><img src="/images/yolo-dataset/battery.png" /></p><p>那你的文件内容就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">battery</span><br></pre></td></tr></table></figure><p>ok，创建完成之后就开始对数据进行正常标注，然后将结果导出到labels/train文件夹下</p><h2 id="三开始训练">三、开始训练</h2><p>首先需要写入一个配置文件<code>xxx.yaml</code>写到yolotrain目录下，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">path: D:\yolotrain       <span class="comment"># 数据集根目录</span></span><br><span class="line">train: images/train      <span class="comment"># 训练集相对路径</span></span><br><span class="line">val: images/val          <span class="comment"># 验证集相对路径</span></span><br><span class="line"><span class="built_in">test</span>: images/test        <span class="comment"># 测试集相对路径</span></span><br><span class="line"></span><br><span class="line">nc: 1                    <span class="comment"># 类别数量</span></span><br><span class="line">names: [<span class="string">&quot;battery&quot;</span>]       <span class="comment"># 类别名称列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 高级参数（可选）</span></span><br><span class="line">roboflow: &#123;&#125;             <span class="comment"># 兼容RoboFlow数据集</span></span><br><span class="line">download: null           <span class="comment"># 数据集下载URL</span></span><br></pre></td></tr></table></figure><p>在虚拟环境下进入yolotrain目录输入指令开始训练</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yolo detect train </span><br><span class="line"><span class="comment">#data是你自己的yaml文件路径</span></span><br><span class="line">  data=D:/yolotrain/xxx.yaml </span><br><span class="line">  model=yolov8s.pt      <span class="comment"># 预训练模型（放在yolotrain目录下）</span></span><br><span class="line">  epochs=100            <span class="comment"># 迭代次数</span></span><br><span class="line">  imgsz=640             <span class="comment"># 输入分辨率</span></span><br><span class="line">  batch=16              <span class="comment"># 根据GPU调整</span></span><br><span class="line">  device=0              <span class="comment"># 0代表GPU练</span></span><br><span class="line"><span class="comment">#下面是参数，命令合并成一行</span></span><br></pre></td></tr></table></figure><p>若要进行验证把<code>train</code>改成<code>val</code>就行了，然后那个yolo模型我放在我的git仓库里了<a href="https://github.com/koen666/yolo">yolo模型</a></p><h2 id="四导出onnx">四、导出onnx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo <span class="built_in">export</span> model=D:/yolotrain/best.pt format=onnx</span><br></pre></td></tr></table></figure><p>训练完后，可以从新得到的run文件夹下的best.pt(这个就是训练的最好的模型)文件挪到外面，在调用上面那个命令生成best.onnx文件</p><p>然后再创建一个xxx.yaml文件写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: yolov8</span><br><span class="line">name: yolov8s-r20230520</span><br><span class="line">display_name: koen</span><br><span class="line">model_path: best.onnx</span><br><span class="line">nms_threshold: 0.45</span><br><span class="line">confidence_threshold: 0.25</span><br><span class="line">classes:</span><br><span class="line">  - battery</span><br></pre></td></tr></table></figure><p>这个display_name可以换阿，这个文件就是你模型的配置文件</p><h2 id="五使用yaml操作">五、使用yaml操作</h2><p>进入<code>AnyLabeling</code>软件，左侧tab栏有AI选项，点击，选择自定义模型，选择刚刚配置的yaml文件即可</p>]]></content>
    
    
    <summary type="html">本文介绍如何利用yolo+AnyLabeling实现数据集的自动标注</summary>
    
    
    
    <category term="dataset" scheme="http://example.com/categories/dataset/"/>
    
    
    <category term="yolo" scheme="http://example.com/tags/yolo/"/>
    
    <category term="dataset" scheme="http://example.com/tags/dataset/"/>
    
    <category term="AnyLabeling" scheme="http://example.com/tags/AnyLabeling/"/>
    
  </entry>
  
  <entry>
    <title>Electron 基本使用教程</title>
    <link href="http://example.com/2025/07/29/electron/"/>
    <id>http://example.com/2025/07/29/electron/</id>
    <published>2025-07-29T01:20:04.426Z</published>
    <updated>2025-07-29T01:34:37.934Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下以vue3为例结合electron实现跨平台开发</p></blockquote><hr /><h2id="一在项目根目录安装electorn-forge">一、在项目根目录安装electorn-forge</h2><p>按照如下命令安装electron-forge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron @electron-forge/cli</span><br><span class="line">npx electron-forge import</span><br></pre></td></tr></table></figure><p>这一步会在你的项目中创建一个 electron的基本目录结构，并配置打包命令。</p><h2 id="二新建main.js">二、新建main.js</h2><p>在根目录下新建/electron/main.js</p><p>在main.js下复制如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; app, BrowserWindow &#125; from <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line">import path from <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line">import &#123; fileURLToPath &#125; from <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"></span><br><span class="line">// 解决 ES Module 中没有 __dirname 的问题</span><br><span class="line">const __filename = fileURLToPath(import.meta.url);</span><br><span class="line">const __dirname = path.dirname(__filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">createWindow</span></span> () &#123;</span><br><span class="line">  const win = new BrowserWindow(&#123;</span><br><span class="line">    width: 1200,</span><br><span class="line">    height: 800,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      preload: path.join(__dirname, <span class="string">&#x27;preload.js&#x27;</span>), // 可选，预加载脚本</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!app.isPackaged) &#123;</span><br><span class="line">    win.loadURL(<span class="string">&#x27;http://localhost:5173&#x27;</span>); // dev 模式加载 vite 前端</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    win.loadFile(path.join(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>)); // prod 模式加载打包页面</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">  createWindow();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三修改package.json">三、修改package.json</h2><p>进入package.json文件，新增</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;electron/main.js&quot;</span>,</span><br></pre></td></tr></table></figure><p>注意scripts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line"><span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span>,</span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron-forge start&quot;</span>,</span><br><span class="line"><span class="string">&quot;package&quot;</span>: <span class="string">&quot;electron-forge package&quot;</span>,</span><br><span class="line"><span class="string">&quot;make&quot;</span>: <span class="string">&quot;electron-forge make&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="四开发测试流程">四、开发测试流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 Vite 前端</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新开一个终端，启动 Electron</span></span><br><span class="line">npm start</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五打包发布测试">五、打包发布测试</h2><p>先构建前端项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>修改main.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.loadFile(path.join(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>));</span><br></pre></td></tr></table></figure><p>打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package</span><br></pre></td></tr></table></figure><p>会在 out/ 目录生成你的桌面可执行程序（比如 Windows 下是 .exe文件）</p>]]></content>
    
    
    <summary type="html">本文介绍Web程序如何快速打包成桌面端应用进行跨平台开发</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="electron" scheme="http://example.com/tags/electron/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="desk" scheme="http://example.com/tags/desk/"/>
    
  </entry>
  
  <entry>
    <title>像前端package.json那样管理python依赖</title>
    <link href="http://example.com/2025/07/29/pipenv/"/>
    <id>http://example.com/2025/07/29/pipenv/</id>
    <published>2025-07-28T16:00:00.000Z</published>
    <updated>2025-07-31T12:28:11.636Z</updated>
    
    <content type="html"><![CDATA[<ol type="1"><li>首先下载管理用的包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>初始化pipfile</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>你的目录下就出现了pipfile和pipfile.lock，对于package.json和package-lock.json</p><ol start="3" type="1"><li>将已有的依赖存放进pipenv中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt <span class="comment">#将已有依赖输出到requirements.txt文件下</span></span><br></pre></td></tr></table></figure><p>将txt文件转码(powershell内输入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = Get-Content requirements.txt</span><br><span class="line">[System.IO.File]::WriteAllLines(<span class="string">"fixed_requirements.txt"</span>, <span class="variable">$content</span>, (New-Object System.Text.UTF8Encoding <span class="variable">$false</span>))</span><br></pre></td></tr></table></figure><p>最后丢尽pipfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install -r fixed_requirements.txt</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>如何调用</li></ol><p>非常简单，像<code>npm i</code>一样我们只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>就可以一键安装python的所有依赖项</p><ol start="5" type="1"><li>在一些小项目里直接利用requirements.txt一键安装也可以</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>利用如上指令可以一键安装依赖</p>]]></content>
    
    
    <summary type="html">来让你的python程序像前端依赖一样优雅的管理起来</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="pipenv" scheme="http://example.com/tags/pipenv/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>常见BUG汇总</title>
    <link href="http://example.com/2025/07/27/issue/"/>
    <id>http://example.com/2025/07/27/issue/</id>
    <published>2025-07-27T00:29:00.000Z</published>
    <updated>2025-08-27T08:27:11.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一markdown">一、Markdown</h2><h3 id="为什么vscode编辑md文件十分卡顿">1.1为什么vscode编辑md文件十分卡顿</h3><p>解决方法:禁用cpp extension pack扩展</p><h2 id="二hexo">二、Hexo</h2><h3 id="出现spawn-failed报错">2.1 出现Spawn Failed报错</h3><p>首先尝试关机重启</p><p>其次删除<code>.deploy_git</code>文件夹</p><p>最后实在不行找到<code>.ssh</code>文件，先测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现22端口连接超时，改成443端口即可 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName ssh.github.com</span><br><span class="line">  Port 443</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">欢迎留言提出常见BUG</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Latex常见数学公式</title>
    <link href="http://example.com/2025/07/27/latex/"/>
    <id>http://example.com/2025/07/27/latex/</id>
    <published>2025-07-27T00:29:00.000Z</published>
    <updated>2025-07-27T00:35:03.336Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下是常用的latex数学公式符号</p></blockquote><hr><h2 id="一基本结构">一、基本结构</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\(</span> a<span class="built_in">^</span>2 + b<span class="built_in">^</span>2 = c<span class="built_in">^</span>2 <span class="keyword">\)</span>           <span class="comment">% 行内公式</span></span><br><span class="line"><span class="keyword">\[</span> a<span class="built_in">^</span>2 + b<span class="built_in">^</span>2 = c<span class="built_in">^</span>2 <span class="keyword">\]</span>           <span class="comment">% 单独一行公式</span></span><br></pre></td></tr></table></figure><hr><h2 id="二基本数学符号">二、基本数学符号</h2><table><thead><tr><th>含义</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>加法</td><td><code>a + b</code></td><td><span class="math inline"><em>a</em> + <em>b</em></span></td></tr><tr><td>减法</td><td><code>a - b</code></td><td><span class="math inline"><em>a</em> − <em>b</em></span></td></tr><tr><td>乘法</td><td><code>a \times b</code></td><td><span class="math inline"><em>a</em> × <em>b</em></span></td></tr><tr><td>除法</td><td><code>a \div b</code></td><td><span class="math inline"><em>a</em> ÷ <em>b</em></span></td></tr><tr><td>分数</td><td><code>\frac{a}{b}</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="1.842ex" height="2.395ex" role="img" focusable="false" viewBox="0 -705.8 814.1 1058.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(255.4,-345) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><rect width="574.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></td></tr><tr><td>次方</td><td><code>a^n</code></td><td><span class="math inline"><em>a</em><sup><em>n</em></sup></span></td></tr><tr><td>开方</td><td><code>\sqrt{a}</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex;" xmlns="http://www.w3.org/2000/svg" width="3.127ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1382 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msqrt"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="529" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container></span></td></tr><tr><td>n次根</td><td><code>\sqrt[n]{a}</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.491ex;" xmlns="http://www.w3.org/2000/svg" width="3.127ex" height="2.398ex" role="img" focusable="false" viewBox="0 -843 1382 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mroot"><g><g data-mml-node="mi" transform="translate(853,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mi" transform="translate(211.8,338.5) scale(0.5)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="529" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container></span></td></tr></tbody></table><hr><h2 id="三常用函数">三、常用函数</h2><table><thead><tr><th>函数</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>正弦</td><td><code>\sin x</code></td><td><span class="math inline">sin <em>x</em></span></td></tr><tr><td>余弦</td><td><code>\cos x</code></td><td><span class="math inline">cos <em>x</em></span></td></tr><tr><td>正切</td><td><code>\tan x</code></td><td><span class="math inline">tan <em>x</em></span></td></tr><tr><td>对数</td><td><code>\log x</code></td><td><span class="math inline">log <em>x</em></span></td></tr><tr><td>自然对数</td><td><code>\ln x</code></td><td><span class="math inline">ln <em>x</em></span></td></tr><tr><td>指数函数</td><td><code>e^x</code></td><td><span class="math inline"><em>e</em><sup><em>x</em></sup></span></td></tr><tr><td>极限</td><td><code>\lim_{x\to0}</code></td><td><span class="math inline">lim<sub><em>x</em> → 0</sub></span></td></tr></tbody></table><hr><h2 id="四微积分符号">四、微积分符号</h2><table><colgroup><col style="width: 6%"><col style="width: 46%"><col style="width: 46%"></colgroup><thead><tr><th>含义</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>导数</td><td><code>\frac{dy}{dx}</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="2.742ex" height="3.006ex" role="img" focusable="false" viewBox="0 -975.7 1212.2 1328.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(249,485) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="972.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></td></tr><tr><td>偏导数</td><td><code>\frac{\partial y}{\partial x}</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.817ex;" xmlns="http://www.w3.org/2000/svg" width="2.816ex" height="3.058ex" role="img" focusable="false" viewBox="0 -990.5 1244.7 1351.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(249,485) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="1004.7" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></td></tr><tr><td>积分</td><td><code>\int_a^b f(x)dx</code></td><td><span class="math inline">∫<sub><em>a</em></sub><sup><em>b</em></sup><em>f</em>(<em>x</em>) <em>d</em><em>x</em></span></td></tr><tr><td>多重积分</td><td><code>\iint</code>、<code>\iiint</code></td><td><span class="math inline">∬  ∭</span></td></tr><tr><td>无穷积分</td><td><code>\int_{-\infty}^{\infty}</code></td><td><span class="math inline">∫<sub>−∞</sub><sup>∞</sup></span></td></tr></tbody></table><hr><h2 id="五求和与乘积">五、求和与乘积</h2><table><thead><tr><th>含义</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>求和</td><td><code>\sum_{i=1}^n a_i</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="7.487ex" height="2.563ex" role="img" focusable="false" viewBox="0 -789.6 3309.3 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(2453.3,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></td></tr><tr><td>连乘积</td><td><code>\prod_{i=1}^n a_i</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="7.234ex" height="2.563ex" role="img" focusable="false" viewBox="0 -789.6 3197.3 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="220F" d="M158 656Q147 684 131 694Q110 707 69 710H55V750H888V710H874Q840 708 820 698T795 678T786 656V-155Q798 -206 874 -210H888V-250H570V-210H584Q618 -208 638 -197T663 -178T673 -155V710H270V277L271 -155Q283 -206 359 -210H373V-250H55V-210H69Q103 -208 123 -197T148 -178T158 -155V656Z"></path></g><g data-mml-node="mi" transform="translate(977,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(2341.3,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></td></tr><tr><td>上下限形式</td><td><code>\lim_{x\to0}</code></td><td><span class="math inline">lim<sub><em>x</em> → 0</sub></span></td></tr></tbody></table><hr><h2 id="六矩阵">六、矩阵</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{bmatrix}</span><br><span class="line">a <span class="built_in">&amp;</span> b <span class="keyword">\\</span></span><br><span class="line">c <span class="built_in">&amp;</span> d</span><br><span class="line"><span class="keyword">\end</span>{bmatrix}</span><br></pre></td></tr></table></figure><p>显示为：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="7.025ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 3105 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mtd" transform="translate(1574.5,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(48,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mtd" transform="translate(1529,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2577,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g></g></g></svg></mjx-container></span></p><hr><h2 id="七逻辑与集合符号">七、逻辑与集合符号</h2><table><thead><tr><th>含义</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>属于</td><td><code>\in</code></td><td><span class="math inline">∈</span></td></tr><tr><td>不属于</td><td><code>\notin</code></td><td><span class="math inline">∉</span></td></tr><tr><td>包含于</td><td><code>\subset</code></td><td><span class="math inline">⊂</span></td></tr><tr><td>真包含</td><td><code>\subsetneq</code></td><td><span class="math inline">⊊</span></td></tr><tr><td>交集</td><td><code>\cap</code></td><td><span class="math inline">∩</span></td></tr><tr><td>并集</td><td><code>\cup</code></td><td><span class="math inline">∪</span></td></tr><tr><td>空集</td><td><code>\emptyset</code></td><td><span class="math inline">∅</span></td></tr><tr><td>全体实数</td><td><code>\mathbb{R}</code></td><td><span class="math inline">ℝ</span></td></tr></tbody></table><hr><h2 id="八常见关系符号">八、常见关系符号</h2><table><thead><tr><th>含义</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>大于</td><td><code>&gt;</code></td><td><span class="math inline">&gt;</span></td></tr><tr><td>小于</td><td><code>&lt;</code></td><td><span class="math inline">&lt;</span></td></tr><tr><td>大于等于</td><td><code>\ge</code></td><td><span class="math inline">≥</span></td></tr><tr><td>小于等于</td><td><code>\le</code></td><td><span class="math inline">≤</span></td></tr><tr><td>不等于</td><td><code>\neq</code></td><td><span class="math inline">≠</span></td></tr><tr><td>恒等于</td><td><code>\equiv</code></td><td><span class="math inline">≡</span></td></tr><tr><td>约等于</td><td><code>\approx</code></td><td><span class="math inline">≈</span></td></tr></tbody></table><hr><h2 id="九其他符号">九、其他符号</h2><table><thead><tr><th>符号/用途</th><th>LaTeX</th><th>显示</th></tr></thead><tbody><tr><td>向量</td><td><code>\vec{v}</code></td><td><span class="math inline"><em>v⃗</em></span></td></tr><tr><td>点积</td><td><code>\cdot</code></td><td><span class="math inline"><em>a</em> ⋅ <em>b</em></span></td></tr><tr><td>交叉乘积</td><td><code>\times</code></td><td><span class="math inline"><em>a</em> × <em>b</em></span></td></tr><tr><td>垂直</td><td><code>\perp</code></td><td><span class="math inline">⟂</span></td></tr><tr><td>平行</td><td><code>\parallel</code></td><td><span class="math inline">∥</span></td></tr><tr><td>推出</td><td><code>\Rightarrow</code></td><td><span class="math inline">⇒</span></td></tr><tr><td>等价</td><td><code>\Leftrightarrow</code></td><td><span class="math inline">⇔</span></td></tr></tbody></table><hr>]]></content>
    
    
    <summary type="html">本文介绍常见的Latex数学公式</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="math" scheme="http://example.com/tags/math/"/>
    
    <category term="latex" scheme="http://example.com/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch，深度学习与神经网络篇</title>
    <link href="http://example.com/2025/07/26/pytorch/"/>
    <id>http://example.com/2025/07/26/pytorch/</id>
    <published>2025-07-26T08:06:04.469Z</published>
    <updated>2025-08-08T01:40:39.387Z</updated>
    
    <content type="html"><![CDATA[<p>首先给大家介绍一下深度学习的基本框架</p><p>深度学习是以神经网络为基础的机器学习方法，其中包括多种网络结构（如FNN、CNN、RNN、Transformer 等），这些基础结构构成了实现各种功能性模型的核心模块，例如：</p><figure><img src="/images/pytorch/GAN.png" alt="GAN（生成对抗网络）"><figcaption aria-hidden="true">GAN（生成对抗网络）</figcaption></figure><figure><img src="/images/pytorch/Auto-encoder.png" alt="Auto-Encoder（自编码器）"><figcaption aria-hidden="true">Auto-Encoder（自编码器）</figcaption></figure><p>VAE（变分自编码器）</p><p>BERT、GPT 等预训练模型</p><p>基础结构（Network Architectures）</p><ul><li>FNN（前馈神经网络）</li><li>CNN（卷积神经网络）</li><li>RNN（循环神经网络）</li><li>Transformer（注意力机制为核心）</li></ul><p>功能性模型（Functional Models / Applications）</p><ul><li>自编码器 Auto-Encoder（FNN/CNN）</li><li>生成对抗网络 GAN（FNN/CNN）</li><li>变分自编码器 VAE（FNN）</li><li>强化学习策略网络（FNN/RNN）</li><li>GPT、BERT 等 NLP 模型（Transformer）</li><li>其他任务模型<ul><li>UNet</li><li>ResNet</li><li>YOLO</li></ul></li></ul><h2 id="一autograd">一、AutoGrad</h2><p>autograd 包是 PyTorch中所有神经网络的核心。首先让我们简要地介绍它，然后我们将会去训练我们的第一个神经网络。该autograd 软件包为 Tensors上的所有操作提供自动微分。它是一个由运行定义的框架，这意味着以代码运行方式定义你的后向传播，并且每次迭代都可以不同</p><p>先丢张思维导图叭： <img src="/images/pytorch/autograd.png" alt="autograd"></p><p>首先要给x定义 <code>requires_grad=True</code> 属性</p><p>其次要注意被<code>backward()</code>的张量需要是张量标量，即需要被<code>mean()</code>或者是<code>sum()</code></p><p>最后x的梯度就是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="2.742ex" height="2.8ex" role="img" focusable="false" viewBox="0 -884.7 1212.2 1237.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(257.8,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="972.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>将代码块包裹在 <code>with torch.no_grad()：</code>中以停止自动微分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.requires_grad)</span><br><span class="line"><span class="built_in">print</span>((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line">with torch.no_grad():</span><br><span class="line">    print((x ** <span class="number">2</span>).requires_grad)</span><br></pre></td></tr></table></figure><p>output: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure></p><hr><h2 id="二神经网络基础">二、神经网络基础</h2><h3 id="了解神经网络结构的分类">2.1 了解神经网络结构的分类</h3><table><colgroup><col style="width: 12%"><col style="width: 20%"><col style="width: 12%"><col style="width: 20%"><col style="width: 36%"></colgroup><thead><tr><th>序号</th><th>网络类型</th><th>简介</th><th>适用场景</th><th>代表模型 / 特点</th></tr></thead><tbody><tr><td>1</td><td>前馈神经网络（FNN）</td><td>最基础的神经网络，信息单向传播，无环</td><td>通用场景</td><td>多层感知器（MLP）</td></tr><tr><td>2</td><td>卷积神经网络（CNN）</td><td>提取图像局部特征，参数更少</td><td>图像识别、目标检测</td><td>LeNet、AlexNet、VGG、ResNet、EfficientNet</td></tr><tr><td>3</td><td>循环神经网络（RNN）</td><td>处理序列数据，有“记忆”结构</td><td>文本、语音、时间序列</td><td>RNN、LSTM、GRU</td></tr><tr><td>4</td><td>残差神经网络（ResNet）</td><td>使用残差连接避免梯度消失</td><td>深层网络训练</td><td>ResNet、输出=F(x)+x</td></tr><tr><td>5</td><td>图神经网络（GNN）</td><td>适用于图结构数据</td><td>社交网络、知识图谱</td><td>GCN、GAT、GraphSAGE</td></tr></tbody></table><h3 id="了解神经网络的整个过程">2.2 了解神经网络的整个过程</h3><p><code>输入数据 x                    输入层有几个神经元就输入几个数据（几维）</code></p><p><code>正向传播（Linear + 激活函数）  隐藏层=线性层+激活函数（模拟复杂的数据分布）</code></p><p><code>输出结果（预测值）</code></p><p><code>计算损失（Loss 与真实值比较）</code></p><p><code>反向传播（链式法则求导）</code></p><p><code>参数梯度更新（Optimizer）</code></p><p><code>下一轮训练</code></p><p>损失函数：计算”偏差”</p><p>优化器：这个“偏差”通过损失函数计算出来，而优化器的工作，就是通过反向传播得到的梯度，更新参数，使损失越来越小</p><p>给出一个简单的前馈神经网络作为实例进行讲解 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torch.optim as optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个简单的前馈神经网络，包含一个隐藏层</span></span><br><span class="line">class SimpleFNN(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SimpleFNN, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(4, 8)   <span class="comment"># 输入层4个特征，隐藏层8个神经元</span></span><br><span class="line">        self.relu = nn.ReLU()        <span class="comment"># 激活函数</span></span><br><span class="line">        self.fc2 = nn.Linear(8, 3)   <span class="comment"># 输出层3个类别（比如3分类问题）</span></span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="built_in">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line">model = SimpleFNN()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设输入是4维特征</span></span><br><span class="line">sample_input = torch.randn(2, 4)  <span class="comment"># batch_size=2，4个特征</span></span><br><span class="line">output = model(sample_input)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure><code>__init__</code>函数 — 网络结构的“搭建工厂”</p><p>作用：初始化神经网络的层和组件,相当于在这里定义好网络的“骨架”和“零件”。</p><p>一般<code>_init_</code>内包含如下内容:</p><table><colgroup><col style="width: 25%"><col style="width: 41%"><col style="width: 32%"></colgroup><thead><tr><th>类型</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>🔷 网络层</td><td><code>nn.Linear</code>, <code>nn.Conv2d</code>, <code>nn.LSTM</code>等</td><td>定义输入层、隐藏层、输出层结构</td></tr><tr><td>🔶 激活函数</td><td><code>nn.ReLU()</code>, <code>nn.Sigmoid()</code> 等</td><td>可以作为类成员，也可以直接在 <code>forward()</code> 里用</td></tr><tr><td>🔸 Dropout / BatchNorm</td><td><code>nn.Dropout</code>, <code>nn.BatchNorm1d</code> 等</td><td>用于正则化、加速收敛</td></tr><tr><td>🔻 有时会放优化器 / 损失函数（但不推荐）</td><td><code>optim.SGD</code>, <code>nn.CrossEntropyLoss</code></td><td>一般在模型外单独写更清晰</td></tr></tbody></table><p>比如在上述示例代码中的具体内容： -<code>super(SimpleFNN, self).__init__()</code> 调用父类 nn.Module的初始化方法，确保网络能正常工作和注册所有子模块。</p><ul><li><p><code>self.fc1 = nn.Linear(4, 8)</code>定义第一个全连接层（线性层），它接受4维输入，输出8维数据。这层会学习一个 4×8 的权重矩阵和偏置向量。</p></li><li><p><code>self.relu = nn.ReLU()</code>定义了一个激活函数ReLU，增加网络的非线性表达能力。这里是先定义好，可以在 forward 中调用。</p></li><li><p><code>self.fc2 = nn.Linear(8, 3)</code>定义第二个全连接层，接受8维输入，输出3维结果。这常用作分类任务的输出层，输出3个类别的分数。</p></li></ul><p><code>forward</code> 函数 —数据的“运行流程”,里面定义的是从”输入到输出”的这一整条路线</p><p>作用： 定义输入数据如何通过网络计算得到输出。相当于网络的“运行步骤”，告诉 PyTorch 具体执行什么操作。</p><p>具体流程： - <code>x = self.fc1(x)</code> 输入数据 x先经过第一个全连接层，变成8维的向量。</p><ul><li><p><code>x = self.relu(x)</code> 将刚得到的8维数据通过 ReLU激活函数，增加非线性。 ReLU的作用是把负数变为0，正数保持不变。</p></li><li><p><code>x = self.fc2(x)</code>再把激活后的结果输入到第二个全连接层，变成3维输出。</p></li><li><p><code>return x</code>返回最终输出，通常是“分类分数”或“回归预测值”。</p></li></ul><h3 id="激活函数">2.3激活函数</h3><table><colgroup><col style="width: 16%"><col style="width: 49%"><col style="width: 34%"></colgroup><thead><tr><th>激活函数</th><th>数学形式</th><th>特点</th></tr></thead><tbody><tr><td><strong>ReLU</strong></td><td><span class="math inline"><em>f</em>(<em>x</em>) = max (0, <em>x</em>)</span></td><td>简单高效，梯度传播好，但会有”死神经元”问题</td></tr><tr><td><strong>Sigmoid</strong></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex;" xmlns="http://www.w3.org/2000/svg" width="12.761ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 5640.4 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3233.6,0)"><g data-mml-node="mn" transform="translate(1026.7,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(1278,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g><rect width="2166.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></td><td>输出在(0,1)，容易梯度消失</td></tr><tr><td><strong>Tanh</strong></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex;" xmlns="http://www.w3.org/2000/svg" width="13.487ex" height="3.052ex" role="img" focusable="false" viewBox="0 -946.2 5961.1 1349.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3233.6,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,363) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(953.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(1731.5,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,289) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(953.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(1731.5,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g><rect width="2487.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></td><td>输出在(-1,1)，比Sigmoid对称，但也可能梯度消失</td></tr><tr><td><strong>Leaky ReLU</strong></td><td><span class="math inline"><em>f</em>(<em>x</em>) = max (0.01<em>x</em>, <em>x</em>)</span></td><td>解决ReLU死区问题</td></tr><tr><td><strong>ELU</strong></td><td>指数线性单元</td><td>更平滑的梯度流</td></tr></tbody></table><p>作用：激活函数让隐藏层拥有表达复杂模式的能力，是神经网络“聪明起来”的关键。</p><h3 id="损失函数">2.4损失函数</h3><table><colgroup><col style="width: 25%"><col style="width: 3%"><col style="width: 19%"><col style="width: 23%"><col style="width: 20%"><col style="width: 0%"><col style="width: 6%"></colgroup><thead><tr><th>名称</th><th>适用任务</th><th>PyTorch 对应函数</th><th>公式/描述</th><th>特点与使用场景</th><th></th><th></th></tr></thead><tbody><tr><td><strong>均方误差（MSE）</strong></td><td>回归</td><td><code>nn.MSELoss</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="13.932ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 6157.8 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1030.9,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mo" transform="translate(2086.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2475.9,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3515.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4515.3,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(5332.3,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></td><td>对异常值敏感；常用于回归</td><td></td><td></td></tr><tr><td><strong>平均绝对误差（MAE）</strong></td><td>回归</td><td><code>nn.L1Loss</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="11.561ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 5109.9 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1030.9,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(2253.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3292.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4293,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></td><td>抗异常值能力强，收敛速度慢</td><td></td><td></td></tr><tr><td><strong>交叉熵损失（Cross Entropy）</strong></td><td>分类</td><td><code>nn.CrossEntropyLoss</code></td><td><span class="math inline">−∑<em>y</em><sub><em>i</em></sub>log (<em>ŷ</em><sub><em>i</em></sub>)</span></td><td>多分类常用，内置了 <code>LogSoftmax</code> +<code>NLLLoss</code></td><td></td><td></td></tr><tr><td><strong>二分类交叉熵（BCE）</strong></td><td>二分类</td><td><code>nn.BCELoss</code> or <code>nn.BCEWithLogitsLoss</code></td><td><span class="math inline">−[<em>y</em>log (<em>ŷ</em>) + (1 − <em>y</em>)log (1 − <em>ŷ</em>)]</span></td><td>二分类常用；<code>BCEWithLogitsLoss</code>更稳定，内部自带sigmoid</td><td></td><td></td></tr><tr><td><strong>KL散度（KL Divergence）</strong></td><td>分布匹配</td><td><code>nn.KLDivLoss</code></td><td><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="17.265ex" height="4.07ex" role="img" focusable="false" viewBox="0 -1149.5 7631.3 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1222.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1725.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2114.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2686.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(3242.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(4520.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mrow" transform="translate(4687,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="mfrac" transform="translate(597,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1464,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(235.2,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(460,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(849,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1421,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="1510.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2347.3,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g></g></g></svg></mjx-container></span></td><td>用于衡量两个概率分布之间的差距</td><td></td><td></td></tr><tr><td><strong>负对数似然损失（NLL）</strong></td><td>分类</td><td><code>nn.NLLLoss</code></td><td><span class="math inline">−log (<em>p</em><sub>true</sub>)</span></td><td>通常和 <code>LogSoftmax</code> 一起用</td><td></td><td></td></tr><tr><td><strong>Huber 损失</strong></td><td>回归（稳健）</td><td><code>nn.SmoothL1Loss</code></td><td>结合 MAE 和 MSE 的优点</td><td>对离群值鲁棒，适合有噪声的回归问题</td><td></td><td></td></tr><tr><td><strong>多标签 Soft Margin 损失</strong></td><td>多标签分类</td><td><code>nn.MultiLabelSoftMarginLoss</code></td><td>基于每个标签的 sigmoid + binary cross-entropy</td><td>多标签多分类（每个样本可以属于多个类）</td><td></td><td></td></tr><tr><td><strong>CTC 损失（Connectionist TemporalClassification）</strong></td><td>序列学习</td><td><code>nn.CTCLoss</code></td><td>解决输入输出长度不对齐的问题（如语音识别）</td><td>不需要对齐的标签，适合语音、OCR等</td><td></td><td></td></tr><tr><td><strong>Triplet Loss</strong></td><td>度量学习</td><td><code>nn.TripletMarginLoss</code></td><td>让 anchor 更接近 positive，远离 negative</td><td>常用于人脸识别、图像检索等</td><td></td><td></td></tr><tr><td><strong>Cosine Embedding Loss</strong></td><td>度量学习</td><td><code>nn.CosineEmbeddingLoss</code></td><td>基于余弦相似度的正负样本对学习</td><td>学习语义相似的嵌入表示（embedding）</td><td></td><td></td></tr></tbody></table><h3 id="优化器">2.5优化器</h3><table><colgroup><col style="width: 21%"><col style="width: 37%"><col style="width: 21%"><col style="width: 19%"></colgroup><thead><tr><th>优化器名称</th><th>PyTorch 类</th><th>特点</th><th>备注</th></tr></thead><tbody><tr><td><strong>SGD（随机梯度下降）</strong></td><td><code>torch.optim.SGD</code></td><td>最基础的优化器</td><td>可搭配 Momentum 使用</td></tr><tr><td><strong>SGD + Momentum</strong></td><td><code>torch.optim.SGD(momentum=0.9)</code></td><td>缓冲梯度方向，减少震荡</td><td>比单纯 SGD 更快收敛</td></tr><tr><td><strong>Adagrad</strong></td><td><code>torch.optim.Adagrad</code></td><td>对稀疏梯度参数有优势</td><td>可能学习率过早变小</td></tr><tr><td><strong>RMSprop</strong></td><td><code>torch.optim.RMSprop</code></td><td>控制学习率衰减</td><td>推荐用于 RNN</td></tr><tr><td><strong>Adam</strong></td><td><code>torch.optim.Adam</code></td><td>自适应 + 动量</td><td>最常用优化器之一</td></tr><tr><td><strong>AdamW</strong></td><td><code>torch.optim.AdamW</code></td><td>改进的 Adam，加权衰减更科学</td><td>推荐用于 Transformer</td></tr><tr><td><strong>Adadelta</strong></td><td><code>torch.optim.Adadelta</code></td><td>改进 Adagrad，避免学习率消失</td><td>少用但可选</td></tr><tr><td><strong>NAdam</strong></td><td><code>torch.optim.NAdam</code></td><td>Adam + Nesterov 动量</td><td>更快的收敛性</td></tr><tr><td><strong>RAdam</strong></td><td><code>torch.optim.RAdam</code></td><td>修正初始训练阶段不稳定</td><td>更鲁棒于训练初期</td></tr><tr><td><strong>LAMB</strong></td><td>无官方支持（用 HuggingFace 优化器）</td><td>大模型（如 BERT）适用</td><td>用于大 batch 训练</td></tr><tr><td><strong>AdaBelief</strong></td><td>第三方库</td><td>改进 Adam，使更新更像 SGD</td><td>收敛快 + 泛化强</td></tr></tbody></table><hr><h3 id="整个神经网络过程">2.6整个神经网络过程</h3><p>综上所述，我们得到一个神经网络的整个过程，根据上面已经定义好的前馈神经网络进行一个简单补充</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torch.optim as optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个简单的前馈神经网络（输入层 → 隐藏层 → 输出层）</span></span><br><span class="line">class SimpleFNN(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SimpleFNN, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(4, 8)   <span class="comment"># 输入层4个特征，隐藏层8个神经元</span></span><br><span class="line">        self.relu = nn.ReLU()        <span class="comment"># 激活函数</span></span><br><span class="line">        self.fc2 = nn.Linear(8, 3)   <span class="comment"># 输出层3个类别（适合做分类）</span></span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="built_in">return</span> x  <span class="comment"># 输出为 logits，未经过 softmax</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型实例</span></span><br><span class="line">model = SimpleFNN()</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个样本输入：batch_size=2，4个特征,2个样本+4个特征</span></span><br><span class="line">sample_input = torch.randn(2, 4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Input:\n"</span>, sample_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设真实标签（ground truth），batch 中两个样本分别是类 1 和类 2</span></span><br><span class="line">labels = torch.tensor([1, 2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数：交叉熵损失用于多分类问题</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义优化器：SGD优化器，学习率为0.01</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=0.01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------- 模拟一次训练步骤 -----------</span></span><br><span class="line"><span class="comment"># 前向传播：将输入送入模型</span></span><br><span class="line">outputs = model(sample_input)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Model raw output (logits):\n"</span>, outputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失（CrossEntropyLoss内部包含了softmax）</span></span><br><span class="line">loss = criterion(outputs, labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Loss:"</span>, loss.item())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空之前的梯度</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向传播：自动计算梯度</span></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新权重和偏置</span></span><br><span class="line">optimizer.step()</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="三数据的处理和加载">三、数据的处理和加载</h2><h3 id="dataset和dataloader">3.1Dataset和DataLoader</h3><p>Dataset本身是一个抽象类，允许你以它为父类定义一个自己的数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch.utils.data import Dataset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义数据集类</span></span><br><span class="line">class MyDataset(Dataset):</span><br><span class="line">    def __init__(self, X_data, Y_data):</span><br><span class="line">        <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        初始化数据集，X_data 和 Y_data 是两个列表或数组</span></span><br><span class="line"><span class="string">        X_data: 输入特征</span></span><br><span class="line"><span class="string">        Y_data: 目标标签</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span></span><br><span class="line">        self.X_data = X_data</span><br><span class="line">        self.Y_data = Y_data</span><br><span class="line"></span><br><span class="line">    def __len__(self):</span><br><span class="line">        <span class="string">""</span><span class="string">"返回数据集的大小"</span><span class="string">""</span></span><br><span class="line">        <span class="built_in">return</span> len(self.X_data)</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, idx):</span><br><span class="line">        <span class="string">""</span><span class="string">"返回指定索引的数据"</span><span class="string">""</span></span><br><span class="line">        x = torch.tensor(self.X_data[idx], dtype=torch.float32)  <span class="comment"># 转换为 Tensor</span></span><br><span class="line">        y = torch.tensor(self.Y_data[idx], dtype=torch.float32)</span><br><span class="line">        <span class="built_in">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">X_data = [[1, 2], [3, 4], [5, 6], [7, 8]]  <span class="comment"># 输入特征</span></span><br><span class="line">Y_data = [1, 0, 1, 0]  <span class="comment"># 目标标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集实例    </span></span><br><span class="line">dataset = MyDataset(X_data, Y_data)</span><br></pre></td></tr></table></figure><p>DataLoader可以用于按批次(batch)从Dataset中加载数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from torch.utils.data import DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 DataLoader 实例，batch_size 设置每次加载的样本数量,其中shuffle表示是否对数据进行洗牌，通常训练时需要将数据打乱。</span></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=2, shuffle=True)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印加载的数据</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(1):</span><br><span class="line">    <span class="keyword">for</span> batch_idx, (inputs, labels) <span class="keyword">in</span> enumerate(dataloader):</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">'Batch {batch_idx + 1}:'</span>)</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">'Inputs: {inputs}'</span>)</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">'Labels: {labels}'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Batch 1:</span><br><span class="line">Inputs: tensor([[3., 4.], [1., 2.]])</span><br><span class="line">Labels: tensor([0., 1.])</span><br><span class="line">Batch 2:</span><br><span class="line">Inputs: tensor([[7., 8.], [5., 6.]])</span><br><span class="line">Labels: tensor([0., 1.])</span><br></pre></td></tr></table></figure><h3 id="对图像数据预处理和增强">3.2对图像数据预处理和增强</h3><p>在pytorch中我们经常利用<code>torchvision.transforms</code>模块对图像数据进行预处理和增强</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import torchvision.transforms as transforms</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据预处理的流水线</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize((<span class="number">128</span>, <span class="number">128</span>)),  <span class="comment"># 将图像调整为 128x128</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图像转换为张量</span></span><br><span class="line">    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  <span class="comment"># 标准化</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像</span></span><br><span class="line">image = Image.open(<span class="string">'image.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用预处理</span></span><br><span class="line">image_tensor = transform(image)</span><br><span class="line"><span class="built_in">print</span>(image_tensor.shape)  <span class="comment"># 输出张量的形状</span></span><br></pre></td></tr></table></figure><p>常见预处理方式：</p><table><colgroup><col style="width: 43%"><col style="width: 56%"></colgroup><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>transforms.Resize(size)</code></td><td>调整图像大小为固定尺寸，例如 <code>(128, 128)</code></td></tr><tr><td><code>transforms.CenterCrop(size)</code></td><td>从中心裁剪固定大小</td></tr><tr><td><code>transforms.ToTensor()</code></td><td>将 PIL.Image 或 numpy.ndarray 转为 <code>[0, 1]</code> 的张量</td></tr><tr><td><code>transforms.Normalize(mean, std)</code></td><td>按通道标准化，常用于预训练模型输入要求</td></tr></tbody></table><p>常见数据增强方式：</p><table><colgroup><col style="width: 78%"><col style="width: 21%"></colgroup><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>transforms.RandomHorizontalFlip(p=0.5)</code></td><td>以概率 <code>p</code> 水平翻转图像</td></tr><tr><td><code>transforms.RandomVerticalFlip()</code></td><td>垂直翻转</td></tr><tr><td><code>transforms.RandomRotation(degrees)</code></td><td>随机旋转图像（角度范围）</td></tr><tr><td><code>transforms.ColorJitter()</code></td><td>改变图像的亮度、对比度、饱和度等</td></tr><tr><td><code>transforms.RandomResizedCrop(size)</code></td><td>随机裁剪后缩放到固定尺寸</td></tr><tr><td><code>transforms.RandomAffine(degrees, translate, scale, shear)</code></td><td>随机仿射变换</td></tr></tbody></table><p>如何对图像数据集进行加载呢，我们常利用<code>torchvision.datasets</code>对图像数据集进行加载</p><p>对于图像数据集，<code>torchvision.datasets</code>提供了许多常见数据集（如 CIFAR-10、ImageNet、MNIST等）以及用于加载图像数据的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import torchvision.datasets as datasets</span><br><span class="line">import torchvision.transforms as transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义预处理操作</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))  <span class="comment"># 对灰度图像进行标准化</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并加载 MNIST 数据集</span></span><br><span class="line">train_dataset = datasets.MNIST(root=<span class="string">'./data'</span>, train=True, download=True, transform=transform)</span><br><span class="line">test_dataset = datasets.MNIST(root=<span class="string">'./data'</span>, train=False, download=True, transform=transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 DataLoader</span></span><br><span class="line">train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)</span><br><span class="line">test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代训练数据</span></span><br><span class="line"><span class="keyword">for</span> inputs, labels <span class="keyword">in</span> train_loader:</span><br><span class="line">    <span class="built_in">print</span>(inputs.shape)  <span class="comment"># 每个批次的输入数据形状</span></span><br><span class="line">    <span class="built_in">print</span>(labels.shape)  <span class="comment"># 每个批次的标签形状</span></span><br></pre></td></tr></table></figure><h3 id="pytorchtransforms">3.3 pytorch—transforms</h3><table><colgroup><col style="width: 4%"><col style="width: 37%"><col style="width: 25%"><col style="width: 32%"></colgroup><thead><tr><th>类别</th><th>变换函数</th><th>描述说明</th><th>示例代码</th></tr></thead><tbody><tr><td><strong>预处理</strong></td><td><code>transforms.ToTensor()</code></td><td>将 PIL 图像或 NumPy 数组转换为张量，并将像素值归一化到<code>[0, 1]</code></td><td><code>transforms.ToTensor()</code></td></tr><tr><td></td><td><code>transforms.Normalize(mean, std)</code></td><td>对图像张量进行标准化（零均值、单位方差）</td><td><code>transforms.Normalize(mean=[0.5], std=[0.5])</code></td></tr><tr><td></td><td><code>transforms.Resize(size)</code></td><td>将图像缩放到指定大小（宽、高）</td><td><code>transforms.Resize((128, 128))</code></td></tr><tr><td></td><td><code>transforms.CenterCrop(size)</code></td><td>从图像中心裁剪指定大小区域</td><td><code>transforms.CenterCrop(128)</code></td></tr><tr><td><strong>增强</strong></td><td><code>transforms.RandomHorizontalFlip(p)</code></td><td>以概率 <code>p</code> 随机水平翻转图像</td><td><code>transforms.RandomHorizontalFlip(p=0.5)</code></td></tr><tr><td></td><td><code>transforms.RandomRotation(degrees)</code></td><td>在 <code>[-degrees, +degrees]</code> 范围内随机旋转图像</td><td><code>transforms.RandomRotation(30)</code></td></tr><tr><td></td><td><code>transforms.ColorJitter(brightness, contrast, saturation, hue)</code></td><td>随机调整图像的亮度、对比度、饱和度、色调</td><td><code>transforms.ColorJitter(brightness=0.5, contrast=0.5)</code></td></tr><tr><td></td><td><code>transforms.RandomCrop(size)</code></td><td>随机从图像中裁剪出指定大小区域</td><td><code>transforms.RandomCrop(128)</code></td></tr><tr><td></td><td><code>transforms.RandomResizedCrop(size)</code></td><td>随机裁剪图像的一部分并缩放到给定大小</td><td><code>transforms.RandomResizedCrop(224)</code></td></tr><tr><td><strong>组合</strong></td><td><code>transforms.Compose([...])</code></td><td>将多个变换按顺序组合使用</td><td><code>transforms.Compose([ToTensor(), Normalize(...)])</code></td></tr></tbody></table><p>调用实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize((<span class="number">128</span>, <span class="number">128</span>)),</span><br><span class="line">    transforms.RandomHorizontalFlip(p=0.5),</span><br><span class="line">    transforms.RandomRotation(degrees=15),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=[0.5], std=[0.5])</span><br><span class="line">])</span><br></pre></td></tr></table></figure><hr><h2 id="四线性回归">四、线性回归</h2><p>首先什么是线性回归，可以说线性回归是一个没有隐藏层的前馈神经网络，非常基础的内容，对于一个简单的线性回归问题和模型通常可以表示成：</p><p><span class="math display"><em>y</em> = <em>a</em><sub>1</sub> × <em>x</em> + <em>a</em><sub>2</sub> × <em>x</em> + ... + <em>b</em></span></p><p>对数据集进行训练，对Y进行拟合</p><p>首先我们线先定义一个数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机种子，确保每次运行结果一致</span></span><br><span class="line">torch.manual_seed(42)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成训练数据</span></span><br><span class="line">X = torch.randn(100, 2)  <span class="comment"># 100 个样本，每个样本 2 个特征</span></span><br><span class="line">true_w = torch.tensor([2.0, 3.0])  <span class="comment"># 假设真实权重</span></span><br><span class="line">true_b = 4.0  <span class="comment"># 偏置项</span></span><br><span class="line">Y = X @ true_w + true_b + torch.randn(100) * 0.1  <span class="comment"># 加入一些噪声</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印部分数据</span></span><br><span class="line"><span class="built_in">print</span>(X[:5])</span><br><span class="line"><span class="built_in">print</span>(Y[:5])</span><br></pre></td></tr></table></figure><p>之后我们再定义一个线性回归的模型类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class LinearRegressionModel(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(LinearRegressionModel,self).__init__()</span><br><span class="line">        self.linear = nn.Linear(2, 1)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        <span class="built_in">return</span> self.linear(x)</span><br></pre></td></tr></table></figure><p>其中<code>super(LinearRegressionModel,self).__init__()</code>这点是关键：子类继承父类时，不自动调用父类的构造函数，你必须显式调用它。PyTorch中所有自定义模型都要继承自 nn.Module。nn.Module 提供了很多核心功能。</p><p>之后我们实例化该模型，并定义后续需要的损失函数和优化器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model= LinearRegressionModel()</span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=0.01)</span><br></pre></td></tr></table></figure><p>接下来便可以对模型进行训练了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_epochs = 100</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">    model.train()</span><br><span class="line">    predictions=model(X)</span><br><span class="line">    loss=criterion(predictions.squeeze(), Y)</span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">    optimizer.zero_grad()  <span class="comment"># 清空之前的梯度</span></span><br><span class="line">    loss.backward()  <span class="comment"># 计算梯度</span></span><br><span class="line">    optimizer.step()  <span class="comment"># 更新模型参数</span></span><br></pre></td></tr></table></figure><p>最后将数据可视化查看分析结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看训练后的权重和偏置</span></span><br><span class="line"><span class="built_in">print</span>(f<span class="string">'Predicted weight: {model.linear.weight.data.numpy()}'</span>)</span><br><span class="line"><span class="built_in">print</span>(f<span class="string">'Predicted bias: {model.linear.bias.data.numpy()}'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新数据上做预测</span></span><br><span class="line">with torch.no_grad():  <span class="comment"># 评估时不需要计算梯度</span></span><br><span class="line">    predictions = model(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化预测与实际值</span></span><br><span class="line">plt.scatter(X[:, 0], Y, color=<span class="string">'blue'</span>, label=<span class="string">'True values'</span>)</span><br><span class="line">plt.scatter(X[:, 0], predictions, color=<span class="string">'red'</span>, label=<span class="string">'Predictions'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="/images/pytorch/linearRgression.png" alt="ex4"><figcaption aria-hidden="true">ex4</figcaption></figure><p>训练过程，随着loss减小，模型的权重和偏置将不断和true_w和true_b相接近</p><hr><h2 id="五卷积神经网络">五、卷积神经网络</h2><p>是用于处理具有网格状拓扑结构数据(网格状结构是一种将数据点按照行列（二维坐标）方式排列的数据结构。每个点的邻居是它上下左右的节点，类似于棋盘、图像像素排列、或地理栅格。)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A11  A12  A13</span><br><span class="line">A21  A22  A23</span><br><span class="line">A31  A32  A33</span><br></pre></td></tr></table></figure> 这是一张整个卷积神经网络过程的思维导图 <img src="/images/pytorch/CNN.png" alt="CNN"></p><p>对一些概念的解析：</p><ul><li>池化层：池化相当于把一个图的分辨率给降低，让图变小，减小需要处理的数据量同时不改变图的特征</li><li>卷积层:是利用卷积核在图上进行特征提取，生成特征图像，如sobel算子就是提取图像边缘信息的卷积核</li><li>展平层：将多维的特征图转换为一维向量，以便输入到全连接层<ul><li>在 CNN的前面部分，通常包含多个卷积层（Conv2d）、池化层（MaxPool2d），这些操作处理的是3D 的张量（形状一般是 [batch_size, channels, height,width]）。但全连接层（nn.Linear）只能接收二维的张量（形状 [batch_size,feature_dim]），所以必须先“展平”卷积输出。</li></ul></li><li>全连接层：类似于传统的神经网络层，用于将提取的特征映射到输出类别</li></ul><p>知道上面这些知识之后接下来便可以实现一个CNN手写数字图像识别的实例了</p><p>定义一个简单的CNN模型</p><h2 id="section"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class SimpleCNN(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SimpleCNN, self).__init__()</span><br><span class="line">        <span class="comment"># 定义卷积层：输入1通道，输出32通道，卷积核大小3x3</span></span><br><span class="line">        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)</span><br><span class="line">        <span class="comment"># 定义卷积层：输入32通道，输出64通道</span></span><br><span class="line">        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)</span><br><span class="line">        <span class="comment"># 定义全连接层</span></span><br><span class="line">        self.fc1 = nn.Linear(64 * 7 * 7, 128)  <span class="comment"># 输入大小 = 特征图大小 * 通道数</span></span><br><span class="line">        self.fc2 = nn.Linear(128, 10)  <span class="comment"># 10 个类别</span></span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = F.relu(self.conv1(x))  <span class="comment"># 第一层卷积 + ReLU</span></span><br><span class="line">        x = F.max_pool2d(x, 2)     <span class="comment"># 最大池化</span></span><br><span class="line">        x = F.relu(self.conv2(x))  <span class="comment"># 第二层卷积 + ReLU</span></span><br><span class="line">        x = F.max_pool2d(x, 2)     <span class="comment"># 最大池化</span></span><br><span class="line">        x = x.view(-1, 64 * 7 * 7) <span class="comment"># 展平操作</span></span><br><span class="line">        x = F.relu(self.fc1(x))    <span class="comment"># 全连接层 + ReLU</span></span><br><span class="line">        x = self.fc2(x)            <span class="comment"># 全连接层输出</span></span><br><span class="line">        <span class="built_in">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型实例</span></span><br><span class="line">model = SimpleCNN()</span><br></pre></td></tr></table></figure></h2><h2 id="六循环神经网络">六、循环神经网络</h2><h3 id="理解循环rnn">6.1理解循环RNN</h3><p>首先丢张RNN图方便理解什么是RNN</p><figure><img src="/images/pytorch/RNN.png" alt="RNN"><figcaption aria-hidden="true">RNN</figcaption></figure><p>从上图可以非常直观的看，在 RNN中，数据不仅沿着网络层级流动，还会在每个时间步骤上传播到当前的隐层状态，从而将之前的信息传递到下一个时间步骤。</p><p>于是我们可以可以得到如下两个式子 <span class="math display"><em>h</em><sub><em>t</em></sub> = <em>f</em>(<em>W</em><sub><em>h</em><em>h</em></sub><em>h</em><sub><em>t</em> − 1</sub> + <em>W</em><sub><em>x</em><em>h</em></sub><em>x</em><sub><em>t</em></sub> + <em>b</em><sub><em>h</em></sub>)</span><span class="math display"><em>y</em><sub><em>t</em></sub> = <em>W</em><sub><em>h</em><em>y</em></sub><em>h</em><sub><em>t</em></sub> + <em>b</em><sub><em>y</em></sub></span></p><p>其中:</p><ul><li><p><span class="math inline"><em>W</em><sub><em>x</em><em>h</em></sub></span>:输入到隐藏状态的权重矩阵，用于将输入<span class="math inline"><em>X</em><sub><em>t</em></sub></span>转换为隐藏状态的一部分</p></li><li><p><span class="math inline"><em>W</em><sub><em>h</em><em>h</em></sub></span>:隐藏状态到隐藏状态的权重矩阵，用于将前一时间步的隐藏状态<span class="math inline"><em>h</em><sub><em>t</em> − 1</sub></span>转换为当前时间步隐藏状态的一部分。</p></li><li><p><span class="math inline"><em>W</em><sub><em>h</em><em>y</em></sub></span>:隐藏状态到输出的权重矩阵，用于将隐藏状态<span class="math inline"><em>h</em><sub><em>t</em></sub></span>转换为输出<span class="math inline"><em>y</em><sub><em>t</em></sub></span>。</p></li><li><p>f:激活函数(如 Tanh 或 ReLU)</p></li><li><p>隐藏状态 (ht,ht-1,….): 它在每个时间步存储有关序列的信息。<span class="math inline"><em>h</em><sub><em>t</em></sub></span>是当前时间步的隐藏状态，<span class="math inline"><em>h</em><sub><em>t</em> − 1</sub></span>是前一个时间步的隐藏状态。</p></li></ul><h3 id="rnn实际实现">6.2RNN实际实现</h3><p>在pytorch内有几种RNN模块</p><ol type="1"><li>torch.nn.RNN：基本的RNN单元</li><li>torch.nn.LSTM：长短期记忆单元，能够学习长期依赖关系</li><li>torch.nn.GRU：门控循环单元，是LSTM的简化版本，但通常更容易训练</li></ol><p>如下是一个简单的RNN模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class SimpleRNN(nn.Module):</span><br><span class="line">    def __init__(self, input_size, hidden_size, output_size):</span><br><span class="line">        super(SimpleRNN, self).__init__()</span><br><span class="line">        <span class="comment"># 定义 RNN 层</span></span><br><span class="line">        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)</span><br><span class="line">        <span class="comment"># 定义全连接层</span></span><br><span class="line">        self.fc = nn.Linear(hidden_size, output_size)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        <span class="comment"># x: (batch_size, seq_len, input_size)</span></span><br><span class="line">        out, _ = self.rnn(x)  <span class="comment"># out: (batch_size, seq_len, hidden_size)</span></span><br><span class="line">        <span class="comment"># 取序列最后一个时间步的输出作为模型的输出</span></span><br><span class="line">        out = out[:, -1, :]  <span class="comment"># (batch_size, hidden_size)</span></span><br><span class="line">        out = self.fc(out)  <span class="comment"># 全连接层</span></span><br><span class="line">        <span class="built_in">return</span> out</span><br></pre></td></tr></table></figure><p>其中</p><table><thead><tr><th>维度名</th><th>含义</th></tr></thead><tbody><tr><td><code>batch_size</code></td><td>一次喂给模型的本个数（用于加速训练）</td></tr><tr><td><code>seq_len</code></td><td>每个样本有多少个时间步（即序列长度）</td></tr><tr><td><code>input_size</code></td><td>每个时间步输入的特征维度（如词向量维度）</td></tr></tbody></table><hr><h2 id="七-transformer架构">七、 Transformer架构</h2><h3 id="什么是transformer架构">7.1 什么是transformer架构</h3><p>如下是一张论文中的解释transformer的图</p><p><img src="/images/pytorch/transformer.jpg"></p><p>transformer架构就是利用注意力机制来获取序列之间联系的神经网络模型</p><h3 id="注意力机制">7.2 注意力机制</h3><p>可以理解为attention机制实质上就是权重的问题</p><figure><img src="/images/pytorch/attention.png" alt="attention"><figcaption aria-hidden="true">attention</figcaption></figure><figure><img src="/images/pytorch/self-attention.png" alt="self-attention"><figcaption aria-hidden="true">self-attention</figcaption></figure><h3 id="transformer架构的实现机理">7.3 transformer架构的实现机理</h3><p><img src="/images/pytorch/transformer1.png"></p><p><img src="/images/pytorch/transformer2.png"></p><ul><li><p>PositionEncoding:给每个词一个位置编码，表示该词在句子中的位置信息</p></li><li><p>Multi-Head Attension:对不同模块间产生的注意力机制</p></li></ul><hr><h2 id="八torch内常见函数">八、torch内常见函数</h2><p>张量类型检查和配置：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.is_tensor(obj)</code></td><td>检查是否为张量</td></tr><tr><td><code>torch.is_storage(obj)</code></td><td>检查是否为存储对象</td></tr><tr><td><code>torch.is_complex(input)</code></td><td>是否为复数类型</td></tr><tr><td><code>torch.is_conj(input)</code></td><td>是否为共轭张量</td></tr><tr><td><code>torch.is_floating_point(input)</code></td><td>是否为浮点类型</td></tr><tr><td><code>torch.is_nonzero(input)</code></td><td>是否为非零单元素张量</td></tr><tr><td><code>torch.set_default_dtype(d)</code></td><td>设置默认浮点数据类型</td></tr><tr><td><code>torch.get_default_dtype()</code></td><td>获取当前默认浮点数据类型</td></tr><tr><td><code>torch.set_default_device(device)</code></td><td>设置默认张量设备</td></tr><tr><td><code>torch.get_default_device()</code></td><td>获取默认张量设备</td></tr><tr><td><code>torch.numel(input)</code></td><td>获取元素总数</td></tr></tbody></table><p>Tensor 创建：</p><table><colgroup><col style="width: 70%"><col style="width: 29%"></colgroup><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.tensor(data)</code></td><td>从数据创建张量</td></tr><tr><td><code>torch.as_tensor(data)</code></td><td>转换为张量，共享数据</td></tr><tr><td><code>torch.from_numpy(ndarray)</code></td><td>从 NumPy 创建张量，共享数据</td></tr><tr><td><code>torch.zeros(size)</code></td><td>创建全零张量</td></tr><tr><td><code>torch.ones(size)</code></td><td>创建全一张量</td></tr><tr><td><code>torch.empty(size)</code></td><td>创建未初始化张量</td></tr><tr><td><code>torch.arange(start, end, step)</code></td><td>创建等差序列张量</td></tr><tr><td><code>torch.linspace(start, end, steps)</code></td><td>创建线性间隔张量</td></tr><tr><td><code>torch.logspace(start, end, steps, base)</code></td><td>创建对数间隔张量</td></tr><tr><td><code>torch.eye(n, m)</code></td><td>创建单位矩阵</td></tr><tr><td><code>torch.full(size, fill_value)</code></td><td>创建填充指定值的张量</td></tr><tr><td><code>torch.rand(size)</code></td><td>均匀分布随机张量</td></tr><tr><td><code>torch.randn(size)</code></td><td>标准正态分布张量</td></tr><tr><td><code>torch.randint(low, high, size)</code></td><td>整数随机张量</td></tr><tr><td><code>torch.randperm(n)</code></td><td>0 到 n-1 的随机排列</td></tr></tbody></table><p>Tensor 操作：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.cat(tensors, dim)</code></td><td>沿指定维度拼接张量</td></tr><tr><td><code>torch.stack(tensors, dim)</code></td><td>沿新维度堆叠张量</td></tr><tr><td><code>torch.split(tensor, split_size, dim)</code></td><td>按大小分割张量</td></tr><tr><td><code>torch.chunk(tensor, chunks, dim)</code></td><td>按块分割张量</td></tr><tr><td><code>torch.reshape(input, shape)</code></td><td>改变形状</td></tr><tr><td><code>torch.transpose(input, dim0, dim1)</code></td><td>转置两个维度</td></tr><tr><td><code>torch.squeeze(input, dim)</code></td><td>去除 1 维度</td></tr><tr><td><code>torch.unsqueeze(input, dim)</code></td><td>添加 1 维度</td></tr><tr><td><code>torch.expand(input, size)</code></td><td>扩展维度</td></tr><tr><td><code>torch.narrow(input, dim, start, length)</code></td><td>张量切片</td></tr><tr><td><code>torch.permute(input, dims)</code></td><td>维度重排</td></tr><tr><td><code>torch.masked_select(input, mask)</code></td><td>布尔掩码选择</td></tr><tr><td><code>torch.index_select(input, dim, index)</code></td><td>索引选择元素</td></tr><tr><td><code>torch.gather(input, dim, index)</code></td><td>按索引收集数据</td></tr><tr><td><code>torch.scatter(input, dim, index, src)</code></td><td>按索引写入数据</td></tr><tr><td><code>torch.nonzero(input)</code></td><td>获取非零索引</td></tr></tbody></table><p>数学运算：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.add(input, other)</code></td><td>加法</td></tr><tr><td><code>torch.sub(input, other)</code></td><td>减法</td></tr><tr><td><code>torch.mul(input, other)</code></td><td>乘法</td></tr><tr><td><code>torch.div(input, other)</code></td><td>除法</td></tr><tr><td><code>torch.pow(input, exponent)</code></td><td>幂运算</td></tr><tr><td><code>torch.sqrt(input)</code></td><td>平方根</td></tr><tr><td><code>torch.exp(input)</code></td><td>指数函数</td></tr><tr><td><code>torch.log(input)</code></td><td>自然对数</td></tr><tr><td><code>torch.sum(input, dim)</code></td><td>求和</td></tr><tr><td><code>torch.mean(input, dim)</code></td><td>求均值</td></tr><tr><td><code>torch.max(input, dim)</code></td><td>最大值</td></tr><tr><td><code>torch.min(input, dim)</code></td><td>最小值</td></tr><tr><td><code>torch.abs(input)</code></td><td>绝对值</td></tr><tr><td><code>torch.clamp(input, min, max)</code></td><td>限制范围</td></tr><tr><td><code>torch.round(input)</code></td><td>四舍五入</td></tr><tr><td><code>torch.floor(input)</code></td><td>向下取整</td></tr><tr><td><code>torch.ceil(input)</code></td><td>向上取整</td></tr></tbody></table><p>随机数生成：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.manual_seed(seed)</code></td><td>设置随机种子</td></tr><tr><td><code>torch.initial_seed()</code></td><td>获取当前种子</td></tr><tr><td><code>torch.rand(size)</code></td><td>均匀分布张量</td></tr><tr><td><code>torch.randn(size)</code></td><td>正态分布张量</td></tr><tr><td><code>torch.randint(low, high, size)</code></td><td>整数随机张量</td></tr><tr><td><code>torch.randperm(n)</code></td><td>随机排列序列</td></tr></tbody></table><p>线性代数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.dot(input, other)</code></td><td>向量点积</td></tr><tr><td><code>torch.mm(input, mat2)</code></td><td>矩阵乘法</td></tr><tr><td><code>torch.bmm(input, mat2)</code></td><td>批量矩阵乘法</td></tr><tr><td><code>torch.eig(input)</code></td><td>特征值和特征向量</td></tr><tr><td><code>torch.svd(input)</code></td><td>奇异值分解</td></tr><tr><td><code>torch.inverse(input)</code></td><td>矩阵逆</td></tr><tr><td><code>torch.det(input)</code></td><td>行列式</td></tr><tr><td><code>torch.trace(input)</code></td><td>矩阵迹</td></tr></tbody></table><p>设备管理：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>torch.cuda.is_available()</code></td><td>是否支持 CUDA</td></tr><tr><td><code>torch.device(device)</code></td><td>创建设备对象</td></tr><tr><td><code>tensor.to(device)</code></td><td>张量迁移设备</td></tr></tbody></table><hr><h2 id="番外一pyplot">番外一、pyplot</h2><h3 id="基本绘图流程">1.基本绘图流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据</span></span><br><span class="line">x = [1, 2, 3, 4, 5]</span><br><span class="line">y = [1, 4, 9, 16, 25]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 绘图</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">"折线图示例"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"X轴"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Y轴"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 显示图像</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol type="1"><li>准备好y关于x函数关系的数据</li><li>利用plot函数进行图像绘制，并对相关属性进行定义</li><li>对轴进行处理</li></ol><p>相关参数ex：</p><figure><img src="/images/pytorch/pyplot-fmt.png" alt="fmt"><figcaption aria-hidden="true">fmt</figcaption></figure><table><thead><tr><th><code>marker</code> 值</th><th>含义</th><th>显示效果</th></tr></thead><tbody><tr><td><code>'o'</code></td><td>圆圈</td><td>●</td></tr><tr><td><code>'s'</code></td><td>方形</td><td>■</td></tr><tr><td><code>'^'</code></td><td>上三角</td><td>▲</td></tr><tr><td><code>'v'</code></td><td>下三角</td><td>▼</td></tr><tr><td><code>'&gt;'</code></td><td>右三角</td><td>▶</td></tr><tr><td><code>'&lt;'</code></td><td>左三角</td><td>◀</td></tr><tr><td><code>'x'</code></td><td>十字叉</td><td>✕</td></tr><tr><td><code>'+'</code></td><td>加号</td><td>＋</td></tr><tr><td><code>'*'</code></td><td>星号</td><td>★</td></tr><tr><td><code>'.'</code></td><td>点</td><td>·</td></tr><tr><td><code>'D'</code></td><td>菱形</td><td>◆</td></tr><tr><td><code>'p'</code></td><td>五边形</td><td>⬟</td></tr><tr><td><code>'h'</code></td><td>六边形1</td><td>⬢</td></tr><tr><td><code>'H'</code></td><td>六边形2</td><td>⬣</td></tr><tr><td><code>None</code></td><td>无标记</td><td>无</td></tr></tbody></table><table><thead><tr><th><code>linestyle</code> 值</th><th>含义</th><th>示例样式</th></tr></thead><tbody><tr><td><code>'-'</code></td><td>实线</td><td>──────────────</td></tr><tr><td><code>'--'</code></td><td>虚线</td><td>– – – – – – – –</td></tr><tr><td><code>'-.'</code></td><td>点划线</td><td>– · – · – · – ·</td></tr><tr><td><code>':'</code></td><td>点线</td><td>··············</td></tr><tr><td><code>''</code> or <code>None</code></td><td>无线条</td><td>无</td></tr></tbody></table><h3 id="网格线">2.网格线</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = np.array([1, 2, 3, 4])</span><br><span class="line">y = np.array([1, 4, 9, 16])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"RUNOOB grid() Test"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x - label"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y - label"</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.grid(color = <span class="string">'r'</span>, linestyle = <span class="string">'--'</span>, linewidth = 0.5)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure><img src="/images/pytorch/ex1.png" alt="ex1"><figcaption aria-hidden="true">ex1</figcaption></figure><p>grid内还有axis属性，若设置axis=x则网格线就在y方向上出现</p><h3 id="绘制多图">3.绘制多图</h3><p>基础的用subplot方法绘图： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot 1:</span></span><br><span class="line">xpoints = np.array([0, 6])</span><br><span class="line">ypoints = np.array([0, 100])</span><br><span class="line"></span><br><span class="line">plt.subplot(1, 2, 1)</span><br><span class="line">plt.plot(xpoints,ypoints)</span><br><span class="line">plt.title(<span class="string">"plot 1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot 2:</span></span><br><span class="line">x = np.array([1, 2, 3, 4])</span><br><span class="line">y = np.array([1, 4, 9, 16])</span><br><span class="line"></span><br><span class="line">plt.subplot(1, 2, 2)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.title(<span class="string">"plot 2"</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">"RUNOOB subplot Test"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <img src="/images/pytorch/ex2.png" alt="ex2"></p><p>其中suplot(a,b,c)这三个参数分别说明，有a行b列个图，当前该图排在第c位</p><h3 id="散点柱形直方图和饼图s">3.散点，柱形,直方图和饼图s</h3><h4 id="散点图">1.散点图</h4><p>我们可以使用 pyplot 中的 scatter() 方法来绘制散点图。</p><p>基础调用方式： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.array([1, 2, 3, 4, 5, 6, 7, 8])</span><br><span class="line">y = np.array([1, 4, 9, 16, 7, 11, 23, 18])</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>scatter() 方法语法格式如下： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)</span><br></pre></td></tr></table></figure></p><table><colgroup><col style="width: 18%"><col style="width: 30%"><col style="width: 51%"></colgroup><thead><tr><th>参数名</th><th>类型</th><th>作用说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>array-like</td><td>每个点的 x 坐标（必须）</td></tr><tr><td><code>y</code></td><td>array-like</td><td>每个点的 y 坐标（必须）</td></tr><tr><td><code>s</code></td><td>float 或 array</td><td>点的<strong>大小</strong>，默认为20；可设置为数组使每个点大小不同</td></tr><tr><td><code>c</code></td><td>color 或 array</td><td>点的<strong>颜色</strong>，可以是字符串如<code>'red'</code>，或数组映射 colormap</td></tr><tr><td><code>marker</code></td><td>str</td><td>点的<strong>形状</strong>，如 <code>'o'</code>圆点、<code>'^'</code> 三角等</td></tr><tr><td><code>cmap</code></td><td>colormap</td><td>用于将 <code>c</code>数组映射为颜色的<strong>颜色映射表</strong>（如<code>plt.cm.Blues</code>）</td></tr><tr><td><code>norm</code></td><td>Normalize 实例</td><td>自定义颜色归一化方式，配合 <code>cmap</code> 使用</td></tr><tr><td><code>vmin</code></td><td>float</td><td><code>cmap</code> 的最小值（可控制颜色范围）</td></tr><tr><td><code>vmax</code></td><td>float</td><td><code>cmap</code> 的最大值（同上）</td></tr><tr><td><code>alpha</code></td><td>float [0, 1]</td><td>点的<strong>透明度</strong>，1为不透明，0为完全透明</td></tr><tr><td><code>linewidths</code></td><td>float 或 array</td><td>点的边框线宽</td></tr><tr><td><code>edgecolors</code></td><td>color or {‘face’, ‘none’}</td><td>点的边框颜色，可设为 <code>'face'</code>（和点一样）或<code>'none'</code>（无边框）</td></tr><tr><td><code>plotnonfinite</code></td><td>bool</td><td>是否绘制 NaN 或 Inf 值，默认 False</td></tr><tr><td><code>data</code></td><td>dict 或 DataFrame</td><td>支持使用 <code>data["x"]</code> 方式传参</td></tr><tr><td><code>**kwargs</code></td><td></td><td>传递给底层 <code>PathCollection</code> 的其他参数</td></tr></tbody></table><h4 id="柱形图">2.柱形图</h4><p>基础绘制方式： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="string">"Runoob-1"</span>, <span class="string">"Runoob-2"</span>, <span class="string">"Runoob-3"</span>, <span class="string">"C-RUNOOB"</span>])</span><br><span class="line">y = np.array([12, 22, 6, 18])</span><br><span class="line"></span><br><span class="line">plt.bar(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><table><colgroup><col style="width: 22%"><col style="width: 36%"><col style="width: 40%"></colgroup><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>array-like</td><td>每个条形的 x 坐标（分类变量索引或标签）</td></tr><tr><td><code>height</code></td><td>array-like</td><td>每个条形的高度</td></tr><tr><td><code>width</code></td><td>float 或 array</td><td>每个条形的宽度（默认 <code>0.8</code>）</td></tr><tr><td><code>bottom</code></td><td>float 或 array</td><td>每个条形的底部起始位置（默认是 <code>0</code>，用于堆叠）</td></tr><tr><td><code>align</code></td><td><code>'center'</code> or <code>'edge'</code></td><td>条形对齐方式，默认为 <code>'center'</code></td></tr><tr><td><code>color</code></td><td>颜色 或数组</td><td>条形颜色（可为字符串或 RGB 值）</td></tr><tr><td><code>edgecolor</code></td><td>颜色或数组</td><td>条形边框颜色</td></tr><tr><td><code>linewidth</code></td><td>float</td><td>条形边框宽度</td></tr><tr><td><code>tick_label</code></td><td>list</td><td>设置 x 轴刻度标签（如分类名称）</td></tr><tr><td><code>xerr</code>, <code>yerr</code></td><td>数组或标量</td><td>设置 x/y 方向的误差条（用于误差可视化）</td></tr><tr><td><code>ecolor</code></td><td>颜色</td><td>误差条的颜色</td></tr><tr><td><code>capsize</code></td><td>float</td><td>误差条末端横线的长度</td></tr><tr><td><code>label</code></td><td>str</td><td>设置用于图例的标签名</td></tr><tr><td><code>alpha</code></td><td>float</td><td>设置透明度（0~1）</td></tr></tbody></table><h4 id="饼图">3.饼图</h4><p>基础绘制方式 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">y = np.array([35, 25, 25, 15])</span><br><span class="line"></span><br><span class="line">plt.pie(y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><table><colgroup><col style="width: 23%"><col style="width: 21%"><col style="width: 55%"></colgroup><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>list 或 array</td><td>各个扇区的数值（自动归一化为比例）</td></tr><tr><td><code>labels</code></td><td>list[str]</td><td>每个扇区的标签（显示在图上）</td></tr><tr><td><code>explode</code></td><td>list[float]</td><td>控制每个扇区“弹出”的距离（例如 <code>[0, 0.1, 0, 0.2]</code>）</td></tr><tr><td><code>colors</code></td><td>list[str]</td><td>扇区的颜色序列</td></tr><tr><td><code>autopct</code></td><td>str 或函数</td><td>自动显示百分比格式（如 <code>"%.1f%%"</code>）</td></tr><tr><td><code>pctdistance</code></td><td>float</td><td>百分比文本距离圆心的比例（默认 <code>0.6</code>）</td></tr><tr><td><code>labeldistance</code></td><td>float</td><td>标签文本距离圆心的比例（默认 <code>1.1</code>）</td></tr><tr><td><code>shadow</code></td><td>bool</td><td>是否显示阴影（立体效果）</td></tr><tr><td><code>startangle</code></td><td>float</td><td>起始角度（默认是 0，通常设为 90 更美观）</td></tr><tr><td><code>radius</code></td><td>float</td><td>饼图的半径（默认是 1）</td></tr><tr><td><code>counterclock</code></td><td>bool</td><td>是否逆时针绘图（默认是 <code>True</code>）</td></tr><tr><td><code>wedgeprops</code></td><td>dict</td><td>控制扇区样式，如边框：<code>{'edgecolor': 'black'}</code></td></tr><tr><td><code>textprops</code></td><td>dict</td><td>设置文本样式，如字体大小、颜色</td></tr><tr><td><code>center</code></td><td>(float, float)</td><td>饼图的中心坐标（默认 <code>(0, 0)</code>）</td></tr><tr><td><code>frame</code></td><td>bool</td><td>是否画图框（默认 <code>False</code>）</td></tr><tr><td><code>rotatelabels</code></td><td>bool</td><td>是否旋转标签使其与扇区对齐（默认 <code>False</code>）</td></tr><tr><td><code>normalize</code></td><td>bool</td><td>是否归一化数据为比例（Matplotlib 3.4+）</td></tr></tbody></table><h4 id="直方图">4.直方图</h4><p>基本绘制方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一组随机数据</span></span><br><span class="line">data = np.random.randn(1000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">plt.hist(data, bins=30, color=<span class="string">'skyblue'</span>, alpha=0.8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图表属性</span></span><br><span class="line">plt.title(<span class="string">'RUNOOB hist() Test'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Frequency'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图表</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype=<span class="string">'bar'</span>, align=<span class="string">'mid'</span>, orientation=<span class="string">'vertical'</span>, rwidth=None, <span class="built_in">log</span>=False, color=None, label=None, stacked=False, **kwargs)</span><br></pre></td></tr></table></figure><table><colgroup><col style="width: 9%"><col style="width: 18%"><col style="width: 71%"></colgroup><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>array-like</td><td>要绘制直方图的数据</td></tr><tr><td><code>bins</code></td><td>int 或序列</td><td>直方图的柱数或自定义的分箱边界（如 <code>bins=10</code> 或<code>[0,1,2,3]</code>）</td></tr><tr><td><code>range</code></td><td>tuple(min, max)</td><td>设置数据范围，仅包含此范围内的值</td></tr><tr><td><code>density</code></td><td>bool</td><td>是否显示为<strong>概率密度</strong>（归一化面积为 1）</td></tr><tr><td><code>weights</code></td><td>array-like</td><td>给每个样本指定权重</td></tr><tr><td><code>cumulative</code></td><td>bool</td><td>是否绘制累计直方图</td></tr><tr><td><code>bottom</code></td><td>float 或 array</td><td>每个柱子的底部起点位置（默认从 0 开始）</td></tr><tr><td><code>histtype</code></td><td>str</td><td>直方图类型，常用有：<br><code>'bar'</code>（默认，填充柱状图）<br><code>'barstacked'</code>（堆叠柱状图）<br><code>'step'</code>（不填充，边框）<br><code>'stepfilled'</code>（填充阶梯）</td></tr><tr><td><code>align</code></td><td>{‘left’, ‘mid’, ‘right’}</td><td>柱子相对于 bin 边界的对齐方式</td></tr><tr><td><code>orientation</code></td><td>{‘vertical’, ‘horizontal’}</td><td>垂直 or 水平直方图</td></tr><tr><td><code>rwidth</code></td><td>float（0~1）</td><td>柱宽占 bin 宽度的比例（例如 0.8）</td></tr><tr><td><code>log</code></td><td>bool</td><td>y 轴是否使用对数刻度</td></tr><tr><td><code>color</code></td><td>str 或 list</td><td>设置柱子的颜色</td></tr><tr><td><code>label</code></td><td>str</td><td>图例标签</td></tr><tr><td><code>stacked</code></td><td>bool</td><td>是否堆叠多组数据</td></tr><tr><td><code>**kwargs</code></td><td>-</td><td>其他传入 <code>patches</code> 的参数，如透明度<code>alpha</code>、边框 <code>edgecolor</code> 等</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成三组随机数据</span></span><br><span class="line">data1 = np.random.normal(0, 1, 1000)</span><br><span class="line">data2 = np.random.normal(2, 1, 1000)</span><br><span class="line">data3 = np.random.normal(-2, 1, 1000)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">plt.hist(data1, bins=30, alpha=0.5, label=<span class="string">'Data 1'</span>)</span><br><span class="line">plt.hist(data2, bins=30, alpha=0.5, label=<span class="string">'Data 2'</span>)</span><br><span class="line">plt.hist(data3, bins=30, alpha=0.5, label=<span class="string">'Data 3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图表属性</span></span><br><span class="line">plt.title(<span class="string">'RUNOOB hist() TEST'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Value'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Frequency'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图表</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>以上实例中我们生成了三组不同的随机数据，并使用 hist()函数绘制了它们的直方图。通过设置不同的均值和标准差，我们可以生成具有不同分布特征的随机数据。</p><p>我们设置了 bins 参数为 30，这意味着将数据范围分成 30个等宽的区间，然后统计每个区间内数据的频数。</p><p>我们设置了 alpha 参数为 0.5，这意味着每个直方图的颜色透明度为 50%。我们使用 label 参数设置了每个直方图的标签，以便在图例中显示。</p><p>然后使用 legend() 函数显示图例。最后，我们使用 title()、xlabel() 和ylabel() 函数设置了图表的标题和坐标轴标签。</p><p>显示结果如下：</p><figure><img src="/images/pytorch/ex3.png" alt="ex3"><figcaption aria-hidden="true">ex3</figcaption></figure><h3 id="imshowimsaveimread">4.imshow,imsave,imread</h3><p>imshow用于图像显示 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 10x10 随机图像</span></span><br><span class="line">img = np.random.rand(10, 10)</span><br><span class="line"></span><br><span class="line">plt.imshow(img, cmap=<span class="string">'viridis'</span>, interpolation=<span class="string">'nearest'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.title(<span class="string">"随机图像"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><table><colgroup><col style="width: 27%"><col style="width: 72%"></colgroup><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>X</code></td><td>输入图像（2D/3D NumPy 数组）</td></tr><tr><td><code>cmap</code></td><td>颜色映射（如 <code>'gray'</code>, <code>'viridis'</code>,<code>'hot'</code> 等）</td></tr><tr><td><code>interpolation</code></td><td>插值方法（如 <code>'nearest'</code>,<code>'bilinear'</code>，用于放缩）</td></tr><tr><td><code>vmin</code>, <code>vmax</code></td><td>用于归一化图像值范围（像素值映射到颜色）</td></tr><tr><td><code>alpha</code></td><td>透明度（0 到 1）</td></tr><tr><td><code>extent</code></td><td>设置坐标轴范围，例如 <code>[xmin, xmax, ymin, ymax]</code></td></tr><tr><td><code>origin</code></td><td><code>'upper'</code> 或 <code>'lower'</code>，设置图像原点方向</td></tr></tbody></table><p>imread用于读取图像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">img = plt.imread(<span class="string">"cat.jpg"</span>)</span><br><span class="line"><span class="built_in">print</span>(img.shape)  <span class="comment"># 例如 (400, 600, 3)</span></span><br><span class="line"></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.title(<span class="string">"猫猫图像"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>imsave用于保存图像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存一张随机图像</span></span><br><span class="line">img = np.random.rand(100, 100)</span><br><span class="line">plt.imsave(<span class="string">"random_image.png"</span>, img, cmap=<span class="string">'gray'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>fname</code></td><td>保存文件路径（字符串）</td></tr><tr><td><code>arr</code></td><td>NumPy 图像数组</td></tr><tr><td><code>cmap</code></td><td>映射颜色表（灰度图需要）</td></tr><tr><td><code>format</code></td><td>可选强制保存格式</td></tr><tr><td><code>vmin</code>, <code>vmax</code></td><td>映射像素值范围（归一化）</td></tr></tbody></table><hr><h2 id="番外二数据处理篇">番外二、数据处理篇</h2><h3 id="pandas操作外部数据">Pandas操作外部数据</h3><ol type="1"><li>读取 CSV 文件：<code>pd.read_csv()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">"data.csv"</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>sep</code></td><td>分隔符，默认<code>,</code>，可以设为<code>\t</code></td></tr><tr><td><code>header</code></td><td>指定哪一行为列名</td></tr><tr><td><code>names</code></td><td>自定义列名</td></tr><tr><td><code>index_col</code></td><td>指定哪列作为索引</td></tr><tr><td><code>usecols</code></td><td>读取指定列</td></tr><tr><td><code>encoding</code></td><td>编码，避免中文乱码用<code>utf-8-sig</code> 或 <code>gbk</code></td></tr></tbody></table><ol start="2" type="1"><li>写入 CSV 文件：<code>df.to_csv()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(<span class="string">"output.csv"</span>, index=<span class="literal">False</span>, encoding=<span class="string">"utf-8-sig"</span>)</span><br></pre></td></tr></table></figure><hr><ol start="3" type="1"><li>读取 Excel 文件：<code>pd.read_excel()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">"data.xlsx"</span>, sheet_name=<span class="string">"Sheet1"</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>sheet_name</code></td><td>工作表名称或索引</td></tr><tr><td><code>usecols</code></td><td>指定读取列</td></tr><tr><td><code>index_col</code></td><td>设置索引列</td></tr></tbody></table><ol start="4" type="1"><li>写入 Excel 文件：<code>df.to_excel()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(<span class="string">"output.xlsx"</span>, sheet_name=<span class="string">"结果"</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>多个 sheet 写入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> pd.ExcelWriter(<span class="string">"multi.xlsx"</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df1.to_excel(writer, sheet_name=<span class="string">"Sheet1"</span>)</span><br><span class="line">    df2.to_excel(writer, sheet_name=<span class="string">"Sheet2"</span>)</span><br></pre></td></tr></table></figure><hr><ol start="6" type="1"><li>读取 JSON 文件：<code>pd.read_json()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_json(<span class="string">"data.json"</span>)</span><br></pre></td></tr></table></figure><p>JSON 格式要求：通常是数组对象结构，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">{</span><span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Alice"</span><span class="punctuation">,</span> <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">{</span><span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Bob"</span><span class="punctuation">,</span> <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ol start="7" type="1"><li>写入 JSON 文件：<code>df.to_json()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_json(<span class="string">"output.json"</span>, orient=<span class="string">"records"</span>, force_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>orient</code></td><td>结构方式，如 <code>records</code>, <code>split</code>,<code>index</code> 等</td></tr><tr><td><code>force_ascii</code></td><td>中文是否转义为 ASCII，设为 False 保留中文</td></tr></tbody></table><hr><table><thead><tr><th>文件类型</th><th>读取函数</th><th>写入函数</th><th>支持多表</th><th>编码设置</th></tr></thead><tbody><tr><td>CSV</td><td><code>pd.read_csv()</code></td><td><code>df.to_csv()</code></td><td>否</td><td>支持</td></tr><tr><td>Excel</td><td><code>pd.read_excel()</code></td><td><code>df.to_excel()</code></td><td>是</td><td>一般无需</td></tr><tr><td>JSON</td><td><code>pd.read_json()</code></td><td><code>df.to_json()</code></td><td>否</td><td>支持</td></tr></tbody></table><h3 id="pandas实现数据清洗">Pandas实现数据清洗</h3><ol type="1"><li>清理空值</li></ol><p>首先可以在读取文件的时候自定义空值 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">missing_values = [<span class="string">"n/a"</span>, <span class="string">"na"</span>, <span class="string">"--"</span>]#自定义缺失值</span><br><span class="line"><span class="built_in">df</span>=pd.read_csv(<span class="string">"./data/csv/property-data.csv"</span>,na_values=missing_values)</span><br></pre></td></tr></table></figure>利用dropna方法清理空值 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(axis=0,how=<span class="string">'any'</span>,thresh=None, subset=None, inplace=True) <span class="comment">#inplace=True表示在原数据上修改</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">df</span>[<span class="string">'NUM_BEDROOMS'</span>].isnull())</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure></p><ol start="2" type="1"><li>替换空单元格</li></ol><p>常用方法是计算列的均值、中位数值或众数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">missing_values = [<span class="string">"n/a"</span>, <span class="string">"na"</span>, <span class="string">"--"</span>]#自定义缺失值</span><br><span class="line"><span class="built_in">df</span>=pd.read_csv(<span class="string">"./data/csv/property-data.csv"</span>,na_values=missing_values)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">df</span>[<span class="string">"ST_NUM"</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span>[<span class="string">"ST_NUM"</span>].fillna(x, inplace = True)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>清洗格式错误数据</li></ol><p>利用to_datetime进行处理 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = {</span><br><span class="line">  <span class="string">"Date"</span>: [<span class="string">'2020/12/01'</span>, <span class="string">'2020/12/02'</span> , <span class="string">'20201226'</span>],</span><br><span class="line">  <span class="string">"duration"</span>: [50, 40, 45]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data, index = [<span class="string">"day1"</span>, <span class="string">"day2"</span>, <span class="string">"day3"</span>])</span><br><span class="line"><span class="built_in">df</span>[<span class="string">'Date'</span>] = pd.to_datetime(<span class="built_in">df</span>[<span class="string">'Date'</span>])</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure></p><ol start="4" type="1"><li>清洗错误数据</li></ol><p>利用loc(index,head)+if判断条件处理修改异常数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">person = {</span><br><span class="line">  <span class="string">"name"</span>: [<span class="string">'Google'</span>, <span class="string">'Runoob'</span> , <span class="string">'Taobao'</span>],</span><br><span class="line">  <span class="string">"age"</span>: [50, 40, 12345]    <span class="comment"># 12345 年龄数据是错误的</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line">  <span class="keyword">if</span> df.loc[x, <span class="string">"age"</span>] &gt; 120:</span><br><span class="line">    df.loc[x, <span class="string">"age"</span>] = 120</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>清洗重复数据</li></ol><p>利用<code>drop_duplicates</code>方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">persons = {</span><br><span class="line">  <span class="string">"name"</span>: [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>],</span><br><span class="line">  <span class="string">"age"</span>: [50, 40, 40, 23]  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span>=pd.DataFrame(persons)</span><br><span class="line"></span><br><span class="line">df.drop_duplicates(inplace = True)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">df</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6" type="1"><li>数据归一化和标准化</li></ol><p><code>StandardScaler()</code>标准化:将数据转换为均值为0，标准差为1的分布。</p><p><code>MinMaxScaler()</code>归一化:将数据缩放到指定的范围（如 [0,1]）</p><p><code>StandardScaler</code> 和 <code>MinMaxScaler</code> ，都是来自sklearn.preprocessing 模块的特征缩放器（scalers）</p><p>调用实例: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.preprocessing import MinMaxScaler</span><br><span class="line"></span><br><span class="line">scaler = MinMaxScaler()  <span class="comment"># 实例化</span></span><br><span class="line"><span class="built_in">df</span>[<span class="string">'ST_NUM'</span>] = scaler.fit_transform(<span class="built_in">df</span>[[<span class="string">'ST_NUM'</span>]])  <span class="comment"># 注意要用双中括号保持 DataFrame 结构</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><table><colgroup><col style="width: 15%"><col style="width: 45%"><col style="width: 39%"></colgroup><thead><tr><th>特性</th><th>归一化（Normalization）</th><th>标准化（Standardization）</th></tr></thead><tbody><tr><td>范围</td><td>通常压缩到 <code>[0, 1]</code></td><td>没有限定范围（均值为 0）</td></tr><tr><td>公式</td><td><span class="math inline">(<em>x</em> − <em>m</em><em>i</em><em>n</em>)/(<em>m</em><em>a</em><em>x</em> − <em>m</em><em>i</em><em>n</em>)</span></td><td><span class="math inline">(<em>x</em> − <em>μ</em>)/<em>σ</em></span></td></tr><tr><td>是否受异常值影响</td><td>容易受影响</td><td>相对不敏感</td></tr><tr><td>适合算法</td><td>KNN、SVM、距离类算法</td><td>线性模型、神经网络等</td></tr></tbody></table><h3 id="pandas求解数据的相关性">Pandas求解数据的相关性</h3><ul><li>皮尔逊相关系数(Pearson)：衡量两个变量之间线性关系强度和方向的指标，值域在[-1, 1] 之间。</li><li>斯皮尔曼等级相关系数(Spearman)：衡量两个变量的单调关系（即一个变量增加，另一个是否总是增加或总是减少，不要求线性）</li><li>肯德尔秩相关系数(kendall):衡量两个变量之间排名的一致性（秩的“方向一致”程度）。</li><li>相关性矩阵：用来查看各个变量之间的相关性。</li><li>热图：一种有效的可视化方式，可以帮助我们直观地查看变量之间的相关性。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data = {</span><br><span class="line">    <span class="string">'Height'</span>: [150, 160, 170, 180, 190],</span><br><span class="line">    <span class="string">'Weight'</span>: [45, 55, 65, 75, 85],</span><br><span class="line">    <span class="string">'Age'</span>: [20, 25, 30, 35, 40]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span> = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算皮尔逊相关系数</span></span><br><span class="line">correlation = df.corr(method=<span class="string">'pearson'</span>)</span><br><span class="line"><span class="built_in">print</span>(correlation)</span><br></pre></td></tr></table></figure><p>切换corr里面method值就是利用不同的方法求解相关系数</p>]]></content>
    
    
    <summary type="html">本文介绍pytorch的基本使用，深度学习基础算法和神经网络的构建知识</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="deeplearning" scheme="http://example.com/tags/deeplearning/"/>
    
    <category term="pytorch" scheme="http://example.com/tags/pytorch/"/>
    
    <category term="Transformer" scheme="http://example.com/tags/Transformer/"/>
    
  </entry>
  
  <entry>
    <title>curl使用教学</title>
    <link href="http://example.com/2025/07/26/curl/"/>
    <id>http://example.com/2025/07/26/curl/</id>
    <published>2025-07-26T04:00:00.000Z</published>
    <updated>2025-07-31T12:27:59.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>curl 是一个强大的命令行工具，用于在命令行或脚本中发送 HTTP请求，与服务器通信。它可以用来下载网页、调用 API接口、上传文件、发送表单等。几乎所有支持网络通信的协议 curl都能处理，包括 HTTP、HTTPS、FTP、SFTP、SMTP 等</p></blockquote><hr /><h2 id="一所以curl能干啥">一、所以curl能干啥</h2><table><colgroup><col style="width: 12%" /><col style="width: 87%" /></colgroup><thead><tr><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>获取网页内容</td><td><code>curl https://example.com</code></td></tr><tr><td>下载文件</td><td><code>curl -O https://example.com/file.zip</code></td></tr><tr><td>发送 POST 请求</td><td><code>curl -X POST -d "name=Koen&amp;age=20" https://example.com/api</code></td></tr><tr><td>添加请求头</td><td><code>curl -H "Authorization: Bearer TOKEN" https://api.example.com/data</code></td></tr><tr><td>上传文件</td><td><code>curl -F "file=@test.png" https://example.com/upload</code></td></tr><tr><td>保存输出到文件</td><td><code>curl https://example.com -o saved.html</code></td></tr></tbody></table><p>以下将对其功能进行详细解释</p><hr /><h2 id="二利用curl获取网页内容">二、利用curl获取网页内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl url</span><br></pre></td></tr></table></figure><p>会将get请求返回结果直接输出在命令行中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://example.com -o index.html</span><br></pre></td></tr></table></figure><p>保存指定内容到文件，地址为cmd当前地址</p><hr /><h2 id="三发送post请求">三、发送post请求</h2><p>一般用于测试接口是否正常 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">&quot;name=Koen&amp;age=20&quot;</span> https://example.com/api</span><br></pre></td></tr></table></figure> 带上请求头和请求体：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://api.example.com/data \</span><br><span class="line">  -H <span class="string">&quot;Authorization: Bearer abc123&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;key&quot;:&quot;va</span></span><br><span class="line"><span class="string">lue&quot;&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">     -d <span class="string">&#x27;&#123;&quot;username&quot;:&quot;koen&quot;,&quot;password&quot;:&quot;123456&quot;&#125;&#x27;</span> \</span><br><span class="line">     https://example.com/api</span><br></pre></td></tr></table></figure></p><hr /><h2 id="四利用curl进行文件上传">四、利用curl进行文件上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -F <span class="string">&quot;file=@test.png&quot;</span> https://example.com/upload</span><br></pre></td></tr></table></figure><p>-F就是指定用表单的方式进行字段的上传</p><table><colgroup><col style="width: 18%" /><col style="width: 81%" /></colgroup><thead><tr><th>部分</th><th>含义</th></tr></thead><tbody><tr><td><code>file</code></td><td>表单字段的名字。就像网页表单中<code>&lt;input type="file" name="file"&gt;</code>。</td></tr><tr><td><code>=</code></td><td>分隔字段名与数据（文件）</td></tr><tr><td><code>@test.png</code></td><td>表示上传当前目录下名为 <code>test.png</code> 的文件</td></tr></tbody></table><p>其实就是post请求上传文件的方式</p><hr />]]></content>
    
    
    <summary type="html">本文用于介绍curl命令行工具的基本操作和使用，全程干货，放心食用</summary>
    
    
    
    <category term="cmd" scheme="http://example.com/categories/cmd/"/>
    
    
    <category term="cmd" scheme="http://example.com/tags/cmd/"/>
    
    <category term="curl" scheme="http://example.com/tags/curl/"/>
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基本使用教程</title>
    <link href="http://example.com/2025/07/26/docker-basic-usage/"/>
    <id>http://example.com/2025/07/26/docker-basic-usage/</id>
    <published>2025-07-26T00:53:34.303Z</published>
    <updated>2025-08-02T07:25:13.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux 机器上，也可以实现虚拟化。</p></blockquote><hr /><h2 id="一docker的用途">一、Docker的用途</h2><p>Docker 的主要用途，目前有三大类。</p><ol type="1"><li><p>提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p></li><li><p>提供弹性的云服务。因为 Docker容器可以随开随关，很适合动态扩容和缩容。</p></li><li><p>组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p></li></ol><hr /><h2 id="二验证是否安装成功">二、验证是否安装成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><hr /><h2 id="三image文件">三、Image文件</h2><p>Docker 把应用程序及其依赖，打包在 <strong>image文件</strong>里面。只有通过这个文件，才能生成 Docker 容器。<br />image 文件可以看作是容器的模板，Docker 根据 image文件生成容器的实例。<br />同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是一个 <strong>二进制文件</strong>。实际开发中，一个 image文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。<br />举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache服务器，形成你自己的 image。</p><h3 id="列出本机的所有-image-文件">列出本机的所有 image 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 🗑️ 删除 image 文件</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ docker image <span class="built_in">rm</span> [imageName]</span><br></pre></td></tr></table></figure><p>image 文件是通用的，一台机器的 image文件拷贝到另一台机器，照样可以使用。</p><p>一般来说，为了节省时间，我们应该尽量使用别人制作好的 image文件，而不是自己制作。 即使要定制，也应该基于别人的 image文件进行加工，而不是从零开始制作。</p><h3 id="镜像仓库image-repository">镜像仓库（Image Repository）</h3><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。</p><ul><li>Docker 的官方仓库 <strong>Docker Hub</strong> 是最重要、最常用的image 仓库。</li><li>此外，你也可以使用国内的镜像仓库（如阿里云、腾讯云）或者搭建私有仓库。</li><li>出售自己制作的 image 文件也是可以的。</li></ul><h3 id="imagecontainer">image&amp;&amp;container</h3><p>容器是镜像跑起来的实例，一个镜像可以有多个容器</p><hr /><h2 id="四如何跑起来呢">四、如何跑起来呢</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker image pull &lt;project&gt;       <span class="comment">#将image文件从仓库抓取到本地</span></span><br><span class="line">docker container run &lt;project&gt;    <span class="comment">#将image文件在你的电脑上跑起来，新建容器</span></span><br><span class="line">docker container start [ID]       <span class="comment">#将已有的容器跑起来</span></span><br><span class="line">docker container <span class="built_in">kill</span> [ID]        <span class="comment">#手动终止容器的运行</span></span><br><span class="line">docker container <span class="built_in">ls</span>               <span class="comment">#在你电脑上正在跑起来的容器</span></span><br><span class="line">docker container <span class="built_in">ls</span> -all          <span class="comment">#列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">docker container <span class="built_in">rm</span> [containerID] <span class="comment">#删除停止运行的容器，防止占用硬盘空间</span></span><br><span class="line">docker <span class="built_in">exec</span> -it my-nginx bash     <span class="comment">#在叫my-nginx的容器内，开启一个bash命令终端进去操作</span></span><br></pre></td></tr></table></figure><p>注意，docker container run命令具有自动抓取 image文件的功能。如果发现本地没有指定的 image文件，就会从仓库自动抓取。因此，前面的docker imagepull命令并不是必需的步骤。</p><hr />]]></content>
    
    
    <summary type="html">本文介绍和更新Docker的基本使用方法。</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
    <category term="container" scheme="http://example.com/tags/container/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="virtual" scheme="http://example.com/tags/virtual/"/>
    
  </entry>
  
  <entry>
    <title>Git 基本使用教程</title>
    <link href="http://example.com/2025/07/25/git-basic-usage/"/>
    <id>http://example.com/2025/07/25/git-basic-usage/</id>
    <published>2025-07-25T15:00:00.000Z</published>
    <updated>2025-07-26T02:03:42.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git是一个分布式版本控制系统，适用于代码版本管理与团队协作开发。本文将简要介绍Git的一些常用操作命令，包括创建仓库、分支管理以及删除文件/分支的方法。</p></blockquote><hr /><h2 id="一初始化仓库">一、初始化仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>在当前目录初始化一个 Git 仓库。</li><li>会创建 <code>.git</code> 文件夹作为版本控制目录。</li></ul><hr /><h2 id="二克隆远程仓库">二、克隆远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt;</span><br><span class="line">```****</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/username/repo.git</span><br></pre></td></tr></table></figure><hr /><h2 id="三添加与提交文件">三、添加与提交文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;文件或目录&gt;</span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;添加初始项目文件&quot;</span></span><br></pre></td></tr></table></figure><hr /><h2 id="四查看状态与历史">四、查看状态与历史</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status        <span class="comment"># 查看当前状态</span></span><br><span class="line">git <span class="built_in">log</span>           <span class="comment"># 查看提交历史</span></span><br></pre></td></tr></table></figure><hr /><h2 id="五分支操作">五、分支操作</h2><h3 id="创建新分支">创建新分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="切换分支">切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 或（旧写法）</span></span><br><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="创建并切换新分支">创建并切换新分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="查看所有分支">查看所有分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><hr /><h2 id="六合并分支">六、合并分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;被合并的分支&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：需要先切换到目标分支，再合并。</p></blockquote><hr /><h2 id="七删除操作">七、删除操作</h2><h3 id="删除文件">删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;文件名&gt;</span><br><span class="line">git commit -m <span class="string">&quot;删除了某个文件&quot;</span></span><br></pre></td></tr></table></figure><h3 id="撤销删除误删恢复">撤销删除（误删恢复）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;文件名&gt;</span><br></pre></td></tr></table></figure><hr /><h3 id="删除本地分支">删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 是安全删除（合并过的才允许删）</li><li><code>-D</code> 是强制删除（无论是否合并）</li></ul><h3 id="删除远程分支">删除远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;分支名&gt;</span><br></pre></td></tr></table></figure><hr /><h2 id="八推送与拉取">八、推送与拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;分支名&gt;   <span class="comment"># 推送到远程</span></span><br><span class="line">git pull origin &lt;分支名&gt;   <span class="comment"># 拉取最新代码</span></span><br></pre></td></tr></table></figure><hr /><h2 id="九查看远程仓库">九、查看远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><hr /><h2 id="十总结">十、总结</h2><p>Git是开发者日常工作中不可或缺的工具，掌握它可以大大提升协作效率与版本管理能力。希望本文能帮助你快速上手Git 的基本操作。</p><hr /><blockquote><p>如需进一步学习，可以参考 <a href="https://git-scm.com/book/zh/v2">ProGit 中文版</a>。</p></blockquote>]]></content>
    
    
    <summary type="html">本文介绍 Git 的基本命令、分支操作与删除功能，适合初学者快速上手。</summary>
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="learn" scheme="http://example.com/tags/learn/"/>
    
    <category term="repo" scheme="http://example.com/tags/repo/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
